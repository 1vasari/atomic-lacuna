(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
    "buildings" : {
        "/operahouse" : { "description" : "A source of cultural influence for your space station.", "wiki" : "http://community.lacunaexpanse.com/wiki/opera-house" },
        "/artmuseum" : { "description" : "A source of cultural influence for your space station.", "wiki" : "http://community.lacunaexpanse.com/wiki/art-museum" },
        "/culinaryinstitute" : { "description" : "A source of cultural influence for your space station.", "wiki" : "http://community.lacunaexpanse.com/wiki/culinary-institute" },
        "/stationcommand" : { "description" : "The internal operations of a space station. Controls how big the station can be expanded.", "wiki" : "http://community.lacunaexpanse.com/wiki/station-command-center" },
        "/parliament" : { "description" : "The central government for the star systems that are controlled by a space station. Laws for the jurisdiction are made here.", "wiki" : "http://community.lacunaexpanse.com/wiki/parliament" },
        "/policestation" : { "description" : "The police station serves much the same purpose as a security ministry, but on a Space Station.", "wiki" : "http://community.lacunaexpanse.com/wiki/police-station" },
        "/warehouse" : { "description" : "Resource storage for a space station.", "wiki" : "http://community.lacunaexpanse.com/wiki/warehouse" },
        "/ibs" : { "description" : "A means of spreading the culture and influence of a space station's government.", "wiki" : "http://community.lacunaexpanse.com/wiki/interstellar-broadcast-system" },
        "/ssla" : { "description" : "Allows the construction of Space Station Lab modules. Requires four plots, and this is the top left corner of the building.", "wiki" : "http://community.lacunaexpanse.com/wiki/space-station-lab" },
        "/sslb" : { "description" : "Infrastructure required to support Space Station Lab (A).", "wiki" : "http://community.lacunaexpanse.com/wiki/space-station-lab" },
        "/sslc" : { "description" : "Infrastructure required to support Space Station Lab (A).", "wiki" : "http://community.lacunaexpanse.com/wiki/space-station-lab" },
        "/ssld" : { "description" : "Infrastructure required to support Space Station Lab (A).", "wiki" : "http://community.lacunaexpanse.com/wiki/space-station-lab" },
        "/distributioncenter" : { "description" : "A tier two resource storage building.  Allows keeping specific resources in reserve.", "wiki" : "http://community.lacunaexpanse.com/wiki/distribution-center" },
        "/saw" : { "description" : "A railgun system used to protect your planet from enemy ships.", "wiki" : "http://community.lacunaexpanse.com/wiki/shield-against-weapons" },
        "/atmosphericevaporator" : { "description" : "Produces water by condensing it from the air and soil.", "wiki" : "http://community.lacunaexpanse.com/wiki/atmospheric-evaporator" },
        "/greatballofjunk" : { "description" : "Eliminate waste and give your citizens something to be proud of at the same time.", "wiki" : "http://community.lacunaexpanse.com/wiki/great-ball-of-junk" },
        "/pyramidjunksculpture" : { "description" : "Eliminate waste and give your citizens something to be proud of at the same time.", "wiki" : "http://community.lacunaexpanse.com/wiki/pyramid-junk-sculpture" },
        "/spacejunkpark" : { "description" : "Eliminate waste and give your citizens something to be proud of at the same time.", "wiki" : "http://community.lacunaexpanse.com/wiki/space-junk-park" },
        "/junkhengesculpture" : { "description" : "Eliminate waste and give your citizens something to be proud of at the same time.", "wiki" : "http://community.lacunaexpanse.com/wiki/junk-henge-sculpture" },
        "/metaljunkarches" : { "description" : "Eliminate waste and give your citizens something to be proud of at the same time.", "wiki" : "http://community.lacunaexpanse.com/wiki/metal-junk-arches" },
        "/deployedbleeder" : { "description" : "Converts planet's resources directly into waste.", "wiki" : "http://community.lacunaexpanse.com/wiki/bleeder" },
        "/oracleofanid" : { "description" : "The all seeing Oracle can help detect enemy threats.", "wiki" : "http://community.lacunaexpanse.com/wiki/oracle-of-anid" },
        "/themepark" : { "description" : "Produces happiness for your citizens through food and entertainment.", "wiki" : "http://community.lacunaexpanse.com/wiki/theme-park" },
        "/geneticslab" : { "description" : "Allows genetic experiements on captured spies to improve your species.", "wiki" : "http://community.lacunaexpanse.com/wiki/genetics-lab" },
        "/massadshenge" : { "description" : "An ancient observatory.", "wiki" : "http://community.lacunaexpanse.com/wiki/massad-s-henge" },
        "/gratchsgauntlet" : { "description" : "The anti-espionage system of the Great Race.", "wiki" : "http://community.lacunaexpanse.com/wiki/gratch-s-gauntlet" },
        "/kasternskeep" : { "description" : "The place from which the Great Race commanded their armies.", "wiki" : "http://community.lacunaexpanse.com/wiki/kastern-s-keep" },
        "/hallsofvrbansk" : { "description" : "The source of ancient wisdom.", "wiki" : "http://community.lacunaexpanse.com/wiki/halls-of-vrbansk" },
        "/libraryofjith" : { "description" : "Where the Great Race kept records of their experiments.", "wiki" : "http://community.lacunaexpanse.com/wiki/library-of-jith" },
        "/thedillonforge" : { "description" : "Where raw ore formed into glyphs and the glyph buildings were born.", "wiki" : "http://community.lacunaexpanse.com/wiki/the-dillon-forge" },
        "/blackholegenerator" : { "description" : "An experimental singularity lab engineered by the Great Race.", "wiki" : "http://community.lacunaexpanse.com/wiki/black-hole-generator" },
        "/supplypod" : { "description" : "Used to hold emergency supplies on a damaged colony or on a fledgling colony.", "wiki" : "http://community.lacunaexpanse.com/wiki/supply-pod" },
        "/subspacesupplydepot" : { "description" : "Helps give a fledgling colony a kickstart.", "wiki" : "http://community.lacunaexpanse.com/wiki/subspace-supply-depot" },
        "/pantheonofhagness" : { "description" : "Increases the number of available plots on your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/pantheon-of-hagness" },
        "/crashedshipsite" : { "description" : "Harvest technology from a crashed ship to make your own ships better.", "wiki" : "http://community.lacunaexpanse.com/wiki/crashed-ship-site" },
        "/citadelofknope" : { "description" : "Defends your planet from incoming hostile ships by absorbing the damage onto itself.", "wiki" : "http://community.lacunaexpanse.com/wiki/citadel-of-knope" },
        "/ravine" : { "description" : "A natural place to store waste.", "wiki" : "http://community.lacunaexpanse.com/wiki/ravine" },
        "/fissure" : { "description" : "The first sign of a dying planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/fissure" },
        "/amalgusmeadow" : { "description" : "A wild meadow filled with wild amalgus beans.", "wiki" : "http://community.lacunaexpanse.com/wiki/amalgus-meadow" },
        "/dentonbrambles" : { "description" : "A thorny patch of brambles, who's roots happen to be the delicious denton roots.", "wiki" : "http://community.lacunaexpanse.com/wiki/denton-brambles" },
        "/malcudfield" : { "description" : "A natural source of food.", "wiki" : "http://community.lacunaexpanse.com/wiki/malcud-field" },
        "/lapisforest" : { "description" : "A natural source of food.", "wiki" : "http://community.lacunaexpanse.com/wiki/lapis-forest" },
        "/algaepond" : { "description" : "A natural source of food.", "wiki" : "http://community.lacunaexpanse.com/wiki/algae-pond" },
        "/beeldebannest" : { "description" : "A natural source of food.", "wiki" : "http://community.lacunaexpanse.com/wiki/beeldeban-nest" },
        "/geothermalvent" : { "description" : "A natural source of energy from the planet's core.", "wiki" : "http://community.lacunaexpanse.com/wiki/geo-thermal-vent" },
        "/naturalspring" : { "description" : "A natural source of water from the planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/natural-spring" },
        "/interdimensionalrift" : { "description" : "The Great Race somehow learned a technique to create a pocket of subspace with a door into our world. This allowed them to store lots of resources, without taking up much space.", "wiki" : "http://community.lacunaexpanse.com/wiki/interdimensional-rift" },
        "/templeofthedrajilites" : { "description" : "The Temple of a group of star gazers from the Great Race. It was their belief that through ritual they could see other worlds.", "wiki" : "http://community.lacunaexpanse.com/wiki/temple-of-the-drajilites" },
        "/sand" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/patch-of-sand" },
        "/grove" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/grove-of-trees" },
        "/lagoon" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/lagoon" },
        "/kalavianruins" : { "description" : "Attracts tourists and creates a sense of wonder for locals, increasing the happiness of your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/kalavian-ruins" },
        "/essentiavein" : { "description" : "Produces trace amounts of Essentia.", "wiki" : "http://community.lacunaexpanse.com/wiki/essentia-vein" },
        "/volcano" : { "description" : "A natural source of ore.", "wiki" : "http://community.lacunaexpanse.com/wiki/volcano" },
        "/luxuryhousing" : { "description" : "Produces more happiness than the Entertainment District, but costs more too.", "wiki" : "http://community.lacunaexpanse.com/wiki/luxury-housing" },
        "/pilottraining" : { "description" : "Increases speed and stealth of new piloted ships, and enables building Fighters.", "wiki" : "http://community.lacunaexpanse.com/wiki/pilot-training-facility" },
        "/missioncommand" : { "description" : "Lists available missions in your zone. You can view one mission per level of the Mission Command.", "wiki" : "http://community.lacunaexpanse.com/wiki/mission-command" },
        "/cloakinglab" : { "description" : "Increases the stealth of new ships.", "wiki" : "http://community.lacunaexpanse.com/wiki/cloaking-lab" },
        "/munitionslab" : { "description" : "Enables you to build the Detonator, Snark, and Seeker robotic war ships.", "wiki" : "http://community.lacunaexpanse.com/wiki/munitions-lab" },
        "/crater" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/crater" },
        "/rockyoutcrop" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/rocky-outcropping" },
        "/lake" : { "description" : "Decoration for your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/lake" },
        "/beach1" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-1" },
        "/beach2" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-2" },
        "/beach3" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-3" },
        "/beach4" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-4" },
        "/beach5" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-5" },
        "/beach6" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-6" },
        "/beach7" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-7" },
        "/beach8" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-8" },
        "/beach9" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-9" },
        "/beach10" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-10" },
        "/beach11" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-11" },
        "/beach12" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-12" },
        "/beach13" : { "description" : "Decoration for your planet. Use with other beach tiles to create a beach front.", "wiki" : "http://community.lacunaexpanse.com/wiki/beach-13" },
        "/algae" : { "description" : "Produces algae to be used as food by your empire.  It also produces a small amount of energy and can be built in any orbit.  The higher the level of the cropper the more food and energy it produces.", "wiki" : "http://community.lacunaexpanse.com/wiki/algae-cropper" },
        "/apple" : { "description" : "Allows you to grow apples to feed your empire.  You can only grow apples in orbit 3 (its goldilox zone).  Food production increases for every level of the orchard.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/apple-orchard" },
        "/archaeology" : { "description" : "Allows you to search through specific types of ore to find Glyphs.", "wiki" : "http://community.lacunaexpanse.com/wiki/archaeology-ministry" },
        "/bean" : { "description" : "Allows you to grow beans to be used as food by your empire.  You can only grow beans in orbit 4 (its goldilox zone).  The higher the level of the plantation the more food it produces.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/amalgus-bean-plantation" },
        "/beeldeban" : { "description" : "Allows the raising of beeldeban to be used as food for your empire. The higher the building level the more food is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/beeldeban-herder" },
        "/bread" : { "description" : "Converts wheat from the Wheat Farm at a minimal loss into bread to be used as food by your empire.  The conversion rate increases with every level of the Bakery.", "wiki" : "http://community.lacunaexpanse.com/wiki/bakery" },
        "/burger" : { "description" : "Converts fungus from the Malcud Fungus Farm and produces burgers, at a small loss, to food.  The higher the building level the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/burger-packer" },
        "/capitol" : { "description" : "Provides protection from Insurrection, and produces happiness.", "wiki" : "http://community.lacunaexpanse.com/wiki/capitol" },
        "/cheese" : { "description" : "Converts milk from the Dairy Farm into cheese at a small loss to be used as food.  The higher the building level the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/cheese-maker" },
        "/chip" : { "description" : "Converts roots from the Denton Root Farm and turns it into root chips as food for your empire at a minimal loss.  The higher the level of the Chip Frier the more food it converts.", "wiki" : "http://community.lacunaexpanse.com/wiki/denton-root-chip-frier" },
        "/cider" : { "description" : "Allows you to convert apples from the Apple Orchard into cider with a small amount of loss.  The amount of apples converted into cider increases with the level of the building.", "wiki" : "http://community.lacunaexpanse.com/wiki/apple-cider-bottler" },
        "/corn" : { "description" : "Produces corn to be used as food by your empire.  The corn plantation can only be used in orbits 2 and 3.  The higher the level of the plantation the more food is produced.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/corn-plantation" },
        "/cornmeal" : { "description" : "Converts corn from the Corn Plantation into corn meal at a small loss to be used as food.  The higher the building level the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/corn-meal-grinder" },
        "/dairy" : { "description" : "Allows you to produce food via dairy cattle.  It can only be used in orbit 3 (its goldilox zone).  The higher the level of farm the more food it produces. Cows require certain minerals in their diet in order to produce lots of high quality milk. Therefore in order to have a dairy farm you're going to need a good supply of trona.", "wiki" : "http://community.lacunaexpanse.com/wiki/dairy-farm" },
        "/denton" : { "description" : "Produces roots to be used as food by your empire.  The roots only grow in orbits 5 and 6 (its goldilox zone).  The higher the level of the patch the more food it produces.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/denton-root-patch" },
        "/development" : { "description" : "Allows you to monitor your build queue and subsidize the construction of buildings through the use of Essentia. The higher the level of the building the more buildings you can have in your queue, however the queue still builds in series not in parallel. The number of projects that can be placed in the queue is the level of the ministry plus 1. ", "wiki" : "http://community.lacunaexpanse.com/wiki/development-ministry" },
        "/embassy" : { "description" : "Allows the formation of alliances. It is also a prerequisite to building the Space Station. Each level of the Embassy allows 2 more members to join the alliance. Each level of the embassy allows 1 stash exchange per day, and 10,000 more resources per exchange.", "wiki" : "http://community.lacunaexpanse.com/wiki/embassy" },
        "/energyreserve" : { "description" : "Stores your energy with a minimal amount of loss.  Increasing the level of the building raises the amount of energy stored.", "wiki" : "http://community.lacunaexpanse.com/wiki/energy-reserve" },
        "/entertainment" : { "description" : "Increases your empire's happiness by providing a place for your citizens to unwind through activities such as casinos, restaurants, clubs and other amusements.  The higher the building level the more happiness is produced. It can also be a source of essentia through its lottery system.", "wiki" : "http://community.lacunaexpanse.com/wiki/entertainment-district" },
        "/espionage" : { "description" : "Allows the construction of spy pods and spy shuttles at the shipyard.  It also allows better training of your spies.  The higher the building level, the more effective your spies will be applying their trade. ", "wiki" : "http://community.lacunaexpanse.com/wiki/espionage-ministry" },
        "/foodreserve" : { "description" : "Stores your food with a minimal amount of spoilage.  It also gives you a report of the types of food you have stored.  Increasing the level of this building increases the amount of food that can be stored.", "wiki" : "http://community.lacunaexpanse.com/wiki/food-reserve" },
        "/fission" : { "description" : "Produces energy by splitting atoms.  This way of producing energy is very efficient on an waste per energy produced ratio.  The higher the building level the more energy is produced. Splitting the atoms non-energenic particles doesn't produce much power, so you'll need radioactive ore to power your fission plant, such as uraninite or monazite.", "wiki" : "http://community.lacunaexpanse.com/wiki/fission-energy-plant" },
        "/fusion" : { "description" : "Produces energy by fusing atoms together.  This type of energy is even more efficient than the Fission Energy Plant on a waste per energy produced ratio.  Requires a high level University to construct.  The higher the building level the more energy is produced. Unfortunately the fusion plant produces enormous amounts of heat as well which requires coolants such as molten lead or salt. Therefore you'll need a good supply of galena or halite to build one.", "wiki" : "http://community.lacunaexpanse.com/wiki/fusion-energy-plant" },
        "/gasgiantlab" : { "description" : "Does research on the gas giant ship which deploys into a gas giant platform.  The gas giant platform allows settlement of a gas giant.  The higher the building level the higher the level of the platform deployed from the gas giant ship.", "wiki" : "http://community.lacunaexpanse.com/wiki/gas-giant-lab" },
        "/gasgiantplatform" : { "description" : "Increases the available plots on a gas giant.", "wiki" : "http://community.lacunaexpanse.com/wiki/gas-giant-settlement-platform" },
        "/geo" : { "description" : "Produces energy with a minimal amount of waste by using the planets own processes such as wind, waves, solar and geo thermal.  The higher the level of the building the more energy is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/geo-energy-plant" },
        "/hydrocarbon" : { "description" : "Produces large amounts of energy at the cost of producing large amounts of waste by burning hydrocarbons.  It also uses significant amounts of ore in the production of this energy.  The higher the building level the more energy is produced.  Hydrocarbon energy is derived from burning hydrocarbons, so you'll need a good supply of kerogen, methane, or anthracite in order to power it.", "wiki" : "http://community.lacunaexpanse.com/wiki/hydrocarbon-energy-plant" },
        "/intelligence" : { "description" : "Trains spies.  You may train 3 spies per level of this building.  You may only construct 1 Intelligence Ministry on a planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/intelligence-ministry" },
        "/inteltraining" : { "description" : "Trains spies in the ways of intelligence gathering. You may only construct 1 Intel Training Facility on a planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/intel-training-facility" },
        "/lapis" : { "description" : "Produces lapis to be used as food by your empire.  Lapis can only be grown in orbit 2 (its goldilox zone).  The higher the level of the orchard the more food it produces.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/lapis-orchard" },
        "/malcud" : { "description" : "Produces fungus to be used as food by your empire.  The Farm also consumes a small amount of waste and can be built in any orbit.  The higher the level of the farm the more food is produced and waste consumed.", "wiki" : "http://community.lacunaexpanse.com/wiki/malcud-fungus-farm" },
        "/mayhemtraining" : { "description" : "Trains spies in the art of destruction. You may only construct 1 Mayhem Training Facility on a planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/mayhem-training-facility" },
        "/mercenariesguild" : { "description" : "A black market for buying and selling well trained spies.", "wiki" : "http://community.lacunaexpanse.com/wiki/mercenaries-guild" },
        "/mine" : { "description" : "Extracts mineral from your planet in the form of ore.  The amounts of each mineral extracted depends on the concentration and composition of the planet. The higher the level of the mine the more ore is extracted.", "wiki" : "http://community.lacunaexpanse.com/wiki/mine" },
        "/miningministry" : { "description" : "Allows you to harvest resources from asteroids. Allows the construction of Mining Platform Ships. Every two levels allows an additional Mining Platform. Each level increases the output of all Mining Platforms controlled by the Ministry.", "wiki" : "http://community.lacunaexpanse.com/wiki/mining-ministry" },
        "/network19" : { "description" : "Your empire's source for up to the minute news in your region of the Expanse.  Get updates on what other empire's are doing and what you'd prefer they weren't doing.  The Network 19 feed can be manipulated through the use of of espionage and political policy.  Well informed people are happy people so the network also produces happiness.  The higher the building level the more of the expanse you can get news from and the more happiness is produced. ", "wiki" : "http://community.lacunaexpanse.com/wiki/network-19-affiliate" },
        "/observatory" : { "description" : "Allows the construction of probes and colony ships at the shipyard.  It also provides a list of all your active probes and the stars they are observing.  A higher building level allows more probes to be constructed.", "wiki" : "http://community.lacunaexpanse.com/wiki/observatory" },
        "/orerefinery" : { "description" : "Increases the amount of ore extracted from each terrestrial ore producing structure by purifying the ore and producing less waste.  The higher the refinery level the higher the purification process and even greater amounts of ore are extracted. The ore refinery requires sufficient amounts of either sulfur or fluorite being produced in order to process ore.", "wiki" : "http://community.lacunaexpanse.com/wiki/ore-refinery" },
        "/orestorage" : { "description" : "Store the ore that is pulled from the Mine.  The higher the level of the building the more ore can be stored.", "wiki" : "http://community.lacunaexpanse.com/wiki/ore-storage-tanks" },
        "/oversight" : { "description" : "Reduces the amount of time buildings take to upgrade through better project management. All buildings will be produced 3% faster per level of the Oversight Ministry.", "wiki" : "http://community.lacunaexpanse.com/wiki/oversight-ministry" },
        "/pancake" : { "description" : "Converts potatoes from the Potato Plantation into pancakes at a minimal loss to be used as food by your empire.  The higher the level of the factory, the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/pancake-factory" },
        "/park" : { "description" : "A place for your people to gather and enjoy nature or hold large scale public events.  The Park allows you to throw parties for your citizens to increase their happiness.  The more varieties of foods you bring to the party the more happiness is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/park" },
        "/pie" : { "description" : "Converts lapis from the Lapis Orchard into pies at minimal loss to be used as food by your empire.  The higher the level of the bakery, the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/pie-bakery" },
        "/planetarycommand" : { "description" : "Houses the central government for your empire.  This is your \"flag in the ground\" that lets everyone know you've staked your claim to a planet. It provides some basic resources and and storage for those resources both of which increase with the level of this building.  The planetary command also provides some critical reports on your planetary activities such as total resource production and total resource storage for the planet it's constructed on.", "wiki" : "http://community.lacunaexpanse.com/wiki/planetary-command-center" },
        "/politicstraining" : { "description" : "Trains spies in the dark art of social engineering. You may only construct 1 Politics Training Facility on a planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/politics-training-facility" },
        "/potato" : { "description" : "Allows you to grow potatoes to be used as food for you empire.  The patch can only be used in orbits 3 and 4 (its goldilox zone).  The higher the level of the patch the more food it produces.  All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/potato-patch" },
        "/propulsion" : { "description" : "Allows your ships to move faster through space by way of upgraded engines.  The higher the building level the faster your ships move.  All ships originating from this planet are affected.  In order to produce high performance engines you'll need a good supply of structural minerals such as rutile, chromite, bauxite, magnetite, beryl, or goethite.", "wiki" : "http://community.lacunaexpanse.com/wiki/propulsion-system-factory" },
        "/security" : { "description" : "Increases the effectiveness of your counter-spies and allows you to detect foreign spies.  The higher the building level the more training your counter-spies receive.  The building will be able to detect foreign spies with a level equal to or lower than the building.  It will also help detect incoming ships containing spies.", "wiki" : "http://community.lacunaexpanse.com/wiki/security-ministry" },
        "/shake" : { "description" : "Converts the beeldeban that are harvested in the Beeldeban Herder into protein shakes, at a small loss, to be used as food.  The higher the level of the factory the more food is converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/beeldeban-protein-shake-factory" },
        "/shipyard" : { "description" : "Constructs ships. The types of ships that can be built in the Shipyard are dependent on some of the other buildings on your planet.  The higher the building level the faster ships are produced. In addition, you may queue one ship per level of shipyard.", "wiki" : "http://community.lacunaexpanse.com/wiki/shipyard" },
        "/singularity" : { "description" : "Produces energy by pulling it from subspace.  This is the cleanest and most powerful form of energy in the universe. This is extremely expensive to build and requires a very high level University to construct.  The higher the building level the more energy is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/singularity-energy-plant" },
        "/soup" : { "description" : "Converts beans from the Amalgus Bean Plantation at a minimal loss into soup to be used as food for your empire. The higher the level of the cannery the more soup is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/soup-cannery" },
        "/spaceport" : { "description" : "Acts as the hangar and control tower for your ships.  Here is where you can monitor your ships that are in transit.  Be careful as the Space Port can only hold a limited number of ships, if there is no more room in the Space Port when a ship arrives or is built, it will be destroyed.  The Space Port can hold double its level in ships and queue its level in ships. ", "wiki" : "http://community.lacunaexpanse.com/wiki/space-port" },
        "/stockpile" : { "description" : "Allows resource buildings to go above level 20. Provides storage.", "wiki" : "http://community.lacunaexpanse.com/wiki/stockpile" },
        "/syrup" : { "description" : "Takes algae from the Algae Cropper and converts it in to Syrup with a small loss to be used as food.  The higher the level of the bottler the more food is produced.", "wiki" : "http://community.lacunaexpanse.com/wiki/syrup-bottler" },
        "/thefttraining" : { "description" : "Trains spies in the art of appropriation. You may only construct 1 Theft Training Facility on a planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/theft-training-facility" },
        "/terraforminglab" : { "description" : "The Terraforming Lab is where research is done on the production of terraforming platform ships. Terraforming platform ships deploy into terraforming platforms which allows you to colonize planets your species wouldn't normally be capable of colonizing. The level of the building determines the level of the platform that is deployed from the ship.", "wiki" : "http://community.lacunaexpanse.com/wiki/terraforming-lab" },
        "/terraformingplatform" : { "description" : "Increases the available build space on a planet that is not naturally inhabitable by your species.", "wiki" : "http://community.lacunaexpanse.com/wiki/terraforming-platform" },
        "/trade" : { "description" : "Allows access to the interstellar market.  Through it you can set up trades for resources with other empires.  This building is a prerequisite to building cargo ships, which carry your trade goods, in the shipyard.  The higher the building level the more resources your cargo ships can carry.", "wiki" : "http://community.lacunaexpanse.com/wiki/trade-ministry" },
        "/transporter" : { "description" : "Allows the instant transport of resources to a destination, but requires Essentia.  The transporter also allows conversion of resources through trading with the Lacunans.  The higher the building level the more goods can be transported.", "wiki" : "http://community.lacunaexpanse.com/wiki/subspace-transporter" },
        "/university" : { "description" : "Is the key to growth for your empire.  Other buildings can not be upgraded higher than the university building level plus 1.  Your university's level is empire wide where construction level of buildings on other planets is concerned.  Many of the more powerful buildings that can be constructed require a very high level University.  The University is also a source of happiness for empire. ", "wiki" : "http://community.lacunaexpanse.com/wiki/university" },
        "/wastedigester" : { "description" : "Converts waste into ore.  The higher the building level the more ore is produced and waste consumed.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-digester" },
        "/wasteenergy" : { "description" : "Produces energy by burning your empire's waste.  Producing energy this way is far less efficient than other types of energy production, but the benefit is that waste is reduced.  The higher the building level the more energy is produced and waste consumed. In order to build and maintain the blast furnace you need a good supply of insulating ores such as zircon, beryl, and gypsum.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-energy-plant" },
        "/wasterecycling" : { "description" : "Allows you to manually convert large batches of waste into energy, ore and water.  The more waste you convert, the longer it will take to make the resources you want.  The higher the level of the building the faster the conversion will take place.  You can also spend a small amount of Essentia to convert the waste instantly.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-recycling-center" },
        "/wasteexchanger" : { "description" : "The Waste Exchanger is a combination of a waste recycling center, waste sequestration well, and a waste treatment center. It tears apart waste at a molecular level and recombines it into useful resources.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-exchanger" },
        "/wastesequestration" : { "description" : "Stores waste.  Waste that is not stored turns into pollution and lowers your empire's happiness.  The higher the building level the more waste can be stored.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-sequestration-well" },
        "/wastetreatment" : { "description" : "Converts waste into water, ore, and energy. Waste treatment requires special chemical compounds derived from halite, sulfur, and trona.", "wiki" : "http://community.lacunaexpanse.com/wiki/waste-treatment-center" },
        "/waterproduction" : { "description" : "Converts energy and ore into water.  This is especially useful on planets with low concentrations of water.  A higher building level means more resources are converted.", "wiki" : "http://community.lacunaexpanse.com/wiki/water-production-plant" },
        "/waterpurification" : { "description" : "Produces water from the planet's sources. The higher the building level the more water it can purify.", "wiki" : "http://community.lacunaexpanse.com/wiki/water-purification-plant" },
        "/waterreclamation" : { "description" : "Converts waste into water.  A higher building level means more resources are converted.  If you don't have a good supply of halite or sulfur you cannot treat waste water.", "wiki" : "http://community.lacunaexpanse.com/wiki/water-reclamation-facility" },
        "/waterstorage" : { "description" : "Stores the water you've collected.  A higher building level allows more water to be stored.", "wiki" : "http://community.lacunaexpanse.com/wiki/water-storage-tank" },
        "/wheat" : { "description" : "Allows you to grow wheat on your planet.  You can only grow wheat on planets that are in orbits 2, 3 or 4 (the goldilox zone).  The Farm will produce more wheat for each level it is increased. All plants need a source of phosphorus to photosynthesize their food. Therefore you need a good source of gypsum, sulfur, or monazite for plants to thrive.", "wiki" : "http://community.lacunaexpanse.com/wiki/wheat-farm" },
        "/lcota" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure. Be sure to place it where all the plots around it are unoccupied, and on a planet where you have 9 available plots.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcotb" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcotc" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcotd" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcote" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcotf" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcotg" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcoth" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" },
        "/lcoti" : { "description" : "A self contained city that produces all it's own resources and waste management. It also produces a lot extra for you to use to support your other infrastructure.", "wiki" : "http://community.lacunaexpanse.com/wiki/lost-city-of-tyleon" }
    },
    "ships" : {
        "stake" : { "description" : "Allows you to claim a planet prior to your colony ship arriving.", "wiki" : "http://community.lacunaexpanse.com/wiki/stake" },
        "thud" : { "description" : "Temporarily destroys plots on a planet's surface.", "wiki" : "http://community.lacunaexpanse.com/wiki/thud" },
        "sweeper" : { "description" : "An upgraded Fighter whose primary role is offense rather than defense.", "wiki" : "http://community.lacunaexpanse.com/wiki/sweeper" },
        "supply_pod" : { "description" : "Creates temporary storage on a remote planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/supply-pod" },
        "supply_pod2" : { "description" : "A larger version of the Supply Pod.", "wiki" : "http://community.lacunaexpanse.com/wiki/supply-pod" },
        "supply_pod3" : { "description" : "A very large version of the Supply Pod.", "wiki" : "http://community.lacunaexpanse.com/wiki/supply-pod" },
        "supply_pod4" : { "description" : "A huge version of the Supply Pod.", "wiki" : "http://community.lacunaexpanse.com/wiki/supply-pod" },
        "placebo" : { "description" : "Use to fake an attack on another player.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "placebo2" : { "description" : "A faster and more stealthed version of the Placebo.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "placebo3" : { "description" : "A faster and more stealthed version of the Placebo II.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "placebo4" : { "description" : "A faster and more stealthed version of the Placebo III.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "placebo5" : { "description" : "A faster and more stealthed version of the Placebo IV.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "placebo6" : { "description" : "A faster and more stealthed version of the Placebo V.", "wiki" : "http://community.lacunaexpanse.com/wiki/placebo" },
        "probe" : { "description" : "Send to a star to allow you to view the bodies orbiting that star.", "wiki" : "http://community.lacunaexpanse.com/wiki/probe" },
        "colony_ship" : { "description" : "Use to create a new colony for your empire.", "wiki" : "http://community.lacunaexpanse.com/wiki/colony-ship" },
        "short_range_colony_ship" : { "description" : "Use to create a new colony for your empire. Very fast, but with a limited range. Useful within your own, or very close, star systems.", "wiki" : "http://community.lacunaexpanse.com/wiki/short-range-colony-ship" },
        "spy_pod" : { "description" : "Stealthy one way transport for a spy.", "wiki" : "http://community.lacunaexpanse.com/wiki/spy-pod" },
        "cargo_ship" : { "description" : "Medium transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/cargo-ship" },
        "space_station" : { "description" : "The base hull upon which you can build space station modules to build a complete space station.", "wiki" : "http://community.lacunaexpanse.com/wiki/space-station" },
        "smuggler_ship" : { "description" : "Stealthy transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/smuggler-ship" },
        "mining_platform_ship" : { "description" : "Allows the gathering of resources from asteroids.", "wiki" : "http://community.lacunaexpanse.com/wiki/mining-platform-ship" },
        "terraforming_platform_ship" : { "description" : "Allows you to settle planets your species could not normally colonize.", "wiki" : "http://community.lacunaexpanse.com/wiki/terraforming-platform-ship" },
        "gas_giant_settlement_ship" : { "description" : "Allows you to settle gas giants.", "wiki" : "http://community.lacunaexpanse.com/wiki/gas-giant-settlement-ship" },
        "scow" : { "description" : "Robotic waste transport ship. Can be used to dispose of waste in space.", "wiki" : "http://community.lacunaexpanse.com/wiki/scow" },
        "scow_fast" : { "description" : "Much faster than a normal scow. Robotic waste transport ship. Can be used to dispose of waste in space.", "wiki" : "http://community.lacunaexpanse.com/wiki/scow" },
        "scow_large" : { "description" : "Much larger and a bit slower than a normal scow. Robotic waste transport ship. Can be used to dispose of waste in space.", "wiki" : "http://community.lacunaexpanse.com/wiki/scow" },
        "scow_mega" : { "description" : "Incredibly larger and slower than a normal scow. Almost useless as an attack. Robotic waste transport ship. Can be used to dispose of waste in space.", "wiki" : "http://community.lacunaexpanse.com/wiki/scow" },
        "bleeder" : { "description" : "Robotic war ship. Once deployed on enemy planet, starts stealing resources and converting them into waste.", "wiki" : "http://community.lacunaexpanse.com/wiki/bleeder" },
        "dory" : { "description" : "Small transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/dory" },
        "barge" : { "description" : "Versatile transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/barge" },
        "galleon" : { "description" : "Fast medium transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/galleon" },
        "hulk" : { "description" : "Extra large transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/hulk" },
        "hulk_fast" : { "description" : "Extra large transport ship slightly bigger and much faster than a Hulk. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/hulk" },
        "hulk_huge" : { "description" : "Incredibly large and very slow transport ship, useful for supply chains. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/hulk" },
        "fissure_sealer" : { "description" : "Large slow ship, used to attempt sealing fissures on uninhabited planets.", "wiki" : "http://community.lacunaexpanse.com/wiki/fissure-sealer" },
        "freighter" : { "description" : "Large transport ship. Can be used to push resources between your colonies, trade with other empires, or gather ore from mining platforms.", "wiki" : "http://community.lacunaexpanse.com/wiki/freighter" },
        "snark" : { "description" : "Robotic bombardment weapon, that can be used to destroy buildings on remote planets.", "wiki" : "http://community.lacunaexpanse.com/wiki/snark" },
        "snark2" : { "description" : "An improved version of the Snark, which has a splash damage radius of 1.", "wiki" : "http://community.lacunaexpanse.com/wiki/snark" },
        "snark3" : { "description" : "An improved version of the Snark, which has a splash damage radius of 2.", "wiki" : "http://community.lacunaexpanse.com/wiki/snark" },
        "drone" : { "description" : "Single use robotic defense weapon, that can stop enemy attacks before they reach your planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/drone" },
        "fighter" : { "description" : "Piloted defense ship that can stop enemy attacks before they reach your planet. Can also be sent to defend other bodies.", "wiki" : "http://community.lacunaexpanse.com/wiki/fighter" },
        "spy_shuttle" : { "description" : "Stealthy transport for up to four spies, that can orbit the target body waiting to pick the spies back up.", "wiki" : "http://community.lacunaexpanse.com/wiki/spy-shuttle" },
        "observatory_seeker" : { "description" : "Variant of the Snark that attacks an Observatory.", "wiki" : "http://community.lacunaexpanse.com/wiki/observatory-seeker" },
        "security_ministry_seeker" : { "description" : "Variant of the Snark that attacks a Security Ministry.", "wiki" : "http://community.lacunaexpanse.com/wiki/security-ministry-seeker" },
        "spaceport_seeker" : { "description" : "Variant of the Snark that attacks a SpacePort.", "wiki" : "http://community.lacunaexpanse.com/wiki/spaceport-seeker" },
        "excavator" : { "description" : "Robotic explorer that searches remote bodies looking for artifacts.", "wiki" : "http://community.lacunaexpanse.com/wiki/excavator" },
        "detonator" : { "description" : "Variant of the Snark that detonates in an electromagnetic pulse, which can be used to destroy probes, mining platforms, or excavators.", "wiki" : "http://community.lacunaexpanse.com/wiki/detonator" },
        "surveyor" : { "description" : "Robotic explorer that snaps a photograph of the surface of a remote planet, and also identifies the buildings in the photograph.", "wiki" : "http://community.lacunaexpanse.com/wiki/surveyor" },
        "scanner" : { "description" : "Robotic explorer that snaps a photograph of the surface of a remote planet.", "wiki" : "http://community.lacunaexpanse.com/wiki/scanner" }
    },
    "tips" : [
        "Water Purification Plants are cheap, but slow. If you can afford them, Water Production Plants produce more water.",
        "You need at least 3 food types to keep your people happy.",
        "Building a Development Ministry will let you queue multiple buildings at once.",
        "Buildings are built in series. So if you already have a building upgrading that will take 20 minutes, and you add a building that takes 15 seconds, the second building will take 20:15.",
        "Buildings have both a cost and an upkeep. Cost is what it costs to build/upgrade the building. Upkeep is what it costs per hour to run the building.",
        "If you have at least 4 food types, every time you build something you'll gain happiness.",
        "You can use Essentia in the Development Ministry to auto-complete your entire build queue.",
        "If your waste overflows it will create pollution, and that will make your people unhappy.",
        "A good build strategy is to upgrade your storage first, then your resource generators, then your University.",
        "Try to make sure your resource production will completely fill your available storage at least once per day.",
        "If you run out of resources, your people will not be happy.",
        "Construction and upgrades produce bulk waste all at once. Be sure you can store it, or the pollution it generates will make your citizens unhappy.",
        "Though the planet map shows 121 spaces for buildings, each planet is limited to a certain number of plots. You can see how many plots are remaining in the Planetary Command Center.",
        "In order to manage waste or recycle it, you must first store it. Build a Waste Sequestration Well to store waste.",
        "Waste can be a very valuable resource. Build waste management buildings like Waste Reclamation, Waste Treatement, or Waste Digesters to turn it into useful resources.",
        "You can use Essentia in the Waste Recycling Plant to instantly complete the recycling process.",
        "We recommend at least 2 of each type of storage on every planet.",
        "If you invite your friends to the game, and a few of them sign up, you'll start getting special buildings as rewards.",
        "You can use Essentia in the Shipyard to auto-complete your entire build queue.",
        "Knowledge gained from the University is permanent. Even if you demolish the University you still have the knowledge.",
        "While you are waiting for your building upgrades to complete, build and send out probes to see what's around you.",
        "Building an Oversight Ministry will speed up all of your building build/upgrade times.",
        "You can win free Essentia in the Lottery at the Entertainment District.",
        "Both the cost and production of buildings rise expontentially. Production rises slightly slower than cost however.",
        "As an isolationist you are immune to attack. You are no longer an isolationist if you colonize a second planet, or build an Espionage Ministry or Munitions Lab.",
        "Most ships are one use only, meaning once you send them you cannot get them back. Exceptions to this are trade ships like Dories and Cargo Ships.",
        "Looking to the future you may want to upgrade your existing energy plants with newer technology as it becomes available.",
        "You can use Essentia in the Intelligence Ministry to train spies instantly.",
        "It costs 100,000 happiness to colonize your second planet, but it gets much more difficult for each subsequent colony.",
        "You can use Essentia in the Park to speed along parties.",
        "The University is global. The level of University you built on one planet affects all your planets. The University is the only building that has this ability.",
        "As soon as a colony ship arrives at a new planet it begins functioning. Be prepared to deal with it when the ship arrives.",
        "When choosing a planet to colonize things to consider are its size, distance from your other colonies, distance from asteroids, ore composition, and water composition.",
        "Make sure you have some dories available when you colonize a planet so you can ship resources to the new colony to give it a head start.",
        "You can use Essentia in the Subspace Transporter to do instant 1:1 trades of any resource.",
        "Spies are the primary form of combat in the game. Send spies to other people's planets and you'll be able to gather information, sabotage infastructure, and steal resources from them.",
        "Though you can lose colonies to spies, you cannot ever lose your home planet.",
        "Some ores are only found in abundance on asteroids.",
        "Resource buildings can only go to level 20, while all other buildings can go to level 30.",
        "Glyphs enable you to build incredibly powerful buildings that aren't part of the normal technology tree.",
        "You can use Essentia in the Archaeology Ministry to search for glyphs instantly.",
        "Drones, Fighters, and Sweepers defend your planet from other player's ships.",
        "Spies defend your planet from other player's spies.",
        "Glyph buildings take up no plots.",
        "Higher level Spaceports can tell you more information about ships that are coming in from other players.",
        "A higher level Security Ministry increases the chance of catching enemy spies as they come and go from your planet.",
        "A higher level Security Ministry allows you to see more detail about the enemy spies that are on your planet.",
        "You can make a new planet your home planet by building a Capitol building."
    ],
    "writ_templates" : [
        { "title" : "Non-Agression Mandate", "description" : "Planets in this jurisdiction may not attack anyone inside the jurisdiction." },
        { "title" : "No Munitions", "description" : "Planets in this jurisdiction, except for members of ______ alliance are not allowed to build a Munitions Lab. If you are found with one the penalty shall be _______." },
        { "title" : "No Operatives", "description" : "Planets in this jurisdiction, except for members of ______ alliance are not allowed to build an Espionage Ministry. If you are found with one the penalty shall be _______." },
        { "title" : "Defense Mandate", "description" : "Planets in this jurisdiction are required to come to the aid of the other planets in this jurisdiction when under attack from both foreign and domestic enemies." },
        { "title" : "Confederacy with ______", "description" : "_______ alliance declares a mutual confederation with _______ alliance." },
        { "title" : "NAP with ______", "description" : "_______ alliance declares a non-aggression pact with _______ alliance." },
        { "title" : "Declaration of War", "description" : "_______ alliance declares war on ______ alliance. All citizens in this jurisdiction are required to supply the war effort with all available ships, operatives, and aid packages." },
        { "title" : "Censure of ______", "description" : "We, the members of _______ alliance, hereby declare a formal reprimand of _______ for __________________." },
        { "title" : "Glyph Heresy", "description" : "_______ alliance hereby denounces the existence of the Great Race. Anyone in our jurisdiction found using glyph technology shall be treated cruelly and without mercy." }
    ]
}


},{}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

 
if (typeof YAHOO.lacuna.About == "undefined" || !YAHOO.lacuna.About) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var About = function() {
        this.id = "about";
        this.createEvent("onShow");
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, "nofooter");
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Panel = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"450px",
            zIndex:9999
        });
        this.Panel.renderEvent.subscribe(function(){
            this.elCreditsList = Dom.get("aboutCredits");
            this.elVersion = Dom.get("aboutVersion");
            
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Panel.render();
        Game.OverlayManager.register(this.Panel);
    };
    About.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">About</div>',
            '    <div class="bd">',
            '        <div style="overflow:auto;height:400px">',
            '            The Lacuna Expanse',
            '            <ul>',
            '                <li>&copy; 2011 by Lacuna Expanse Corp.</li>',
            '                <li>Server Version: <span id="aboutVersion"></span></li>',
            '            </ul><br/>',
            '            Credits',
            '            <ul id="aboutCredits">',
            '            </ul>',
            '        </div>',
            '    </div>'
            ].join('');
        },
        show : function() {
            if(!this.hasCredits) {
                Game.Services.Stats.credits({},{
                    success : function(o){
                        YAHOO.log(o, "info", "Stats");
                        this.populateCredits(o.result);
                    },
                    scope:this
                });
            }
            this.elVersion.innerHTML = Game.ServerData.version;
            Game.OverlayManager.hideAll();
            this.Panel.show();
        },
        hide : function() {
            this.Panel.hide();
        },
        
        populateCredits : function(results) {
            if(!this.hasCredits) {
                var list = this.elCreditsList,
                    li = document.createElement("li");
                for(var i=0; i<results.length; i++) {
                    var obj = results[i];
                    for(var prop in obj) {
                        if(obj.hasOwnProperty(prop)){
                            var nLi = li.cloneNode(false),
                                html = ["<label>",prop,"</label><ul>"];
                            for(var x=0; x<obj[prop].length; x++) {
                                html.push("<li>");
                                html.push(obj[prop][x]);
                                html.push("</li>");
                            }
                            html.push("</ul>");
                            nLi.innerHTML = html.join('');
                            list.appendChild(nLi);
                        }
                    }
                }
                this.hasCredits = true;
                this.Panel.center();
            }
        }
        
    };
    Lang.augmentProto(About, Util.EventProvider);
            
    Lacuna.About = new About();
})();
YAHOO.register("about", YAHOO.lacuna.About, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/about.js","/")
},{"buffer":71,"oMfpAn":75}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Announce == "undefined" || !YAHOO.lacuna.Announce) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Announce = function() {
        this.id = "Announce";
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, "nofooter");
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Panel = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            fixedcenter:false,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:false,
            close:true,
            width:"350px",
            zIndex:19999,
            context:["header","tr","br", ["beforeShow", "windowResize"], [0,20]]
        });
        this.Panel.renderEvent.subscribe(function(){
            this.iFrame = Dom.get("announceFrame");
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Panel.render();
    };
    Announce.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">Announcements</div>',
            '    <div class="bd">',
            '        <iframe id="announceFrame" style="width:100%;height:200px;background-color:white;border:0;"></iframe>',
            '    </div>'
            ].join('');
        },
        show : function() {
            this.iFrame.src = "/announcement?session_id=" + Game.GetSession();

            this.Panel.show();
        },
        hide : function() {
            this.Panel.hide();
        }        
    };
    Lang.augmentProto(Announce, Util.EventProvider);
            
    Lacuna.Announce = new Announce();
})();
YAHOO.register("Announce", YAHOO.lacuna.Announce, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/announce.js","/")
},{"buffer":71,"oMfpAn":75}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Building == "undefined" || !YAHOO.lacuna.buildings.Building) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Building = function(oResults){
        this.createEvent("onMapRpc");
        this.createEvent("onQueueAdd");
        this.createEvent("onQueueReset");
        this.createEvent("onAddTab");
        this.createEvent("onRemoveTab");
        this.createEvent("onSelectTab");
        this.createEvent("onReloadTabs");
        this.createEvent("onUpdateTile");
        this.createEvent("onUpdateMap");
        this.createEvent("onRemoveTile");
        this.createEvent("onHide");
        //for internal use
        this.createEvent("onLoad");
        this.createEvent("onRepair");
        //common elements
        this.building = oResults.building;
        this.work = oResults.building.work;
        //delete status since it's rather large
        delete oResults.status;
        //so we can store just in case anyway
        this.result = oResults;
    };
    
    Building.prototype = {
        destroy : function() {
            this.unsubscribeAll();
        },
        load : function() {
            this.fireEvent("onLoad");
        },
        getTabs : function() {
            if(this.building.efficiency*1 < 100 && this.building.repair_costs) {
                return [this._getProductionTab(), this._getRepairTab()];
            }
            else {
                var tabs = [this._getProductionTab()],
                    childTabs = this.building.level > 0 ? this.getChildTabs() : null;
                    
                if(childTabs && Lang.isArray(childTabs)) {
                    tabs = tabs.concat(childTabs);
                }
                
                // incoming supply-chains tab
                if (this.building.url == "/planetarycommand" || this.building.url == "/stationcommand") {
                    tabs[tabs.length] = this._getIncomingSupplyChainsTab();
                }
                
                //create storage tab last
                if(this.building.upgrade.production && ((this.building.food_capacity*1 + this.building.ore_capacity*1 + this.building.water_capacity*1 + this.building.energy_capacity*1 + this.building.waste_capacity*1) > 0)) {
                    tabs[tabs.length] = this._getStorageTab();
                }
                
                return tabs;
            }
        },
        getChildTabs : function() {
            //overrideable function for child classes that have their own tabs
            //** Must return nothing or an array of tabs **
        },
        
        /*
        Event Helpers
        */
        rpcSuccess : function(o) {
            this.fireEvent("onMapRpc", o.result);
            if(o.result.building && this.building) {
                //if we suddenly have work update the tile to add the tile.  if we don't have work update the tile to remove the timer
                var workChanged = (
                    (this.building.work && !o.result.building.work) ||
                    (!this.building.work && o.result.building.work) ||
                    (this.building.work && o.result.building.work && this.building.work.end != o.result.building.work.end)
                );
                if(workChanged) {
                    this.building.work = o.result.building.work;
                    this.work = this.building.work;
                    this.updateBuildingTile(this.building);
                }
                /*if(o.result.building.id && o.result.building.name) {
                    delete this.building.work;
                    delete this.building.pending_build;
                    Lang.augmentObject(this.building, o.result.building, true);
                }
                else if(o.result.building.work) {
                    this.building.work = o.result.building.work;
                }
                this.work = this.building.work;
                if(workChanged) {
                    this.updateBuildingTile(this.building);
                }*/
            }
        },
        addQueue : function(sec, func, elm, sc) {
            this.fireEvent("onQueueAdd", {seconds:sec, fn:func, el:elm, scope:sc});
        },
        resetQueue : function() {
            this.fireEvent("onQueueReset");
        },
        addTab : function(tab) {
            this.fireEvent("onAddTab", tab);
        },
        removeTab : function(tab) {
            this.fireEvent("onRemoveTab", tab);
        },
        updateBuildingTile : function(building) {
            //always updated url when doing this since some returns don't have the url
            building.url = this.building.url;
            this.building = building;
            this.fireEvent("onUpdateTile", this.building);
        },
        removeBuildingTile : function(building) {
            this.fireEvent("onRemoveTile", building);
        },
        
        _getRepairTab : function() {
            this.repairTab = new YAHOO.widget.Tab({ label: "Repair", content: [
                    '<div id="repairContainer">',
                    '    <span id="repairText">Building is currently running at ',this.building.efficiency,'% efficiency.  Costs to repair the building are:</span>',
                    '    <ul>',
                    '        <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum">',this.building.repair_costs.food,'</span></li>',
                    '        <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum">',this.building.repair_costs.ore,'</span></li>',
                    '        <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum">',this.building.repair_costs.water,'</span></li>',
                    '        <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum">',this.building.repair_costs.energy,'</span></li>',
                    '    </ul>',
                    '    <button id="repairBuilding" type="button">Repair</button>',
                    '</div>'
                ].join('')});

            Event.on("repairBuilding", "click", this.Repair, this, true);
                    
            return this.repairTab;
        },
        Repair : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            Game.Services.Buildings.Generic.repair({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "Building.Repair.repair.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    if(this.repairTab) {
                        Event.removeListener("repair", "click");
                        this.removeTab(this.repairTab);
                        o.result.building.url = this.building.url;
                        this.building = o.result.building;
                        this.work = o.result.building.work;
                        this.result = o.result;
                        this.updateBuildingTile(o.result.building);
                        this.fireEvent("onReloadTabs");
                    }
                    if(!this.productionTab) {
                        this.addTab(this._getProductionTab());
                    }
                    this.fireEvent("onRepair");
                },
                failure : function(o){
                    btn.disabled = false;
                },
                target:this.building.url,
                scope:this
            });
        },
        
        _getProductionTab : function() {
            var up = this.building.upgrade,
                down = this.building.downgrade,
                currentLevel = this.building.level*1,
                planet = Game.GetCurrentPlanet();
            this.productionTab = new YAHOO.widget.Tab({ label: "Production", content: [
                '<div id="detailsProduction"><p id="extraBuildingDetails"></p>',
                '    <div id="buildingDetailsProduction" class="yui-gb">',
                '        <div class="yui-u first">',
                '            <ul>',
                '                <li>Current Production</li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span id="buildingDetailsFood" class="buildingDetailsNum">',this.building.food_hour,'/hr</span></li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span id="buildingDetailsOre" class="buildingDetailsNum">',this.building.ore_hour,'/hr</span></li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span id="buildingDetailsWater" class="buildingDetailsNum">',this.building.water_hour,'/hr</span></li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span id="buildingDetailsEnergy" class="buildingDetailsNum">',this.building.energy_hour,'/hr</span></li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span id="buildingDetailsWaste" class="buildingDetailsNum">',this.building.waste_hour,'/hr</span></li>',
                '                <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/happiness.png" title="Happiness" class="smallHappy" /></span><span id="buildingDetailsHappiness" class="buildingDetailsNum">',this.building.happiness_hour,'/hr</span></li>',
                '                <li><button id="buildingDetailsDemolish" type="button">Demolish</button></li>',
                '            </ul>',
                '        </div>',
                '        <div class="yui-u">',
                '            <ul id="buildingDetailsUpgradeProduction">',
                up ? [
                    '<li>Upgrade Production</li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum',this.building.food_hour - up.production.food_hour > planet.food_hour ? ' low-resource' : '','">',up.production.food_hour,'/hr</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum',this.building.ore_hour - up.production.ore_hour > planet.ore_hour ? ' low-resource' : '','">',up.production.ore_hour,'/hr</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum',this.building.water_hour - up.production.water_hour > planet.water_hour ? ' low-resource' : '','">',up.production.water_hour,'/hr</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum',this.building.energy_hour - up.production.energy_hour > planet.energy_hour ? ' low-resource' : '','">',up.production.energy_hour,'/hr</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span class="buildingDetailsNum">',up.production.waste_hour,'/hr</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/happiness.png" title="Happiness" class="smallHappy" /></span><span class="buildingDetailsNum">',up.production.happiness_hour,'/hr</span></li>',
                    up.can ? '<li><button id="buildingDetailsUpgrade" type="button">Upgrade to Level ' + (1 + (this.building.level*1)) + '</button></li>' : '<li class="alert">Unable to Upgrade:</li><li class="alert">',up.reason[1],'</li>'
                    ].join('') : '',
                '            </ul>',
                '        </div>',
                '        <div class="yui-u">',
                '            <ul id="buildingDetailsUpgradeCost">',
                up ? [
                    '    <li>Upgrade Cost</li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum',up.cost.food > planet.food_stored ? ' low-resource' : '','">',up.cost.food,'</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum',up.cost.ore > planet.ore_stored ? ' low-resource' : '','">',up.cost.ore,'</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum',up.cost.water > planet.water_stored ? ' low-resource' : '','">',up.cost.water,'</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum',up.cost.energy > planet.energy_stored ? ' low-resource' : '','">',up.cost.energy,'</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span class="buildingDetailsNum">',up.cost.waste,'</span></li>',
                    '    <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/time.png" title="Time" class="smallTime" /></span><span class="buildingDetailsNum">',Lib.formatTime(up.cost.time),'</span></li>'
                    ].join('') : '',
                currentLevel <= 1 ? '' : down.can ? '<li><button id="buildingDetailsDowngrade" type="button">Downgrade to Level ' + (currentLevel - 1) + '</button></li>' : '<li class="alert">Unable to Downgrade:</li><li class="alert">' + String(down.reason).replace(/^\d+,\s*/, '') + '</li>',
                '            </ul>',
                '        </div>',
                '    </div>',
                '</div>'
                ].join('')});
			
			Event.onAvailable('extraBuildingDetails', function(o) {
				if (o.building.upgrade.cost.halls) {
					Dom.get('extraBuildingDetails').innerHTML = 'Can upgrade to level ' + (parseInt(o.building.level) + 1) + ' by sacrificing ' + (parseInt(o.building.level) + 1) + ' Halls of Vrbansk.';
				}
			}, this);
            
            Event.on("buildingDetailsDemolish", "click", this.Demolish, this, true);
            if(up.can) {
                Event.on("buildingDetailsUpgrade", "click", this.Upgrade, this, true);
            }
            if(currentLevel > 1) {
                Event.on("buildingDetailsDowngrade", "click", this.Downgrade, this, true);
            }
            
            return this.productionTab;

        },
        Demolish : function() {
            var building = this.building;
            if(confirm(['Are you sure you want to Demolish the level ',building.level,' ',building.name,'?'].join(''))) {
                Lacuna.Pulser.Show();
                Game.Services.Buildings.Generic.demolish({
                    session_id:Game.GetSession(),
                    building_id:building.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Building.Demolish.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.removeBuildingTile(building);
                        this.fireEvent("onHide");                    
                    },
                    scope:this,
                    target:building.url
                });
            }
        },
        Downgrade : function() {
            var building = this.building;
            if(confirm(['Are you sure you want to downgrade the level ',building.level,' ',building.name,'?'].join(''))) {
                Lacuna.Pulser.Show();
                Game.Services.Buildings.Generic.downgrade({
                    session_id:Game.GetSession(),
                    building_id:building.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Building.Downgrade.success");
                        Lacuna.Pulser.Hide();
                        this.fireEvent("onMapRpc", o.result);
                        
                        var b = building; //originally passed in building data from currentBuilding
                        b.id = o.result.building.id;
                        b.level = o.result.building.level;
                        b.pending_build = o.result.building.pending_build;
                        YAHOO.log(b, "info", "Building.Upgrade.success.building");
                        
                        this.updateBuildingTile(b);
                    
                        this.fireEvent("onHide");                    
                    },
                    scope:this,
                    target:building.url
                });
            }
        },
        Upgrade : function() {
            var building = this.building,
				userUpgrade = false;
			
			if (building.upgrade.cost.halls) {
				userUpgrade = confirm('Are you sure you want to sacrifice ' + building.upgrade.cost.halls + ' Halls of Vrbansk?');
			}
			else {
				userUpgrade = true;
			}
			
			
			if (userUpgrade) {
				Lacuna.Pulser.Show();
				var BuildingServ = Game.Services.Buildings.Generic,
					data = {
						session_id: Game.GetSession(""),
						building_id: building.id
					};
            
				BuildingServ.upgrade(data,{
					success : function(o){
						YAHOO.log(o, "info", "Building.Upgrade.success");
						Lacuna.Pulser.Hide();
						this.fireEvent("onMapRpc", o.result);
                    
						var b = building; //originally passed in building data from currentBuilding
						b.id = o.result.building.id;
						b.level = o.result.building.level;
						b.pending_build = o.result.building.pending_build;
						YAHOO.log(b, "info", "Building.Upgrade.success.building");
                    
						this.updateBuildingTile(b);
                    
						this.fireEvent("onHide");
					},
					scope:this,
					target:building.url
				});
			}
        },
        
        _getIncomingSupplyChainsTab : function() {            
            this.incomingSupplyChainTab = new YAHOO.widget.Tab({ label: "Supply Chains", content: [
                '<div id="incomingSupplyChainInfo" style="margin-bottom: 2px">',
                '   <div id="incomingSupplyChainList">',
                '      <b>Incoming Supply Chains</b><hr/>',
                '      <ul id="incomingSupplyChainListHeader" class="incomingSupplyChainHeader incomingSupplyChainInfo clearafter">',
                '        <li class="incomingSupplyChainBody">From Body</li>',
                '        <li class="incomingSupplyChainResource">Resource</li>',
                '        <li class="incomingSupplyChainHour">/hr</li>',
                '        <li class="incomingSupplyChainEfficiency">Efficiency</li>',
                '      </ul>',
                '      <div><div id="incomingSupplyChainListDetails"></div></div>',
                '   </div>',
                '   <div id="incomingSupplyChainListNone"><b>No Incoming Supply Chains</b></div>',
                '</div>',
            ].join('')});
            
            this.incomingSupplyChainTab.subscribe("activeChange", this.viewIncomingSupplyChainInfo, this, true);

            return this.incomingSupplyChainTab;
        },
        viewIncomingSupplyChainInfo : function(e) {
            Dom.setStyle("incomingSupplyChainList", "display", "none");
            Dom.setStyle("incomingSupplyChainListNone", "display", "none");
            
            if ( !this.incoming_supply_chains ) {
                Lacuna.Pulser.Show();
                this.service.view_incoming_supply_chains({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "building.viewIncomingSupplyChainInfo.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.incoming_supply_chains = o.result.supply_chains;
                        
                        this.incomingSupplyChainList();
                    },
                    scope:this
                });
            }
            else {
                this.incomingSupplyChainList();
            }
        },
        incomingSupplyChainList : function() {
          var supply_chains = this.incoming_supply_chains;
          
          if ( supply_chains.length == 0 ) {
            Dom.setStyle("incomingSupplyChainList", "display", "none");
            Dom.setStyle("incomingSupplyChainListNone", "display", "");
            return;
          }
          else {
            Dom.setStyle("incomingSupplyChainList", "display", "");
            Dom.setStyle("incomingSupplyChainListNone", "display", "none");
          }
          
          var details = Dom.get("incomingSupplyChainListDetails"),
              detailsParent = details.parentNode,
              ul = document.createElement("ul"),
              li = document.createElement("li");
          
          // chains list
          Event.purgeElement(details, true); //clear any events before we remove
          details = detailsParent.removeChild(details); //remove from DOM to make this faster
          details.innerHTML = "";
          
          //Dom.setStyle(detailsParent, "display", "");
          detailsParent.appendChild(details); //add back as child
          
          for (var i=0; i<supply_chains.length; i++) {
            var chain = supply_chains[i],
                nUl = ul.cloneNode(false);
            
            Dom.addClass(nUl, "incomingSupplyChainInfo");
            Dom.addClass(nUl, "clearafter");
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "incomingSupplyChainBody");
            if (chain.stalled == 1) {
                Dom.addClass( nUl, "incomingSupplyChainStalled")
                nLi.innerHTML = chain.from_body.name + " (Stalled)";
            }
            else {
                nLi.innerHTML = chain.from_body.name;
            }
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "incomingSupplyChainResource");
            nLi.innerHTML = chain.resource_type.titleCaps();
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "incomingSupplyChainHour");
            nLi.innerHTML = chain.resource_hour;
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"incomingSupplyChainEfficiency");
            nLi.innerHTML = chain.percent_transferred;
            nUl.appendChild(nLi);
            
            details.appendChild(nUl);
          }
          
          //wait for tab to display first
          setTimeout(function() {
            var Ht = Game.GetSize().h - 250;
            if(Ht > 250) { Ht = 250; }
            Dom.setStyle(detailsParent,"height",Ht + "px");
            Dom.setStyle(detailsParent,"overflow-y","auto");
          },10);
        },
        _getStorageTab : function() {            
            var p = this.building.upgrade.production,
                output = [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li>Current Building Storage</li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum">',this.building.food_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum">',this.building.ore_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum">',this.building.water_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum">',this.building.energy_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span class="buildingDetailsNum">',this.building.waste_capacity,'</span></li>',
                '        </ul>',
                '    </div>',
                '    <div class="yui-u">',
                '        <ul id="buildingDetailsUpgradeStorage">',
                '            <li>Upgrade to Building Storage</li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum">',p.food_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum">',p.ore_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum">',p.water_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum">',p.energy_capacity,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span class="buildingDetailsNum">',p.waste_capacity,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'];
            return new YAHOO.widget.Tab({ label: "Storage", content: output.join('')});
        }
    };
    Lang.augmentProto(Building, Util.EventProvider);
    
    YAHOO.lacuna.buildings.Building = Building;

})();
YAHOO.register("building", YAHOO.lacuna.buildings.Building, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building.js","/")
},{"buffer":71,"oMfpAn":75}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Archaeology == "undefined" || !YAHOO.lacuna.buildings.Archaeology) {

(function(){
  var Lang = YAHOO.lang,
    Util = YAHOO.util,
    DDM = Util.DragDropMgr,
    Dom = Util.Dom,
    Event = Util.Event,
    Sel = Util.Selector,
    Lacuna = YAHOO.lacuna,
    Game = Lacuna.Game,
    Lib = Lacuna.Library;
    
  var DDList = function(id, sGroup, config) {
    DDList.superclass.constructor.call(this, id, sGroup, config);

    var el = this.getDragEl();
    Dom.setStyle(el, "opacity", 0.67); // The proxy is slightly transparent

    this.goingUp = false;
    this.lastY = 0;
  };
  YAHOO.extend(DDList, YAHOO.util.DDProxy, {
    startDrag: function(x, y) {
      // make the proxy look like the source element
      var dragEl = this.getDragEl();
      var clickEl = this.getEl();

      // only hide original when moving with the 'combine' list
      var fromCombineList = Dom.getAncestorBy(clickEl, function(el){return el.id=="archaeologyGlyphCombine"});
      if (fromCombineList) {
        Dom.setStyle(clickEl, "visibility", "hidden");
      }

      dragEl.innerHTML = clickEl.innerHTML;

      Dom.setStyle(dragEl, "color", Dom.getStyle(clickEl, "color"));
      Dom.setStyle(dragEl, "backgroundColor", Dom.getStyle(clickEl, "backgroundColor"));
      Dom.setStyle(dragEl, "border", "2px solid gray");
      Dom.setStyle(dragEl, "zIndex", Dom.getStyle("buildingDetails_c", "zIndex")*1+1);

      if (!fromCombineList) {
        this._removeGlyphCount(dragEl);
      }
    },
    endDrag: function(e) {
      var srcEl = this.getEl();
      var proxy = this.getDragEl();

      // Show the proxy element and animate it to the src element's location
      Dom.setStyle(proxy, "visibility", "");
      var a = new YAHOO.util.Motion( 
        proxy, { 
          points: { 
            to: Dom.getXY(srcEl)
          }
        }, 
        0.2, 
        YAHOO.util.Easing.easeOut 
      );
      var proxyid = proxy.id;
      var thisid = this.id;

      // Hide the proxy and show the source element when finished with the animation
      a.onComplete.subscribe(function() {
          Dom.setStyle(proxyid, "visibility", "hidden");
          Dom.setStyle(thisid, "visibility", "");
        });
      a.animate();
    },
    onDragDrop: function(e, id) {
      if (id == "archaeologyGlyphDetails") {

        // The position of the cursor at the time of the drop (YAHOO.util.Point)
        var pt = DDM.interactionInfo.point; 

        // The region occupied by the source element at the time of the drop
        var region = DDM.interactionInfo.sourceRegion; 

        // Check to see if we are over the source element's location.  We will
        // append to the bottom of the list once we are sure it was a drop in
        // the negative space (the area of the list without any list items)
        if (!region.intersect(pt)) {
          var El = this.getEl();

          var fromCombineList = Dom.getAncestorBy(El, function(el){return el.id=="archaeologyGlyphCombine"});
          if (fromCombineList) {
            // moving from 'combine' list to 'details' list
            // just remove it from the 'combine' list - don't copy it over
            El.parentNode.removeChild(El);
            DDM.refreshCache();
          }
        }

      }
      else if (id == "archaeologyGlyphCombine") {

        // The position of the cursor at the time of the drop (YAHOO.util.Point)
        var pt = DDM.interactionInfo.point; 

        // The region occupied by the source element at the time of the drop
        var region = DDM.interactionInfo.sourceRegion; 

        // Check to see if we are over the source element's location.  We will
        // append to the bottom of the list once we are sure it was a drop in
        // the negative space (the area of the list without any list items)
        if (!region.intersect(pt)) {
          var destEl = Dom.get(id);
          var destDD = DDM.getDDById(id);
          var El = this.getEl();
          
          var fromAvailableList = Dom.getAncestorBy(El, function(el){return el.id=="archaeologyGlyphDetails"});
          if (fromAvailableList) {
            // moving from 'details' list to 'combine' list
            // clone it - don't just move it
            var clone = El.cloneNode(true);
            this._removeGlyphCount(clone);
            clone.id = Dom.generateId();
            clone.Glyph = El.Glyph;
            destEl.appendChild(clone);
            clone.DD = new DDList(clone);

            destDD.isEmpty = false;
            DDM.refreshCache();
          }
        }

      }
    },
    onDrag: function(e) {
      // Keep track of the direction of the drag for use during onDragOver
      var y = Event.getPageY(e),
        el = this.getEl(),
        container = el.parentNode;

      if (y < this.lastY) {
        this.goingUp = true;
        if(container.scrollTop > el.offsetTop) {
          container.scrollTop -= el.clientHeight;
        }
      } else if (y > this.lastY) {
        this.goingUp = false;
        if((el.offsetTop - container.scrollTop) > el.clientHeight) {
          container.scrollTop = el.offsetTop;
        }
      }
      

      this.lastY = y;
    },
    onDragOver: function(e, id) {
      var srcEl = this.getEl();
      var destEl = Dom.get(id);

      // only allow reordering when rearranging the 'combine' list
      // moves from 'details' to 'combine' always just get added to the end of the 'combine' list
      var fromDetailsList = Dom.getAncestorBy(srcEl, function(el){return el.id=="archaeologyGlyphDetails"});
      var toCombineList = Dom.getAncestorBy(destEl, function(el){return el.id=="archaeologyGlyphCombine"});
      if (fromDetailsList || !toCombineList) {
        return;
      }

      // We are only concerned with list items, we ignore the dragover
      // notifications for the list.
      if (destEl.nodeName.toLowerCase() == "li") {
        var orig_p = srcEl.parentNode;
        var p = destEl.parentNode;

        if (this.goingUp) {
          p.insertBefore(srcEl, destEl); // insert above
        } else {
          p.insertBefore(srcEl, destEl.nextSibling); // insert below
        }

        DDM.refreshCache();
      }
    },
    _removeGlyphCount: function(element) {
      // remove glyph count from header text
      var container = Dom.getFirstChildBy(element, function(el){return Dom.hasClass(el,"archaeologyGlyphContainer")});
      var header = Dom.getFirstChildBy(container, function(el){return Dom.hasClass(el,"archaeologyGlyphHeader")});
      var text = header.innerHTML;
      header.innerHTML = text.replace(/ \([0-9]+\)/, "");
    }
  });

  var Archaeology = function(result){
    Archaeology.superclass.constructor.call(this, result);
    
    this.service = Game.Services.Buildings.Archaeology;
  };
  
  Lang.extend(Archaeology, Lacuna.buildings.Building, {
    getChildTabs : function() {
      return [this._getSearchTab(), this._getViewTab(), this._getExcavatorTab() ];
    },
    _getSearchTab : function() {
      var tab = new YAHOO.widget.Tab({ label: "Search", content: [
        '<div id="archaeologySearchContainer">',
        '  <ul id="archaeologySearchForm">',
        '    <li>Search Ore:<select id="archaeologyOre"></select></li>',
        '    <li><button type="button" id="archaeologySearch">Search</button></li>',
        '  </ul>',
        '  <ul id="archaeologySearchNone" style="display: none">',
        '    <li>Not enough ore available to search.</li>',
        '  </ul>',
        '</div>',
        '<div id="archaeologyWorkingContainer">',
        '  <ul>',
        '    <li>Searching: <span id="archaeologySearchOre"></span></li>',
        '    <li>Time left on current search: <span id="archaeologySearchTime"></span></li>',
        '    <li>You may subsidize the search for 2 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />.</li>',
        '    <li><button type="button" id="archaeologySearchSubsidize">Subsidize</button></li>',
        '  </ul>',
        '</div>'
      ].join('')});
      tab.subscribe("activeChange", function(e) {
        if(e.newValue) {
          this.checkIfWorking();
        }
      }, this, true);
      
      this.searchTab = tab;
      Event.on("archaeologySearch", "click", this.searchForGlyph, this, true);
      Event.on("archaeologySearchSubsidize", "click", this.Subsidize, this, true);
      
      return tab;
    },
    _getViewTab : function() {
      var tab = new YAHOO.widget.Tab({ label: "View Glyphs", content: [
        '<div class="clearafter">',
        '  <div class="archaeologySlots">',
        '    <label>Available Glyphs</label>',
        '    <ul id="archaeologyGlyphDetails" class="archaeologyGlyphInfo">',
        '    </ul>',
        '  </div>',
        '  <div class="archaeologySlots">',
        '    <label>Combine Glyphs</label>',
        '    <ul id="archaeologyGlyphCombine" class="archaeologyGlyphInfo">',
        '    </ul>',
        '  </div>',
        '</div><span title="How many times should the specified glyphs be combined (max 50)"> Quantity: <input type="text" id="combineQuantity" value="1" size="2"></span> <button type="button" id="archaeologyCombine">Combine</button>'
      ].join('')});
      tab.subscribe("activeChange", function(e) {
        if(e.newValue) {
          this.getGlyphs();
        }
        var Ht = Game.GetSize().h - 180;
        if(Ht > 442) { Ht = 442; }
        var tC = Dom.get('archaeologyGlyphDetails').parentNode.parentNode;
        Dom.setStyle(tC, 'height', Ht + 'px');
        Dom.setStyle(tC, 'overflow-y', 'auto');
      }, this, true);
      
      Event.onAvailable("archaeologyCombine", function(e){
        Event.on("archaeologyCombine", "click", this.assembleGlyph, this, true);
      }, this, true);
      
      Event.delegate("archaeologyGlyphDetails", "dblclick", this.viewAdd, "li");
      Event.delegate("archaeologyGlyphCombine", "dblclick", this.viewRemove, "li");
      
      this.viewTab = tab;
      return tab;
    },
    _getExcavatorTab : function() {
      this.excavatorTab = new YAHOO.widget.Tab({ label: "Excavators", content: [
        '<div id="excavatorInfo"></div>',
        '<div class="excavatorContainer">',
        '  <div id="excavatorDetails">',
        '  </div>',
        '</div>'
      ].join('')});
      this.excavatorTab.subscribe("activeChange", this.viewExcavators, this, true);
          
      return this.excavatorTab;
    },
    viewExcavators : function(e) {
      if(e.newValue) {
        if(!this.excavators) {
          Lacuna.Pulser.Show();
          this.service.view_excavators({session_id:Game.GetSession(),building_id:this.building.id}, {
            success : function(o){
              YAHOO.log(o, "info", "Archaeology.view_excavators.success");
              Lacuna.Pulser.Hide();
              this.rpcSuccess(o);
              this.excavators = { 
                max_excavators:o.result.max_excavators,
                travel_e:o.result.travelling,
                excavators:o.result.excavators
              };
              
              this.ArchaeologyExcavators();
            },
            scope:this
          });
        }
        else {
          this.ArchaeologyExcavators();
        }
      }
    },
    ArchaeologyExcavators : function() {
      var excavators = this.excavators.excavators,
                       details = Dom.get("excavatorDetails");
        
      if(details) {
        var ul = document.createElement("ul"),
          li = document.createElement("li"),
          info = Dom.get("excavatorInfo");
          
        if(excavators.length > 0) {
          info.innerHTML = ['Total of ', excavators.length - 1,
                            ' excavators deployed. ',
                            this.excavators.travel_e, ' en route. This ministry can control a maximum of ',
                            this.excavators.max_excavators, 
                            ' excavators.'
          ].join('');
        }
          
        Event.purgeElement(details);
        details.innerHTML = "";
        
        if (excavators.length > 0) {
          for(var i=0; i<excavators.length; i++) {
            var obj = excavators[i],
                nUl = ul.cloneNode(false),
                nLi = li.cloneNode(false);
              
            nUl.Excavator = obj;
            Dom.addClass(nUl, "excavatorInfo");
            Dom.addClass(nUl, "clearafter");

            Dom.addClass(nLi,"excavatorLocation");
            nLi.innerHTML = ['<img src="',Lib.AssetUrl,'star_system/',obj.body.image,'.png" />', obj.body.name].join('');
            Event.on(nLi, "click", this.excavatorClick, obj, true);
            nUl.appendChild(nLi);
            
            if (obj.id > 0) {
              nLi = li.cloneNode(false);
              Dom.addClass(nLi,"excavatorAbandon");
              var bbtn = document.createElement("button");
              bbtn.setAttribute("type", "button");
              bbtn.innerHTML = "Abandon";
              bbtn = nLi.appendChild(bbtn);
              nUl.appendChild(nLi);
            }
            
            nLi = li.cloneNode(false);
            var ptype = obj.body.image.slice(0,obj.body.image.indexOf('-'));
            Dom.addClass(nLi,"excavatorChances");
            var outChance = ['<ul><li><label>Body Type: </label>',ptype,' <label>Chances:</label></li>'];
            var total = 0;
            var ctypes = ["artifact", "glyph", "plan", "resource" ];
            for (var chance_i in ctypes) {
              var chance = ctypes[chance_i];
              if(obj[chance] > 0) {
                outChance.push('<li><label>' + chance.replace(/^\w/,
                               function(c){ return c.toUpperCase() }) +
                               ':</label> ');
                outChance.push(obj[chance]);
                outChance.push('</li>');
                total += parseInt(obj[chance]);
              }
            }
            if(total > 0) {
              outChance.splice(3, 0, '<li><label>Total:</label> ');
              outChance.splice(4, 0, parseInt(total));
              outChance.splice(5, 0, '</li>');
            }
            outChance.push('</ul>');
            nLi.innerHTML = outChance.join('');
            nUl.appendChild(nLi);

            details.appendChild(nUl);
            
            Event.on(bbtn, "click", this.ExcavatorAbandon, {Self:this,Excavator:obj,Line:nUl}, true);
          }
        }
        
        //wait for tab to display first
        setTimeout(function() {
          var Ht = Game.GetSize().h - 210;
          if(Ht > 280) { Ht = 280; }
          Dom.setStyle(details.parentNode,"height",Ht + "px");
          Dom.setStyle(details.parentNode,"overflow-y","auto");
        },10);
      }
    },
    ExcavatorAbandon : function() {
      if(confirm(["Are you sure you want to Abandon the excavator ",this.Excavator.id," at  ",this.Excavator.body.name,"?"].join(''))) {
        Lacuna.Pulser.Show();
        
        this.Self.service.abandon_excavator({
          session_id:Game.GetSession(),
          building_id:this.Self.building.id,
          excavator_id:this.Excavator.id
        }, {
          success : function(o){
            YAHOO.log(o, "info", "Archaeology.ExcavatorAbandon.success");
            Lacuna.Pulser.Hide();
            this.Self.rpcSuccess(o);
            var excavators = this.Self.excavators.excavators;
            for(var i=0; i<excavators.length; i++) {
              if(excavators[i].id == this.Excavator.id) {
                excavators.splice(i,1);
                break;
              }
            }
            this.Line.parentNode.removeChild(this.Line);
          },
          scope:this
        });
      }
    },
//wee
    populateSearch : function() {
      var sel = Dom.get("archaeologyOre");
      if(sel && this.ore){
        sel.options.length = 0;
        var opt = document.createElement("option"),
          ore = [], oKey;
        for(oKey in this.ore) {
          ore.push(oKey);
        }
        ore.sort();
        for(var i=0; i<ore.length; i++) {
          oKey = ore[i];
          if(this.ore.hasOwnProperty(oKey)) {
            var nOpt = opt.cloneNode(false);
            nOpt.value = oKey;
            nOpt.innerHTML = [oKey, ' (', this.ore[oKey], ')'].join('');
            sel.appendChild(nOpt);
          }
        }
        if (sel.options.length > 0) {
          Dom.setStyle("archaeologySearchForm", "display", "");
          Dom.setStyle("archaeologySearchNone", "display", "none");
        }
        else {
          Dom.setStyle("archaeologySearchForm", "display", "none");
          Dom.setStyle("archaeologySearchNone", "display", "");
        }
      }
    },
    populateActiveSearch : function(seconds_remaining) {
      this.addQueue(seconds_remaining, this.searchQueue, "archaeologySearchTime");
    },
    searchQueue : function(remaining, el){
      if(remaining <= 0) {
        var span = Dom.get(el),
          p = span.parentNode;
        p.removeChild(span);
        p.innerHTML = "Search Complete";
      }
      else {
        Dom.get(el).innerHTML = Lib.formatTime(Math.round(remaining));
      }
    },
    
    populateView : function() {
      var glyphs = this.glyphs,
        details = Dom.get("archaeologyGlyphDetails");
        
      if(details) {
        if(!this.glyphList) {
          this.glyphList = new Util.DDTarget("archaeologyGlyphDetails");
          this.glyphList.isGlyphContainer = true;
        }
        else {
          var gl = Sel.query("li", "archaeologyGlyphDetails");
          for(var gli=0, glLen=gl.length; gli<glLen; gli++) {
            var glio = gl[gli];
            glio.DD.unreg();
            glio.parentNode.removeChild(glio);
            glio = null;
          }
        }
        if(!this.glyphCombine) {
          this.glyphCombine = new Util.DDTarget("archaeologyGlyphCombine");
          this.glyphCombine.isGlyphContainer = true;
        }
        else {
          var gc = Sel.query("li", "archaeologyGlyphCombine");
          for(var gci=0, gcLen=gc.length; gci<gcLen; gci++) {
            var gcio = gc[gci];
            gcio.DD.unreg();
            gcio.parentNode.removeChild(gcio);
            gcio = null;
          }
        }
        
        var li = document.createElement("li");
    
        //glyphs.slice(0);
        glyphs.sort(function(a,b) {
          if(a.type > b.type) {
            return 1;
          }
          else if(a.type < b.type) {
            return -1;
          }
          else {
            return 0;
          }
        });

        for(var i=0; i<glyphs.length; i++) {
          var obj = glyphs[i],
            nLi = li.cloneNode(false);
            
          nLi.Glyph = obj;
          Dom.addClass(nLi,"archaeologyGlyph");
          
          nLi.innerHTML = [
            '<div class="archaeologyGlyphContainer">',
            '  <div class="archaeologyGlyphHeader">',obj.type,' (',obj.quantity,')</div>',
            '  <img src="',Lib.AssetUrl,'glyphs/',obj.type,'.png" alt="',obj.type,'" title="',obj.type,'" style="width:79px;height:100px;" />', //"width:119px;height:150px;"
            '</div>'
          ].join('');
          
          nLi = details.appendChild(nLi);
          nLi.DD = new DDList(nLi);
        }
      }
    },
    viewAdd : function(e, matchedEl, container) { 
      matchedEl.parentNode.removeChild(matchedEl);
      Dom.get("archaeologyGlyphCombine").appendChild(matchedEl);
    },
    viewRemove : function(e, matchedEl, container) { 
      matchedEl.parentNode.removeChild(matchedEl);
      Dom.get("archaeologyGlyphDetails").appendChild(matchedEl);
    },
    
    checkIfWorking : function() {
      if(this.work && this.work.seconds_remaining) {
        Dom.setStyle("archaeologySearchContainer", "display", "none");
        Dom.setStyle("archaeologyWorkingContainer", "display", "");
        Dom.get("archaeologySearchOre").innerHTML = this.work.searching;
        this.populateActiveSearch(this.work.seconds_remaining);
      }
      else {
        Dom.setStyle("archaeologySearchContainer", "display", "");
        Dom.setStyle("archaeologyWorkingContainer", "display", "none");
        this.getOres();
      }
    },
    
    getOres : function() {
      if(!this.ore) {
        Lacuna.Pulser.Show();
        this.service.get_ores_available_for_processing({session_id:Game.GetSession(),building_id:this.building.id}, {
          success : function(o){
            YAHOO.log(o, "info", "Archaeology.getOres.success");
            Lacuna.Pulser.Hide();
            this.rpcSuccess(o);
            this.ore = o.result.ore;
            
            this.populateSearch();
          },
          scope:this
        });
      }
    },
    getGlyphs : function() {
      if(!this.glyphs) {
        Lacuna.Pulser.Show();
        this.service.get_glyphs({session_id:Game.GetSession(),building_id:this.building.id}, {
          success : function(o){
            YAHOO.log(o, "info", "Archaeology.getGlyphs.success");
            Lacuna.Pulser.Hide();
            this.rpcSuccess(o);
            this.glyphs = o.result.glyphs;
            
            this.populateView();
          },
          scope:this
        });
      }
    },
    assembleGlyph : function() {
      Lacuna.Pulser.Show();
      var glyphs = Sel.query("li", "archaeologyGlyphCombine"),
        glyphTypes = [],
        quantity = parseInt(Dom.get("combineQuantity").value,10);
      for(var g=0, len=glyphs.length; g<len; g++) {
        glyphTypes.push(glyphs[g].Glyph.type);
      }
      
      this.service.assemble_glyphs({session_id:Game.GetSession(),building_id:this.building.id, glyphs:glyphTypes, quantity:quantity}, {
        success : function(o){
          YAHOO.log(o, "info", "Archaeology.assembleGlyph.success");
          var article = (quantity==1) ? "a" : quantity;
          var suffix = (quantity==1) ? "plan" : "plans";
          alert("You have found " + article + " " + o.result.item_name + " " + suffix + "!");
          Lacuna.Pulser.Hide();
          this.rpcSuccess(o);
          delete this.glyphs;
          this.getGlyphs();
        },
        scope:this
      });
    },
    searchForGlyph : function() {
      Lacuna.Pulser.Show();
      var sel = Dom.get("archaeologyOre"),
        opts = sel.options,
        selInd = sel.selectedIndex,
        type = opts.length > 0 && selInd >= 0 && opts[selInd].value;
        
      if(type) {
        this.service.search_for_glyph({session_id:Game.GetSession(),building_id:this.building.id,ore_type:type}, {
          success : function(o){
            YAHOO.log(o, "info", "Archaeology.searchForGlyph.success");
            Lacuna.Pulser.Hide();
            this.rpcSuccess(o);
            //this.work = o.result.building.work;
            //this.updateBuildingTile(o.result.building);
            this.checkIfWorking();
          },
          scope:this
        });
      }
    },
    Subsidize : function() {
      Lacuna.Pulser.Show();
      
      this.service.subsidize_search({
        session_id:Game.GetSession(),
        building_id:this.building.id
      }, {
        success : function(o){
          Lacuna.Pulser.Hide();
          this.rpcSuccess(o);

          delete this.work;
          delete this.ore;
          this.updateBuildingTile(o.result.building);
          this.resetQueue();
          Dom.get("archaeologySearchTime").innerHTML = "";
          this.checkIfWorking();
        },
        scope:this
      });
    }
  });
  
  Lacuna.buildings.Archaeology = Archaeology;

})();
YAHOO.register("archaeology", YAHOO.lacuna.buildings.Archaeology, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/archaeology.js","/building")
},{"buffer":71,"oMfpAn":75}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.BlackHoleGenerator == "undefined" ||
           !YAHOO.lacuna.buildings.BlackHoleGenerator) {

(function(){
  var Lang = YAHOO.lang,
    Util = YAHOO.util,
    Dom = Util.Dom,
    Event = Util.Event,
    Sel = Util.Selector,
    Pager = YAHOO.widget.Paginator,
    Lacuna = YAHOO.lacuna,
    Game = Lacuna.Game,
    Lib = Lacuna.Library;

  var BlackHoleGenerator = function(result){
    BlackHoleGenerator.superclass.constructor.call(this, result);

    this.service = Game.Services.Buildings.BlackHoleGenerator;
  };

  Lang.extend(BlackHoleGenerator, Lacuna.buildings.Building, {
    getChildTabs : function() {
      return [this._getBHGTab()];
    },
    _getBHGTab : function() {
      var zoneOptions = "";
      var zones = this.result.task_options.zones;
      for (var i=0; i<zones.length; i++) {
        zoneOptions += '<option value="' + zones[i] + '">' + zones[i] + '</option>';
      }

      this.tab = new YAHOO.widget.Tab({ label: "Singularity", content: [
        '<div id="bhgContainer">',
        '  Target <select id="bhgTargetType">',
        '    <option value="body_name">Body Name</option>',
        '    <option value="body_id">Body Id</option>',
        '    <option value="star_name">Star Name</option>',
        '    <option value="star_id">Star Id</option>',
        '    <option value="xy">X,Y</option>',
        '    <option value="zone">Zone (X|Y)</option>',
        '  </select>',
        '  <span id="bhgTargetSelectText"><input type="text" id="bhgTargetText" /></span>',
        '  <span id="bhgTargetSelectXY" style="display:none;">',
        '    X:<input size="5" type="text" id="bhgTargetX" />',
        '    Y:<input size="5" type="text" id="bhgTargetY" />',
        '  </span>',
        '  <span id="bhgTargetSelectZone" style="display:none;">',
        '    <select id="bhgTargetZone"><option value="">Select Zone</option>',
               zoneOptions,
        '    </select>',
        '  </span>',
        '  <button type="button" id="bhgGetActions">Get Actions</button>',
        '  <div id="bhgTaskInfo"></div>',
        '  <div id="bhgActions" style="display:none;border-top:1px solid #52ACFF;margin-top:5px;padding-top:5px">',
        '    Singularity Target: <span id="bhgTargetNote"></span>',
        '    <div style="border-top:1px solid #52ACFF;margin-top:5px;">',
        '      <ul id="bhgActionsAvail"></ul>',
        '    </div>',
        '    <div style="border-top:1px solid #52ACFF;margin-top:5px;">',
        '      <ul id="bhgResult"></ul>',
        '    </div>',
        '  </div>',
        '</div>',
        '<div id="bhgWorkingContainer">',
        '  <ul>',
        '    <li>Cool-down time remaining: <span id="bhgCooldownTime"></span></li>',
        '    <li>You may subsidize the cool-down for 2 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />.</li>',
        '    <li><button type="button" id="bhgCooldownSubsidize">Subsidize</button></li>',
        '  </ul>',
        '</div>'
      ].join('')});

      this.tab.subscribe("activeChange", function(e) {
        if(e.newValue) {
          this.checkIfWorking();
        }
      }, this, true);

      Event.on("bhgTargetType", "change", function(){
        if(Lib.getSelectedOptionValue(this) == "xy") {
          Dom.setStyle("bhgTargetSelectText", "display", "none");
          Dom.setStyle("bhgTargetSelectXY", "display", "");
          Dom.setStyle("bhgTargetSelectZone", "display", "none");
        }
        else if(Lib.getSelectedOptionValue(this) == "zone") {
          Dom.setStyle("bhgTargetSelectText", "display", "none");
          Dom.setStyle("bhgTargetSelectXY", "display", "none");
          Dom.setStyle("bhgTargetSelectZone", "display", "");
        }
        else {
          Dom.setStyle("bhgTargetSelectText", "display", "");
          Dom.setStyle("bhgTargetSelectXY", "display", "none");
          Dom.setStyle("bhgTargetSelectZone", "display", "none");
        }
      });
      Event.on("bhgGetActions", "click", this.bhgGetActions, this, true);
      Event.on("bhgCooldownSubsidize", "click", this.cooldownSubsidize, this, true);

      return this.tab;
    },
    bhgGetActions : function() {
      Lacuna.Pulser.Show();

      Dom.setStyle("bhgActions", "display", "none");

      var type = Lib.getSelectedOptionValue("bhgTargetType"),
          target = {};

      if(type == "xy") {
        target.x = Dom.get("bhgTargetX").value;
        target.y = Dom.get("bhgTargetY").value;
        Dom.get("bhgTargetNote").innerHTML = ['X: ', target.x, ', Y: ', target.y].join('');
      }
      else if (type == "zone") {
        target.zone = Dom.get("bhgTargetZone").value;
        Dom.get("bhgTargetNote").innerHTML = ['Zone: ', target.zone].join('');
      }
      else {
        target[type] = Dom.get("bhgTargetText").value;
        Dom.get("bhgTargetNote").innerHTML = target[type];
      }

      this.service.get_actions_for({
        session_id: Game.GetSession(),
        building_id: this.building.id,
        target: target
      }, {
        success : function(o){
          Lacuna.Pulser.Hide();
          this.rpcSuccess(o);
          this.PopulateBHGTab(target, o.result.tasks);
        },
        scope:this
      });
    },
    PopulateBHGTab : function(target, actions) {
      var details = Dom.get("bhgActionsAvail"),
          detailsParent = details.parentNode,
          li = document.createElement("li");


      Event.purgeElement(details, true); //clear any events before we remove
      details = detailsParent.removeChild(details); //remove from DOM to make this faster
      details.innerHTML = "";

      Dom.setStyle("bhgActions", "display", "");
      Dom.setStyle(detailsParent, "display", "");
      Dom.setStyle( Dom.get("bhgResult").parentNode, "display", "none");

      if(actions.length === 0) {
        details.innerHTML = "No available actions for singularity.";
      }
      else {
        for(var i=0; i<actions.length; i++) {
          var task = actions[i],
              nLi = li.cloneNode(false);
          var waste_out;
          if (task.waste_cost < 1000000000) {
            waste_out = [ Lib.formatNumber(task.waste_cost/1000000), 'M' ].join('');
          }
          else {
            waste_out = [ Lib.formatNumber(task.waste_cost/1000000000), 'B' ].join('');
          }

          var canGenerate = 1;

          if ( Game.GetCurrentPlanet().waste_stored < task.waste_cost ) {
            canGenerate = 0;
          }
          else if ( task.success == 0 ) {
            continue;
          }

          var typeSelector = "";
          if ( task.name === "Change Type" ) {
            var label = task.body_type == 'asteroid' ? 'Asteroid'
                      :                                'Planet';

            typeSelector = '<select id="bhgChangeTypeSelect"><option value="">New '+label+' Type</option>';

            var options = task.body_type == 'asteroid' ? this.result.task_options.asteroid_types
                        :                                this.result.task_options.planet_types;

            for (var j=0; j<options.length; j++) {
              typeSelector = typeSelector + [
                '<option value="', options[j], '">', options[j], '</option>'
              ].join('');
            }

            typeSelector = typeSelector + '</select>';
          }

          nLi.Task = task;
          nLi.innerHTML = [
            '<div class="yui-gd" style="margin-bottom:2px; border: 1px white solid; padding: 2px">',
            '  <div class="yui-u first" style="width:70%">',
            '    <label style="font-weight:bold;">',task.name,'</label>',
            '    <div>',
            '      Distance: ',task.dist,', ',
            '      Range: ',task.range,
            '    </div>',
            '    <div>',
            '      Base Chance: ',100-task.base_fail,'%,',
            '      Success Chance: ',task.success,'%,',
            '      Cost to subsidize: ',task.essentia_cost,'<br/>',
            '      Waste Needed: ',waste_out,
            '      Recovery Time: ',Lib.formatTime(task.recovery),
            '    </div>',
            '  </div>',
            '  <div class="yui-u" style="width:25%; text-align:right;">',
                 canGenerate == 1
                   ? typeSelector + '<button type="button" name="generate">Generate</button><button type="button" name="subsidize">Subsidize</button>'
                   : '<b>Insufficient Waste</b>',
            '  </div>',
            '</div>'].join('');

          details.appendChild(nLi);

          if ( task.success > 0 ) {
            Event.on(Sel.query("button[name=generate]", nLi, true),
                     "click",
                     this.bhgGenerate,
                     {Self:this, Target:target, Task:task, building_id: this.building_id},
                     true);

            Event.on(Sel.query("button[name=subsidize]", nLi, true),
                     "click",
                     this.bhgGenerate,
                     {Self:this, Target:target, Task:task, building_id: this.building_id, subsidize: true},
                     true);
          }
        }
      }
      detailsParent.appendChild(details); //add back as child

      //wait for tab to display first
      setTimeout(function() {
        var Ht = Game.GetSize().h - 250;
        if(Ht > 250) { Ht = 250; }
        Dom.setStyle(detailsParent,"height",Ht + "px");
        Dom.setStyle(detailsParent,"overflow-y","auto");
      },10);
      return this.tab;
    },
    bhgGenerate   : function(e) {
      var oSelf = this.Self,
        target = this.Target,
        task = this.Task;

      if (target) {
        var rpcParams = {
          session_id:Game.GetSession(),
          building_id:oSelf.building.id,
          target:target,
          task_name:task.name
        };

        if (this.subsidize) {
            rpcParams.subsidize = 1;
        }

        if (task.name === "Change Type") {
          var selectValue = Lib.getSelectedOptionValue("bhgChangeTypeSelect");

          if ( selectValue == "" ) {
            alert("Please select Type");
            return;
          }

          rpcParams.params = {
            newtype: selectValue
          };
        }

        this.Self.service.generate_singularity(
          {params : rpcParams },
          {success : function(o){
            Lacuna.Pulser.Hide();
            this.Self.rpcSuccess(o);
            this.Self.PopulateBHGResult(target, o.result.effect);
          },
          scope:this
          });
      }
    },
    PopulateBHGResult : function(target, effect) {
      var details = Dom.get("bhgResult"),
        detailsParent = details.parentNode,
        li = document.createElement("li");

      Event.purgeElement(details, true); //clear any events before we remove
      details = detailsParent.removeChild(details); //remove from DOM to make this faster
      details.innerHTML = "";

      Dom.setStyle( Dom.get("bhgActionsAvail").parentNode, "display", "none");

      Dom.setStyle(detailsParent, "display", "");
      detailsParent.appendChild(details); //add back as child

      if (effect.fail) {
        var nLi = li.cloneNode(false);
        nLi.innerHTML = [ '<div class="yui-gd" style="margin-bottom:2px;">',
          '  <div style="border:1px white solid;" class="yui-u" style="width:100%">',
          '    <label style="font-weight:bold;">Failure</label>',
          '    <div>',effect.fail.message,' at ',effect.fail.name,'</div>',
          '  </div></div>',
        ].join('');
        details.appendChild(nLi);
      }
      else {
        // success
        if (effect.target) {
          var nLi = li.cloneNode(false);
          nLi.innerHTML = this.bhgParseResult(effect.target, 'Success');
          details.appendChild(nLi);
        }
        if (effect.side) {
          var nLi = li.cloneNode(false);
          nLi.innerHTML = this.bhgParseResult(effect.side, 'Side-Effect');
          details.appendChild(nLi);
        }
      }

      //wait for tab to display first
      setTimeout(function() {
        var Ht = Game.GetSize().h - 250;
        if(Ht > 250) { Ht = 250; }
        Dom.setStyle(detailsParent,"height",Ht + "px");
        Dom.setStyle(detailsParent,"overflow-y","auto");
      },10);
    },
    bhgParseResult : function(result, type) {
        var out = [ '<div class="yui-gd" style="margin-bottom:2px;">',
          '  <div style="border:1px white solid;" class="yui-u" style="width:100%">',
          '    <label style="font-weight:bold;">',type,'</label>',
          '    <div>'
        ].join('');

        if ( result.message === "Swapped Places" ) {
            out = out + [
                result.message, ' with ', result.swapname,
                ' at orbit ', result.orbit
            ].join('');
        }
        else if ( result.message === "Changed Size" ) {
            out = out + [
                result.name, ' changed size from ', result.old_size, ' to ', result.size
            ].join('');
        }
        else if ( result.message === "Changed Type" ) {
            var newtype = result['class'].replace( new RegExp(".*::", "g"), "" );
            out = out + [
                result.name, ' changed to type ', newtype, ' planet'
            ].join('');
        }
        else if ( result.message === "Made Asteroid" ) {
            var newtype = result['class'].replace( new RegExp(".*::", "g"), "" );
            out = out + [
                result.name, ' is now a type ', newtype, ' asteroid of size ',
                result.size
            ].join('');
        }
        else if ( result.message === "Made Planet" ) {
            var newtype = result['class'].replace( new RegExp(".*::", "g"), "" );
            out = out + [
                result.name, ' is now a type ', newtype, ' planet of size ',
                result.size
            ].join('');
        }
        else {
            out = out + [
                result.message, ' at ', result.name
            ].join('');
        }

        out = out + '  </div></div></div>';

        return out;
    },
    checkIfWorking : function() {
      if(this.work && this.work.seconds_remaining) {
        Dom.setStyle("bhgContainer", "display", "none");
        Dom.setStyle("bhgWorkingContainer", "display", "");
        this.populateCooldownTimer(this.work.seconds_remaining);
      }
      else {
        Dom.setStyle("bhgContainer", "display", "");
        Dom.setStyle("bhgWorkingContainer", "display", "none");
      }
    },
    populateCooldownTimer : function(seconds_remaining) {
      this.addQueue(seconds_remaining, this.cooldownQueue, "bhgCooldownTime");
    },
    cooldownQueue : function(remaining, el){
      if(remaining <= 0) {
        var span = Dom.get(el),
          p = span.parentNode;
        p.removeChild(span);
        p.innerHTML = "Cool-down Complete";
      }
      else {
        Dom.get(el).innerHTML = Lib.formatTime(Math.round(remaining));
      }
    },
    cooldownSubsidize : function() {
      Lacuna.Pulser.Show();

      this.service.subsidize_cooldown({
        session_id:Game.GetSession(),
        building_id:this.building.id
      }, {
        success : function(o){
          Lacuna.Pulser.Hide();
          this.rpcSuccess(o);

          delete this.work;
          this.updateBuildingTile(o.result.building);
          this.resetQueue();
          Dom.get("bhgCooldownTime").innerHTML = "";
          this.checkIfWorking();
        },
        scope:this
      });
    }
  });

  YAHOO.lacuna.buildings.BlackHoleGenerator = BlackHoleGenerator;

})();
YAHOO.register("blackholegenerator", YAHOO.lacuna.buildings.BlackHoleGenerator, {version: "1", build: "0"});

}

// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/blackHoleGenerator.js","/building")
},{"buffer":71,"oMfpAn":75}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Capitol == "undefined" || !YAHOO.lacuna.buildings.Capitol) {
    
(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Capitol = function(result){
        Capitol.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Capitol;
    };
    
    YAHOO.lang.extend(Capitol, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getRenameTab()];
        },
        _getRenameTab : function() {
            var div = document.createElement("div");
            Dom.addClass(div, 'capitolEmpireRenameTab');
            div.innerHTML = [
                '<p>',
                '    Current empire name: <span id="capitolCurrentEmpireName">', Game.EmpireData.name, '</span>',
                '</p>',
                '<fieldset style="text-align: center">',
                '    <legend>Change Empire Name</legend>',
                '    <div><label>Cost to change:<span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" title="Essentia" /></span>',this.result.rename_empire_cost,'</label></div>',
                '    <div><label>New empire name: <input type="text" id="capitolNewEmpireName"></input></label></div>',
                '    <div><button id="capitolChangeEmpireName">Change Name</button></div>',
                '</fieldset>'
            ].join('');
            Event.on('capitolChangeEmpireName', "click", this.RenameEmpire, this, true);
            var tab = new YAHOO.widget.Tab({ label: "Rename Empire", contentEl: div});
            return tab;
        },
        RenameEmpire : function(e) {
            Event.stopEvent(e);
            var btn = Event.getTarget(e);
            var newName = Dom.get('capitolNewEmpireName').value;
            Lacuna.Pulser.Show();
            btn.disabled = true;
            this.service.rename_empire({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                name: newName
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Capitol.rename_empire.success");
                    btn.disabled = false;
                    Dom.get('capitolNewEmpireName').value = '';
                    Dom.get('capitolCurrentEmpireName').innerHTML = newName;
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    alert('Your empire name has been changed!');
                },
                failure : function(o){
                    btn.disabled = false;
                },
                scope:this
            });
        }
    });
    
    Lacuna.buildings.Capitol = Capitol;

})();
YAHOO.register("Capitol", YAHOO.lacuna.buildings.Capitol, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/capitol.js","/building")
},{"buffer":71,"oMfpAn":75}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Development == "undefined" || !YAHOO.lacuna.buildings.Development) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Development = function(result){
        Development.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Development;
    };
    
    Lang.extend(Development, Lacuna.buildings.Building, {
        getChildTabs : function() {
            if(this.result.build_queue && this.result.build_queue.length > 0) {
                return [this._getQueueTab()];
            }
        },
        _getQueueTab : function() {
            var bq = this.result.build_queue,
                ul = document.createElement("ul"),
                li = document.createElement("li"),
                div = document.createElement("div"),
                subDiv = div.cloneNode(false),
                hUl = ul.cloneNode(false);
                
            Dom.addClass(div, "buildingDetailsExtra");
            
            subDiv.appendChild(document.createTextNode('You can subsidize the build queue for '+this.result.subsidy_cost+' Essentia to finish immediately.'));
            var btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Subsidize";
            btn = subDiv.appendChild(btn);
            Event.on(btn, "click", this.DevSubsidize, this, true);
            div.appendChild(subDiv);

            Dom.addClass(hUl, "buildQueue buildQueueHeader clearafter");
            hUl.innerHTML = '<li class="buildQueueName">Building</li><li class="buildQueueLevel">Level</li><li class="buildQueueTime">Time</li><li class="buildQueueCoords">Coordinates</li><li class="buildQueueSubsidy">Subsidy</li><li class="buildQueueAction">Action</li>';
            div.appendChild(hUl);
            
            for(var i=0; i<bq.length; i++) {
                var bqo = bq[i],
                    nUl = ul.cloneNode(false),
                    nLi = li.cloneNode(false);
                Dom.addClass(nUl, "buildQueue");
                Dom.addClass(nUl, "clearafter");

                Dom.addClass(nLi,"buildQueueName");
                nLi.innerHTML = bqo.name;
                nUl.appendChild(nLi);
                
                nLi = li.cloneNode(false);
                Dom.addClass(nLi,"buildQueueLevel");
                nLi.innerHTML = bqo.to_level;
                nUl.appendChild(nLi);
                
                var tLi = li.cloneNode(false);
                Dom.addClass(tLi,"buildQueueTime");
                tLi.innerHTML = Lib.formatTime(bqo.seconds_remaining);
                nUl.appendChild(tLi);

                nLi = li.cloneNode(false);
                Dom.addClass(nLi,"buildQueueCoords");
                nLi.innerHTML = [bqo.x,',',bqo.y].join('');
                nUl.appendChild(nLi);

                nLi = li.cloneNode(false);
                Dom.addClass(nLi,"buildQueueSubsidy");
                nLi.innerHTML = bqo.subsidy_cost;
                nUl.appendChild(nLi);

                var btn_subsidy = document.createElement("button");
                btn_subsidy.setAttribute("type", "button");
                btn_subsidy.innerHTML = "Subsidize";
                btn_subsidy = subDiv.appendChild(btn_subsidy);
                Event.on(btn_subsidy, "click", this.DevSubsidizeOneBuild, {Self:this,ScheduledId:bqo.building_id}, true);
                nUl.appendChild(btn_subsidy);

                var btn_cancel = document.createElement("button");
                btn_cancel.setAttribute("type", "button");
                btn_cancel.innerHTML = "Cancel";
                btn_cancel = subDiv.appendChild(btn_cancel);
                Event.on(btn_cancel, "click", this.DevCancelOneBuild, {Self:this,ScheduledId:bqo.building_id}, true);
                nUl.appendChild(btn_cancel);


                div.appendChild(nUl);
                
                this.addQueue(bqo.seconds_remaining, this.DevMinistryQueue, tLi);
            }
                    
            var tab = new YAHOO.widget.Tab({ label: "Build Queue", contentEl: div});
                    
            this.queueTab = tab;
            
            return tab;
        },

        DevMinistryQueue : function(remaining, el){
            if(remaining <= 0) {
                var ul = el.parentNode,
                    c = ul.parentNode;
                c.removeChild(ul);
            }
            else {
                el.innerHTML = Lib.formatTime(Math.round(remaining));
            }
        },

        DevCancelOneBuild : function(e) {
            Lacuna.Pulser.Show();

            this.Self.service.cancel_build({ args: {
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                scheduled_id:this.ScheduledId
            }}, {
                success : function(o) {
                    YAHOO.log(o, "info", "Development.DevCancelOneBuild.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    if(this.Self.queueTab) {
                        Event.purgeElement(this.Self.queueTab.get("contentEl"));
                        this.Self.removeTab(this.Self.queueTab);
                    }
                    this.Self.fireEvent("onHide");
                    this.Self.fireEvent("onUpdateMap");
                },
                scope:this
            });
        },

        DevSubsidizeOneBuild : function(e) {
            Lacuna.Pulser.Show();

            this.Self.service.subsidize_one_build({ args: {
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                scheduled_id:this.ScheduledId
            }}, {
                success : function(o) {
                    YAHOO.log(o, "info", "Development.DevSubsidizeOneBuild.success");
                    Lacuna.Pulser.Hide();
                    var e = Game.EmpireData.essentia*1;
                    Game.EmpireData.essentia = e - o.result.essentia_spent*1;
                    this.Self.rpcSuccess(o);
                    if(this.Self.queueTab) {
                        Event.purgeElement(this.Self.queueTab.get("contentEl"));
                        this.Self.removeTab(this.Self.queueTab);
                    }
                    this.Self.fireEvent("onHide");
                    this.Self.fireEvent("onUpdateMap");
                },
                scope:this
            });
        },



        DevSubsidize : function(e) {
            Lacuna.Pulser.Show();
            
            this.service.subsidize_build_queue({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Development.DevSubsidize.success");
                    Lacuna.Pulser.Hide();
                    var e = Game.EmpireData.essentia*1;
                    Game.EmpireData.essentia = e - o.result.essentia_spent*1;
                    this.rpcSuccess(o);
                    
                    if(this.queueTab) {
                        Event.purgeElement(this.queueTab.get("contentEl"));
                        this.removeTab(this.queueTab);
                    }
                    
                    //close buildingDetails
                    this.fireEvent("onHide");

                    //refresh map
                    this.fireEvent("onUpdateMap");
                },
                scope:this
            });        
        }
    });
    
    YAHOO.lacuna.buildings.Development = Development;

})();
YAHOO.register("development", YAHOO.lacuna.buildings.Development, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/development.js","/building")
},{"buffer":71,"oMfpAn":75}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.DistributionCenter == "undefined" || !YAHOO.lacuna.buildings.DistributionCenter) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var DistributionCenter = function(result){
        DistributionCenter.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.DistributionCenter;
    };
    
    Lang.extend(DistributionCenter, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getReserveTab()];
        },
        _getReserveTab : function() {
            this.tab = new YAHOO.widget.Tab({ label: "Reserve", content: [
            '<div id="distribReserveAnnounce"></div>',
            '<div id="distribReserveContainers" style="display:none;">',
            '    <div class="distribReserve yui-g">',
            '        <div class="yui-u first">',
            '            <legend>On Planet</legend>',
            '            <div class="distribContainers"><ul id="distribReserveOnPlanet"></ul></div>',
            '        </div>',
            '        <div class="yui-u">',
            '            <legend>Reserve</legend>',
            '            <div class="distribContainers"><ul id="distribReserveToStore"></ul></div>',
            '        </div>',
            '    </div>',
            '    <ul style="margin-top:5px;">',
            '        <li><label>Total:</label><span id="distribTotalSelected">0</span></li>',
            '        <li id="distribReserveMessage" class="alert"></li>',
            '    </ul><div>',
            '        <button type="button" id="distribReserveSubmit">Reserve</button>',
            '    </div>',
            '</div>',
            '<div id="distribStoredContainer" class="distribReserve yui-g" style="display:none;">',
            '    <div class="yui-u first">',
            '        <legend>In Reserve</legend>',
            '        <div class="distribContainers"><ul id="distribReserveInReserve"></ul></div>',
            '        <div>',
            '            <div id="distribReleaseMessage" class="alert"></div>',
            '            <button type="button" id="distribReleaseSubmit">Release</button>',
            '        </div>',
            '    </div>',
            '</div>'].join('')});
            
            this.tab.subscribe("activeChange", this.CheckReserve, this, true);
            
            Event.on("distribReserveSubmit", "click", this.ReserveSubmit, this, true);
            Event.on("distribReleaseSubmit", "click", this.StoreRelease, this, true);
            
            Event.delegate("distribReserveOnPlanet", "click", this.ReserveStoreAdd, "button", this, true);
            Event.delegate("distribReserveToStore", "click", this.ReserveStoreRemove, "button", this, true);
            
            return this.tab;
        },
        
        GetStoredResources : function() {
            if(!this.resources) {
                Lacuna.Pulser.Show();
                this.service.get_stored_resources({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.resources = o.result.resources;
                        this.ReservePopulate();
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
            else {
                this.ReservePopulate();
            }
        },
        
        CheckReserve : function(e) {
            if(e.newValue) {
                if(!this.result.reserve.can) {
                    Dom.setStyle("distribReserveContainers", "display", "none");
                    Dom.setStyle("distribStoredContainer", "display", "");
                    this.StorePopulate();
                }
                else {
                    Dom.setStyle("distribReserveContainers", "display", "");
                    Dom.setStyle("distribStoredContainer", "display", "none");
                    this.GetStoredResources();
                }
            }
        },
        
        ReservePopulate : function() {
            var reserve = this.result.reserve || {}, 
                onPlanet = Dom.get("distribReserveOnPlanet"),
                announce = Dom.get("distribReserveAnnounce"),
                li = document.createElement("li"), nLi, ul,
                r,x,resource,name;
                
            if(announce) {
                announce.innerHTML = ['You can reserve at most ', Lib.formatNumber(reserve.max_reserve_size), ' resources for ', Lib.formatTime(reserve.max_reserve_duration), '.'].join('');
            }
                
            if(onPlanet) {
                onPlanet.innerHTML = "";
                
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(this.resources[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Reserve = {type:name,quantity:this.resources[name]*1};
                                    nLi.innerHTML = ['<span class="reserveName">',name.titleCaps(), ' (<label class="quantity">', this.resources[name], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                                    onPlanet.appendChild(nLi);
                                }
                            }
                        }
                        else if(this.resources[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Reserve = {type:r,quantity:this.resources[r]*1};
                            nLi.innerHTML = ['<span class="reserveName">',r.titleCaps(), ' (<label class="quantity">', this.resources[r], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                            
                            onPlanet.appendChild(nLi);
                        }
                    }
                }
            }
            
            var Ht = Game.GetSize().h - 245;
            if(Ht > 200) { Ht = 200; }
            Dom.setStyle(Sel.query('.distribContainers','distribReserveContainers'), 'height', Ht + 'px');

        },
        ReserveStoreAdd : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("distribReserveToStore");
            if(quantity && c) {
                var id = "reserveResource-" + li.Reserve.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length === 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Reserve.quantity) {
                        quantity = li.Reserve.quantity;
                    }
                    Dom.addClass(item, "reserveItem");
                    Dom.addClass(del, "reserveDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.UpdateReserveStore(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Reserve.type, quantity:quantity};
                    content.innerHTML = ['<span class="reserveName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.UpdateReserveStore(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true),
                        inp = Sel.query("input", found, true);
                    if(newTotal > li.Reserve.quantity) {
                        newTotal = li.Reserve.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.UpdateReserveStore(diff);
                    
                    var a = new Util.ColorAnim(lq, {color:{from:'#0f0',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        ReserveStoreRemove : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.UpdateReserveStore(li.Object.quantity * -1);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.UpdateReserveStore(diff);
                    var a = new Util.ColorAnim(lq, {color:{from:'#f00',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        UpdateReserveStore : function(byVal) {
            var c = Dom.get("distribTotalSelected"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        ReserveSubmit : function() {
            var data = {
                    session_id: Game.GetSession(""),
                    building_id: this.building.id
                },
                toStoreLis = Sel.query("li","distribReserveToStore"),
                reserveItems = [], 
                reserveTotal = 0;
                
            for(var n=0; n<toStoreLis.length; n++) {
                var obj = toStoreLis[n].Object;
                if(obj) {
                    reserveItems[reserveItems.length] = obj;
                    reserveTotal += obj.quantity;
                }
            }

            if(reserveTotal == 0) {
                Dom.get("distribReserveMessage").innerHTML = "Must add items to Reserve.";
            }
            else {
                data.resources = reserveItems;
            
                Dom.get("distribReserveMessage").innerHTML = "";
                Lacuna.Pulser.Show();
                this.service.reserve(data, {
                    success : function(o){
                        this.rpcSuccess(o);
                        
                        for(var n=0; n<toStoreLis.length; n++) {
                            if(toStoreLis[n].Object) {
                                Event.purgeElement(toStoreLis[n]);
                                toStoreLis[n].parentNode.removeChild(toStoreLis[n]);
                            }
                        }
                        Dom.get("distribTotalSelected").innerHTML = "0";
                        
                        delete o.result.status;
                        this.result = o.result;
                        
                        Lacuna.Pulser.Hide();
                        this.CheckReserve({newValue:1});
                    },
                    scope:this
                });
            }
        },

        StorePopulate : function() {
            var reserve = this.result.reserve || {},
                inReserve = Dom.get("distribReserveInReserve"),
                announce = Dom.get("distribReserveAnnounce"),
                li = document.createElement("li"), nLi, ul,
                r,x,resource,name;
                
            if(announce) {
                announce.innerHTML = 'Time left on current reserve: <span id="distribReserveTime"></span>';
                this.addQueue(reserve.seconds_remaining, this.StoreTimer, "distribReserveTime");
            }
                
            if(inReserve && reserve.resources && reserve.resources.length > 0) {
                inReserve.innerHTML = "";
                for(x=0; x < reserve.resources.length; x++) {
                    var obj = reserve.resources[x];
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = ['<span class="reserveName">',obj.type.titleCaps(), ' (<label class="quantity">', obj.quantity, '</label>)</span>'].join('');
                    inReserve.appendChild(nLi);
                }
            }
        },
        StoreTimer : function(remaining, el){
            if(remaining <= 0) {
                var span = Dom.get(el),
                    p = span.parentNode;
                p.removeChild(span);
                p.innerHTML = "Search Complete";
            }
            else {
                Dom.get(el).innerHTML = Lib.formatTime(Math.round(remaining));
            }
        },
        StoreRelease : function() {
            Dom.get("distribReleaseMessage").innerHTML = "";
            Lacuna.Pulser.Show();
            this.service.release_reserve({
                session_id: Game.GetSession(""),
                building_id: this.building.id
            }, {
                success : function(o){
                    this.rpcSuccess(o);
                    
                    Dom.get("distribReserveInReserve").innerHTML = "";
                    
                    delete o.result.status;
                    this.result = o.result;
                    
                    Lacuna.Pulser.Hide();
                    this.CheckReserve({newValue:1});
                },
                scope:this
            });
        }
        
    });
    
    Lacuna.buildings.DistributionCenter = DistributionCenter;

})();
YAHOO.register("DistributionCenter", YAHOO.lacuna.buildings.DistributionCenter, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/distributionCenter.js","/building")
},{"buffer":71,"oMfpAn":75}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Embassy == "undefined" || !YAHOO.lacuna.buildings.Embassy) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library,
        stashSel = '<select><option value="1">1</option><option value="10">10</option><option value="100">100</option><option value="1000" selected="selected">1000</option><option value="10000">10000</option></select>';

    var Embassy = function(result){
        Embassy.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Embassy;
        this.alliance = result.alliance_status;
        this.isLeader = this.alliance && this.alliance.leader_id == Game.EmpireData.id;
        
        if(this.building.level > 0) {
            this.subscribe("onLoad", this.MembersPopulate, this, true);
        }
    };
    
    Lang.extend(Embassy, Lacuna.buildings.Building, {
        /*destroy : function() {
            Event.removeListener(document, "mouseup", this.StashMouseUp);
            
            Embassy.superclass.destroy.call(this);
        },*/
        getChildTabs : function() {
            if(this.alliance) {
                var tabs =  [this._getStashTab(),this._getAllianceTab(),this._getMemberTab(),this._getInvitesTab()];
                if(this.isLeader) {
                    tabs.push(this._getSendTab());
                }
                return tabs;
            }
            else {
                return [this._getCreateTab(),this._getInvitesTab()];
            }
        },
        _getAllianceTab : function() {
            var div = document.createElement("div");
            if(this.isLeader) {
                div.innerHTML = ['<div>',
                '    <ul>',
                '        <li><label>Founded: </label>', Lib.formatServerDate(this.alliance.date_created),'</li>',
                '        <li><label>Description: </label><input type="text" id="embassyAllianceDesc" value="', this.alliance.description,'" size="50" /></li>',
                '        <li><label>Forums: </label><input type="text" id="embassyAllianceForums" value="', this.alliance.forum_uri,'" size="50" /></li>',
                '        <li><label>Announcements: </label><textarea id="embassyAllianceAnnoucements" rows="2" cols="80">', this.alliance.announcements,'</textarea></li>',
                '        <li id="embassyAllianceMessage"></li>',
                '        <li><button type="button" id="embassyAllianceUpdate">Save</button></li>',
                '    </ul>',
                '    <hr /><div><button type="button" id="embassyAllianceDissolve">Dissolve Alliance</button>',
                '</div>'].join('');
                
                Event.on("embassyAllianceUpdate","click", this.UpdateAlliance, this, true);
                Event.on("embassyAllianceDissolve","click", this.DissolveAlliance, this, true);
            }
            else {
                div.innerHTML = ['<div>',
                '    <ul>',
                '        <li><label>Founded: </label>', Lib.formatServerDate(this.alliance.date_created),'</li>',
                '        <li><label>Description: </label>', this.alliance.description,'</li>',
                '        <li><label>Forums: </label>', this.alliance.forum_uri ? ['<a href="',this.alliance.forum_uri,'" target="_blank">View</a>'].join('') : '','</li>',
                '        <li><label>Announcements: </label>', this.alliance.announcements ? this.alliance.announcements.replace('\n','<br />') : "",'</li>',
                '    </ul>',
                '    <hr /><div>',
                '        <textarea id="embassyAllianceLeaveReason" rows="3" cols="80"></textarea>',
                '        <button type="button" id="embassyAllianceLeave">Leave Alliance</button>',
                '    </div>',
                '</div>'].join('');
                
                Event.on("embassyAllianceLeave","click", this.LeaveAlliance, this, true);
            }
        
            this.allianceTab = new YAHOO.widget.Tab({ label: this.alliance.name, contentEl:div });
            
            return this.allianceTab;
        },
        _getMemberTab : function() {
            this.memberTab = new YAHOO.widget.Tab({ label: "Members", content: ['<div>',
            '    <ul class="embassyHeader embassyInfo clearafter">',
            '        <li class="embassyEmpire">Empire</li>',
            '        <li class="embassyAction"></li>',
            '        <li class="embassyMessage"></li>',
            '    </ul>',
            '    <div><div id="embassyMemberDetails"></div></div>',
            '</div>'].join('')});
            
            return this.memberTab;
        },
        _getCreateTab : function() {
            this.createTab = new YAHOO.widget.Tab({ label: "Create Alliance", content: ['<div>',
            '    <label>Alliance Name</label><input type="text" id="embassyCreateName" />',
            '    <div id="embassyCreateMessage" class="alert"></div>',
            '    <button type="button" id="embassyCreateSubmit">Create</button>',
            '</div>'].join('')});
            
            Event.on("embassyCreateSubmit", "click", this.CreateAlliance, this, true);
            
            return this.createTab;
        },
        _getInvitesTab : function() {
            this.invitesTab = new YAHOO.widget.Tab({ label: "View Invites", content: ['<div>',
            '    <ul class="embassyHeader embassyInfo clearafter">',
            '        <li class="embassyAlliance">Alliance</li>',
            '        <li class="embassyAction"></li>',
            '        <li class="embassyAction"></li>',
            '        <li class="embassyMessage"></li>',
            '    </ul>',
            '    <div><div id="embassyInvitesDetails"></div></div>',
            '</div>'].join('')});
            
            this.invitesTab.subscribe("activeChange", this.getInvites, this, true);
            
            return this.invitesTab;
        },
        _getSendTab : function() {
            this.sendTab = new YAHOO.widget.Tab({ label: "Send Invites", content: ['<div>',
            '    <ul>',
            '        <li>Invite: <span style="width:200px;display:inline-block;"><input id="embassySendTo" type="text" /></span></li>',
            '        <li>Message: <textarea id="embassySendMessage" rows="1" cols="80"></textarea></li>',
            '        <li><button type="button" id="embassySendInvite">Send Invite</button></li>',
            '    </ul>',
            '    <hr />',
            '    <h3>Pending Invites</h3>',
            '    <ul class="embassyHeader embassyInfo clearafter">',
            '        <li class="embassyEmpire">Empire</li>',
            '        <li class="embassyAction"></li>',
            '        <li class="embassyMessage"></li>',
            '    </ul>',
            '    <div><div id="embassySendDetails"></div></div>',
            '</div>'].join('')});
            
            this.sendTab.subscribe("activeChange", this.getPendingInvites, this,true);
            
            Event.on("embassySendInvite","click",this.SendInvite,this,true);
            
            return this.sendTab;
        },
        _getStashTab : function() {
            this.stashTab = new YAHOO.widget.Tab({ label: "Stash", content: [
            '<div id="embassyStashAnnounce"></div>',
            '<div class="embassyStash yui-g">',
            '    <div class="yui-g first">',
            '        <div class="yui-u first">',
            '            <legend>On Planet</legend>',
            '            <div class="embassyContainers" id="sopHt"><ul id="embassyStashOnPlanet"></ul></div>',
            '        </div>',
            '        <div class="yui-u">',
            '            <legend>Donate</legend>',
            '            <div class="embassyContainers" id="stdHt"><ul id="embassyStashToDonate"></ul></div>',
            '            <div>Total:<span id="embassyTotalDonate">0</span></div>',
            '        </div>',
            '    </div>',
            '    <div class="yui-g">',
            '        <div class="yui-u first">',
            '            <legend>Exchange</legend>',
            '            <div class="embassyContainers" id="steHt"><ul id="embassyStashToExchange"></ul></div>',
            '            <div>Total:<span id="embassyTotalExchange">0</span></div>',
            '        </div>',
            '        <div class="yui-u">',
            '            <legend>In Stash</legend>',
            '            <div class="embassyContainers" id="sisHt"><ul id="embassyStashInStash"></ul></div>',
            '        </div>',
            '    </div>',
            '</div>',
            '<div style="text-align: center;">',
            '    <div id="embassyStashMessage" class="alert"></div>',
            '    <button type="button" id="embassyStashSubmit">Transfer</button>',
            '</div>'].join('')});
            
            this.stashTab.subscribe("activeChange", this.getStash, this, true);
            
            Event.on("embassyStashSubmit", "click", this.StashSubmit, this, true);
            
            Event.delegate("embassyStashOnPlanet", "click", this.StashDonateAdd, "button", this, true);
            Event.delegate("embassyStashToDonate", "click", this.StashDonateRemove, "button", this, true);

            Event.delegate("embassyStashInStash", "click", this.StashExchangeAdd, "button", this, true);
            Event.delegate("embassyStashToExchange", "click", this.StashExchangeRemove, "button", this, true);
            
            return this.stashTab;
        },
        
        _createSendToSelect : function() {
            var dataSource = new Util.XHRDataSource("/empire");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.empires",
                fields : ["name","id"]
            };
            
            var oTextboxList = new YAHOO.lacuna.TextboxList("embassySendTo", dataSource, { //config options
                maxResultsDisplayed: 10,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:true,
                formatResultLabelKey:"name",
                formatResultColumnKeys:["name"],
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){                
                var s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };
            
            this.embassySendTo = oTextboxList;
        },
        
        //Stash 
        getStash : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                this.service.view_stash({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status;
                        this.stash = o.result;
                        
                        this.StashPopulate();
                    },
                    scope:this
                });
            }
        },
        StashPopulate : function() {
            /*        
            "stash" : {"gold" : 4500},
            "stored" : {"energy" : 40000},
            "max_exchange_size" : 30000,
            "exchanges_remaining_today" : 1
            */
            var stash = this.stash || {}, 
                onPlanet = Dom.get("embassyStashOnPlanet"),
                inStash = Dom.get("embassyStashInStash"),
                announce = Dom.get("embassyStashAnnounce"),
                li = document.createElement("li"), nLi, ul,
                r,x,resource,name;
                
            if(announce) {
                announce.innerHTML = ['Donations are unlimited. You can exchange at most ', Lib.formatNumber(stash.max_exchange_size), ' resources and you have ', stash.exchanges_remaining_today, ' exchange(s) remaining today.'].join('');
            }
                
            if(onPlanet) {
                onPlanet.innerHTML = "";
                
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(stash.stored[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Stash = {type:name,quantity:stash.stored[name]*1};
                                    nLi.innerHTML = ['<span class="stashName">',name.titleCaps(), ' (<label class="quantity">', stash.stored[name], '</label>)</span> ', stashSel, '<button type="button">+</button>'].join('');
                                    onPlanet.appendChild(nLi);
                                }
                            }
                        }
                        else if(stash.stored[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Stash = {type:r,quantity:stash.stored[r]*1};
                            nLi.innerHTML = ['<span class="stashName">',r.titleCaps(), ' (<label class="quantity">', stash.stored[r], '</label>)</span> ', stashSel, '<button type="button">+</button>'].join('');
                            
                            onPlanet.appendChild(nLi);
                        }
                    }
                }
            }
            if(inStash && stash.stash) {
                inStash.innerHTML = "";                
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(stash.stash[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Stash = {type:name,quantity:stash.stash[name]*1};
                                    nLi.innerHTML = ['<span class="stashName">',name.titleCaps(), ' (<label class="quantity">', stash.stash[name], '</label>)</span> ', stashSel, '<button type="button">+</button>'].join('');
                                    inStash.appendChild(nLi);
                                }
                            }
                        }
                        else if(stash.stash[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Stash = {type:r,quantity:stash.stash[r]*1};
                            nLi.innerHTML = ['<span class="stashName">',r.titleCaps(), ' (<label class="quantity">', stash.stash[r], '</label>)</span> ', stashSel, '<button type="button">+</button>'].join('');
                            
                            inStash.appendChild(nLi);
                        }
                    }
                }
            }
            var Ht = Game.GetSize().h - 245;
            if(Ht > 200) { Ht = 200; }
            Dom.setStyle(Dom.get('sopHt'), 'height', Ht + 'px');
            Dom.setStyle(Dom.get('stdHt'), 'height', Ht + 'px');
            Dom.setStyle(Dom.get('steHt'), 'height', Ht + 'px');
            Dom.setStyle(Dom.get('sisHt'), 'height', Ht + 'px');

        },
        StashDonateAdd : function(e, matchedEl, container){
            var quantity = Lib.getSelectedOptionValue(matchedEl.previousSibling)*1,
                li = matchedEl.parentNode,
                c = Dom.get("embassyStashToDonate");
            if(quantity && c) {
                var id = "stashResource-" + li.Stash.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Stash.quantity) {
                        quantity = li.Stash.quantity;
                    }
                    Dom.addClass(item, "stashItem");
                    Dom.addClass(del, "stashDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateStashDonate(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Stash.type, quantity:quantity};
                    content.innerHTML = ['<span class="stashName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> ', stashSel, '<button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateStashDonate(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true);
                    if(newTotal > li.Stash.quantity) {
                        newTotal = li.Stash.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateStashDonate(diff);
                }
            }
        },
        StashDonateRemove : function(e, matchedEl, container){
            var quantity = Lib.getSelectedOptionValue(matchedEl.previousSibling)*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.updateStashDonate(li.Object.quantity * -1);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updateStashDonate(diff);
                }
            }
        },
        StashExchangeAdd : function(e, matchedEl, container){
            var quantity = Lib.getSelectedOptionValue(matchedEl.previousSibling)*1,
                li = matchedEl.parentNode,
                c = Dom.get("embassyStashToExchange");
            if(quantity && c) {
                var id = "stashResource-" + li.Stash.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Stash.quantity) {
                        quantity = li.Stash.quantity;
                    }
                    Dom.addClass(item, "stashItem");
                    Dom.addClass(del, "stashDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateStashExchange(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Stash.type, quantity:quantity};
                    content.innerHTML = ['<span class="stashName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> ', stashSel, '<button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateStashExchange(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true);
                    if(newTotal > li.Stash.quantity) {
                        newTotal = li.Stash.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateStashExchange(diff);
                }
            }
        },
        StashExchangeRemove : function(e, matchedEl, container){
            var quantity = Lib.getSelectedOptionValue(matchedEl.previousSibling)*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity;
                }
                
                if(newTotal == 0) {
                    this.updateStashExchange(li.Object.quantity * -1);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updateStashExchange(diff);
                }
            }
        },
        updateStashDonate : function(byVal) {
            var c = Dom.get("embassyTotalDonate"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        updateStashExchange : function(byVal) {
            var c = Dom.get("embassyTotalExchange"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        StashSubmit : function() {
            var data = {
                    session_id: Game.GetSession(""),
                    building_id: this.building.id
                },
                toDonateLis = Sel.query("li","embassyStashToDonate"),
                toExchangeLis = Sel.query("li","embassyStashToExchange"),
                donateItems = {}, donateTotal = 0,
                exchangeItems = {}, exchangeTotal = 0,
                n, obj, 
                serviceFunc;
                
            for(n=0; n<toDonateLis.length; n++) {
                obj = toDonateLis[n].Object;
                if(obj) {
                    donateItems[obj.type] = obj.quantity;
                    donateTotal += obj.quantity;
                }
            }
            for(n=0; n<toExchangeLis.length; n++) {
                obj = toExchangeLis[n].Object;
                if(obj) {
                    exchangeItems[obj.type] = obj.quantity;
                    exchangeTotal += obj.quantity;
                }
            }
            
            data.donation = donateItems;

            if(donateTotal == 0) {
                Dom.get("embassyStashMessage").innerHTML = "Must add items to donate to Stash.";
            }
            else if(exchangeTotal > 0 && this.stash.exchanges_remaining_today <= 0) {
                Dom.get("embassyStashMessage").innerHTML = 'You have already used up the amount of stash exchanges you can perform in a single day.';
            }
            else if(exchangeTotal > 0 && donateTotal > this.stash.max_exchange_size) {
                Dom.get("embassyStashMessage").innerHTML = ['You are only able to transfer ', this.stash.max_exchange_size, ' resources from the stash.'].join('');
            }
            else if(exchangeTotal > 0 && donateTotal != exchangeTotal) {
                Dom.get("embassyStashMessage").innerHTML = 'Total amount of resources transfered from stash must be equal to the amount donating.';
            }
            else {
            
                if(exchangeTotal > 0) {
                    data.request = exchangeItems;
                    serviceFunc = this.service.exchange_with_stash;
                }
                else {
                    serviceFunc = this.service.donate_to_stash;
                }
            
                Dom.get("embassyStashMessage").innerHTML = "";
                Lacuna.Pulser.Show();
                serviceFunc(data, {
                    success : function(o){
                        this.rpcSuccess(o);
                        var n;
                        
                        for(n=0; n<toDonateLis.length; n++) {
                            if(toDonateLis[n].Object) {
                                Event.purgeElement(toDonateLis[n]);
                                toDonateLis[n].parentNode.removeChild(toDonateLis[n]);
                            }
                        }
                        for(n=0; n<toExchangeLis.length; n++) {
                            if(toExchangeLis[n].Object) {
                                Event.purgeElement(toExchangeLis[n]);
                                toExchangeLis[n].parentNode.removeChild(toExchangeLis[n]);
                            }
                        }
                        Dom.get("embassyTotalDonate").innerHTML = "0";
                        Dom.get("embassyTotalExchange").innerHTML = "0";
                        
                        Dom.get("embassyStashMessage").innerHTML = "Successfully donated. ";
                        Lib.fadeOutElm("embassyStashMessage");
                        
                        delete o.result.status;
                        this.stash = o.result;
                        this.StashPopulate();
                        
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        //Create
        CreateAlliance : function() {
            var data = {
                session_id: Game.GetSession(""),
                building_id: this.building.id,
                name: Dom.get("embassyCreateName").value
            };
            
            if(!data.name || data.name.length == 0) {
                Dom.get("embassyCreateMessage").innerHTML = "Must enter a name.";
            }
            else {
                this.service.create_alliance(data, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.CreateAlliance.success");
                        this.rpcSuccess(o);
                        this.alliance = o.result.alliance;
                        this.isLeader = this.alliance && this.alliance.leader_id == Game.EmpireData.id;
                        Dom.get("embassyCreateMessage").innerHTML = "";
                        Dom.get("embassyCreateName").value = "";
                        this.addTab(this._getAllianceTab());
                        this.addTab(this._getMemberTab());
                        this.addTab(this._getSendTab());
                        this.removeTab(this.createTab);
                        this.MembersPopulate();
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        //View Invites
        getInvites : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                this.service.get_my_invites({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.get_my_invites.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        this.invites = o.result.invites;
                        
                        this.InvitesPopulate();
                    },
                    scope:this
                });
            }
        },
        InvitesPopulate : function() {
            var details = Dom.get("embassyInvitesDetails");
            if(details) {
                var invites = this.invites,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<invites.length; i++) {
                    var obj = invites[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Invite = obj;
                    Dom.addClass(nUl, "embassyInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyAlliance");
                    nLi.innerHTML = obj.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Accept";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.InvitesAccept, {Self:this,Invite:obj,Line:nUl}, true);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Reject";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.InvitesReject, {Self:this,Invite:obj,Line:nUl}, true);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyMessage");
                    nLi.innerHTML = 'Reason:<input type="text" class="embassyActionMessage" />';
                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 170;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        InvitesAccept : function() {
            if(confirm(['Are you sure you want to accept the alliance invite from ', this.Invite.name,'?'].join(''))) {
                this.Self.service.accept_invite({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    invite_id:this.Invite.id,
                    message:(Sel.query('.embassyActionMessage', this.Line, true).value || "")
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.accept_invite.success");
                        this.Self.rpcSuccess(o);
                        var arr = this.Self.invites;
                        for(var i=0; i<arr.length; i++) {
                            if(arr[i].id == this.Invite.id) {
                                arr.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        
                        this.Self.alliance = o.result.alliance;
                        this.Self.isLeader = this.Self.alliance && this.Self.alliance.leader_id == Game.EmpireData.id;
                        this.Self.addTab(this.Self._getAllianceTab());
                        this.Self.addTab(this.Self._getMemberTab());
                        this.Self.removeTab(this.Self.createTab);
                        this.Self.MembersPopulate();
                        
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        InvitesReject : function() {
            if(confirm(['Are you sure you want to reject the alliance invite from ', this.Invite.name,'?'].join(''))) {                
                this.Self.service.reject_invite({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    invite_id:this.Invite.id,
                    message:(Sel.query('.embassyActionMessage', this.Line, true).value || "")
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.reject_invite.success");
                        this.Self.rpcSuccess(o);
                        var arr = this.Self.invites;
                        for(var i=0; i<arr.length; i++) {
                            if(arr[i].id == this.Invite.id) {
                                arr.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },

        //Alliance Admin
        UpdateAlliance : function() {
            this.service.update_alliance({
                session_id:Game.GetSession(""),
                building_id:this.building.id,
                params: {
                    description:Dom.get("embassyAllianceDesc").value,
                    forum_uri:Dom.get("embassyAllianceForums").value,
                    announcements:Dom.get("embassyAllianceAnnoucements").value
                }
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Embassy.update_alliance.success");
                    this.rpcSuccess(o);
                    Dom.get("embassyAllianceMessage").innerHTML = "Updated alliance info.";
                    var a = new Util.Anim(Dom.get("embassyAllianceMessage"), {opacity:{from:1,to:0}}, 3);
                    a.onComplete.subscribe(function(){
                        Dom.get("embassyAllianceMessage").innerHTML = "";
                        Dom.setStyle("embassyAllianceMessage", "opacity", 1);
                    });
                    a.animate();
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        LeaveAlliance : function() {
            if(confirm(['Are you sure you want to leave ', this.alliance.name,'?'].join(''))) {
                this.service.leave_alliance({
                    session_id:Game.GetSession(""),
                    building_id:this.building.id,
                    message:Dom.get("embassyAllianceLeaveReason").value
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.leave_alliance.success");
                        this.rpcSuccess(o);
                        delete this.alliance;
                        this.removeTab(this.allianceTab);
                        this.removeTab(this.memberTab);
                        if(this.sendTab) {
                            this.removeTab(this.sendTab);
                        }
                        this.addTab(this._getCreateTab());
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        DissolveAlliance : function() {
            if(confirm(['All Space Stations will be abandoned. Are you sure you want to dissolve ', this.alliance.name,'?'].join(''))) {
                this.service.dissolve_alliance({
                    session_id:Game.GetSession(""),
                    building_id:this.building.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.dissolve_alliance.success");
                        this.rpcSuccess(o);
                        delete this.alliance;
                        this.removeTab(this.allianceTab);
                        this.removeTab(this.memberTab);
                        if(this.sendTab) {
                            this.removeTab(this.sendTab);
                        }
                        this.addTab(this._getCreateTab());
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        //Alliance Inviting
        getPendingInvites : function(e) {
            if(e.newValue) {
                if(!this.embassySendTo){
                    this._createSendToSelect();
                }
                    
                Lacuna.Pulser.Show();
                this.service.get_pending_invites({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.get_pending_invites.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        this.pendingInvites = o.result.invites;
                        
                        this.PendingPopulate();
                    },
                    scope:this
                });
            }
        },
        PendingPopulate : function() {
            var details = Dom.get("embassySendDetails");
            if(details) {
                var pendingInvites = this.pendingInvites,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<pendingInvites.length; i++) {
                    var obj = pendingInvites[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Invite = obj;
                    Dom.addClass(nUl, "embassyInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyEmpire");
                    nLi.innerHTML = obj.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Withdraw";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.PendingWithdraw, {Self:this,Invite:obj,Line:nUl}, true);
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyMessage");
                    nLi.innerHTML = '<label>Reason:</label><input type="text" class="embassyPendingActionMessage" />';
                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 290;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        PendingWithdraw : function() {
            if(confirm(['Are you sure you want to withdraw the invite from ', this.Invite.name].join(''))) {
                this.Self.service.withdraw_invite({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    invite_id:this.Invite.id,
                    message:(Sel.query('.embassyPendingActionMessage', this.Line, true).value || "")
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.withdraw_invite.success");
                        this.Self.rpcSuccess(o);
                        var arr = this.Self.pendingInvites;
                        for(var i=0; i<arr.length; i++) {
                            if(arr[i].id == this.Invite.id) {
                                arr.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        SendInvite : function(){
            var inviteeId = this.embassySendTo._oTblSingleSelection && this.embassySendTo._oTblSingleSelection.Object.id || null;
            
            if(inviteeId) {
                this.service.send_invite({
                    session_id:Game.GetSession(""),
                    building_id:this.building.id,
                    invitee_id:inviteeId,
                    message:Dom.get("embassySendMessage").value
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.send_invite.success");
                        this.rpcSuccess(o);
                        
                        this.embassySendTo.ResetSelections();
                        Dom.get("embassySendMessage").value = "";
                        this.getPendingInvites({newValue:1});
                        
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        //Members 
        MembersPopulate : function() {
            var details = Dom.get("embassyMemberDetails");
            if(details && this.alliance) {
                var members = this.alliance.members,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<members.length; i++) {
                    var obj = members[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Member = obj;
                    Dom.addClass(nUl, "embassyInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"embassyEmpire");
                    nLi.innerHTML = obj.name;
                    Event.on(nLi, "click", this.EmpireInfo, obj.empire_id);
                    nUl.appendChild(nLi);

                    if(this.isLeader && this.alliance.leader_id != obj.empire_id) {
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"embassyAction");
                        var lbtn = document.createElement("button");
                        lbtn.setAttribute("type", "button");
                        lbtn.innerHTML = "Make Leader";
                        lbtn = nLi.appendChild(lbtn);
                        Event.on(lbtn, "click", this.MembersPromote, {Self:this,Member:obj,Line:nUl}, true);
                        var bbtn = document.createElement("button");
                        bbtn.setAttribute("type", "button");
                        bbtn.innerHTML = "Expel";
                        bbtn = nLi.appendChild(bbtn);
                        Event.on(bbtn, "click", this.MembersExpel, {Self:this,Member:obj,Line:nUl}, true);
                        nUl.appendChild(nLi);

                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"embassyMessage");
                        nLi.innerHTML = '<label>Reason:</label><input type="text" class="embassyMembersMessage" />';
                        nUl.appendChild(nLi);
                    }
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 170;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        EmpireInfo : function(e, id) {
            Lacuna.Info.Empire.Load(id);
        },
        MembersExpel : function() {
            if(confirm(['Are you sure you want to expel ', this.Member.name,' from the alliance?'].join(''))) {
                this.Self.service.expel_member({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    empire_id:this.Member.empire_id,
                    message:(Sel.query('.embassyMembersMessage', this.Line, true).value || "")
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.expel_member.success");
                        this.Self.rpcSuccess(o);
                        this.Self.alliance = o.result.alliance;
                        this.Self.MembersPopulate();
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        MembersPromote: function() {
            if(confirm(['Are you sure you want to transfer alliance control to ', this.Member.name,'?'].join(''))) {
                this.Self.service.assign_alliance_leader({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    new_leader_id:this.Member.empire_id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Embassy.assign_alliance_leader.success");
                        this.Self.rpcSuccess(o);
                        this.Self.alliance = o.result.alliance;
                        this.Self.isLeader = this.Self.alliance && this.Self.alliance.leader_id == Game.EmpireData.id;
                        this.Self.removeTab(this.Self.allianceTab);
                        this.Self.addTab(this.Self._getAllianceTab());
                        this.Self.removeTab(this.Self.memberTab);
                        this.Self.addTab(this.Self._getMemberTab());
                        this.Self.MembersPopulate();
                        this.Self.removeTab(this.Self.invitesTab);
                        this.Self.addTab(this.Self._getInvitesTab());
                        this.Self.removeTab(this.Self.sendTab);
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        }
    });
    
    Lacuna.buildings.Embassy = Embassy;

})();
YAHOO.register("embassy", YAHOO.lacuna.buildings.Embassy, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/embassy.js","/building")
},{"buffer":71,"oMfpAn":75}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.EnergyReserve == "undefined" || !YAHOO.lacuna.buildings.EnergyReserve) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var EnergyReserve = function(result){
        EnergyReserve.superclass.constructor.call(this, result);

        this.service = Game.Services.Buildings.EnergyReserve;
    };

    YAHOO.lang.extend(EnergyReserve, YAHOO.lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getDumpTab()];
        },
        _getDumpTab : function() {
            this.dumpTab = new YAHOO.widget.Tab({ label: "Dump", contentEl: this.DumpGetDisplay(this.result.dump)});
            return this.dumpTab;
        },
        DumpGetDisplay : function() {
            var ul = document.createElement('ul'),
                li = document.createElement('li'),
                nLi = li.cloneNode(false);
            nLi.innerHTML = 'Convert energy into waste.';
            ul.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/energy.png" class="smallEnergy" /></span>';
            input = document.createElement("input");
            input.id = 'dumpAmount';
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.DumpValueChange, this, true);
            ul.appendChild(nLi);

        var div = document.createElement("div");
            Dom.addClass(div, 'dumpTab');
            div.appendChild(ul);

            var form = document.createElement('form');
            btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Dump";
            btn = form.appendChild(btn);
            Event.on(btn, "click", this.Dump, this, true);

            div.appendChild(form);

            var msg = document.createElement('div');
            msg.id = "dumpMessage";
            div.appendChild(msg);

            return div;
        },
        Dump : function(e) {
            var planet = Game.GetCurrentPlanet();
            var building = this.building;
            var type = "energy";
            if(building) {
                var amount = Dom.get("dumpAmount").value*1;
                if(amount > planet.energy_stored) {
                    Dom.get("dumpMessage").innerHTML = "Can only convert " + type + " you have stored.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else if( amount <= 0 ) {
                    Dom.get("dumpMessage").innerHTML = "You must specify an amount greater than zero.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else {
                    Lacuna.Pulser.Show();
                    this.service.dump({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        amount:amount
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "EnergyReserve.Dump.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            if(this.dumpTab){
                                var ce = this.dumpTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                ce.appendChild(this.DumpGetDisplay(o.result.dump));
                                Dom.get("dumpMessage").innerHTML = "Successfully converted " + amount + " " + type + " to waste.";
                                Lib.fadeOutElm("dumpMessage");
                            }
                        },
                        scope:this
                    });
                }
            }
        }

    });

    YAHOO.lacuna.buildings.EnergyReserve = EnergyReserve;

})();
YAHOO.register("energyreserve", YAHOO.lacuna.buildings.EnergyReserve, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/energyReserve.js","/building")
},{"buffer":71,"oMfpAn":75}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Entertainment == "undefined" || !YAHOO.lacuna.buildings.Entertainment) {
    
(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Entertainment = function(result){
        Entertainment.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Entertainment;
        this.lotteryAllVotedMessage = "You have voted as many times as you could today.  Please check back tomorrow for your next chance!";
    };
    
    YAHOO.lang.extend(Entertainment, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getLotteryTab(),this._getDuckTab()];
        },
        _getLotteryTab : function() {
            var tab = new YAHOO.widget.Tab({ label: "Lottery", content: ['<p id="entertainmentLotteryMessage">Welcome to the Lacuna Lottery! Get entered in the Expanse\'s daily lottery for a chance to win 10 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />! Each link clicked below gives you one extra chance to win. Links will be removed after voting and return tomorrow.</p><div><ul id="entertainmentLotteryList"></ul></div>'].join('')});
            tab.subscribe("activeChange", this.LotteryView, this, true);
            return tab;
        },
        _getDuckTab : function() {
            var tab = new YAHOO.widget.Tab({ label: "Duck", content: [
                '<div id="entertainmentTotalQuacks"></div>',
                '<div><button type="button" id="entertainmentQuack">Quack</button></div>',
                '<hr />',
                '<div><pre id="entertainmentDuckMessage"></pre></div>'
            ].join('')});
            Event.on("entertainmentQuack", "click", this.Quack, this, true);
            this.subscribe("onLoad", this.SetQuacks, this, true);
            return tab;
        },
        LotteryView : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                this.service.get_lottery_voting_options({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        this.LotteryPopulate(o.result.options);
                    },
                    scope:this
                });
            }
        },
        LotteryPopulate : function(options) {
            var details = Dom.get("entertainmentLotteryList");
            if(details) {
                var li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                Dom.setStyle(details.parentNode,"height","");
                Dom.setStyle(details.parentNode,"overflow-y","");
                
                if(options.length == 0) {
                    li.innerHTML = this.lotteryAllVotedMessage;
                    details.appendChild(li);
                }
                else {
                    for(var i=0; i<options.length; i++) {
                        var vote = options[i],
                            nLi = li.cloneNode(false);
                        nLi.innerHTML = ['<a href="',vote.url,'" target="_blank">',vote.name,'</a>'].join('');
                        Event.on(nLi, "click", this.LotteryVoted, this);
                        details.appendChild(nLi);
                    }
                    //wait for tab to display first
                    setTimeout(function() {
                        var Ht = Game.GetSize().h - 200;
                        if(Ht > 300) { Ht = 300; }
                        Dom.setStyle(details.parentNode,"height",Ht + "px");
                        Dom.setStyle(details.parentNode,"overflow-y","auto");
                    },10);
                }
            }
        },
        LotteryVoted : function(e, oSelf) {
            var li = Event.getTarget(e);
            if(li) {
                Event.removeListener(li, "click");
                var ul = li.parentNode;
                ul.removeChild(li);
                
                if(ul.children && ul.children.length == 0) {
                    ul.innerHTML = ['<li>',this.lotteryAllVotedMessage,'</li>'].join('');
                }
            }
        },
        
        SetQuacks : function() {
            Dom.get("entertainmentTotalQuacks").innerHTML = ['There have been a total of ', this.result.ducks_quacked || 0, ' ducks quacked.'].join('');
        },
        Quack : function() {
            Lacuna.Pulser.Show();
            this.service.duck_quack({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.result.ducks_quacked++;
                    this.SetQuacks();
                    Dom.get("entertainmentDuckMessage").innerHTML = o.result;
                },
                scope:this
            });
        }
    });
    
    Lacuna.buildings.Entertainment = Entertainment;

})();
YAHOO.register("Entertainment", YAHOO.lacuna.buildings.Entertainment, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/entertainment.js","/building")
},{"buffer":71,"oMfpAn":75}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.FoodReserve == "undefined" || !YAHOO.lacuna.buildings.FoodReserve) {
    
(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var FoodReserve = function(result){
        FoodReserve.superclass.constructor.call(this, result);

        this.service = Game.Services.Buildings.FoodReserve;
    };

    YAHOO.lang.extend(FoodReserve, YAHOO.lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getFoodTab(),this._getDumpTab()];
        },
        _getFoodTab : function() {
            var stored = this.result.food_stored;
            return new YAHOO.widget.Tab({ label: "Food", content: [
                '<div class="yui-g buildingDetailsExtra">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><label>Algae</label><span class="buildingDetailsNum">',stored.algae,'</span></li>',
                '            <li><label>Apple</label><span class="buildingDetailsNum">',stored.apple,'</span></li>',
                '            <li><label>Bean</label><span class="buildingDetailsNum">',stored.bean,'</span></li>',
                '            <li><label>Beetle</label><span class="buildingDetailsNum">',stored.beetle,'</span></li>',
                '            <li><label>Bread</label><span class="buildingDetailsNum">',stored.bread,'</span></li>',
                '            <li><label>Burger</label><span class="buildingDetailsNum">',stored.burger,'</span></li>',
                '            <li><label>Cheese</label><span class="buildingDetailsNum">',stored.cheese,'</span></li>',
                '            <li><label>Chip</label><span class="buildingDetailsNum">',stored.chip,'</span></li>',
                '            <li><label>Cider</label><span class="buildingDetailsNum">',stored.cider,'</span></li>',
                '            <li><label>Corn</label><span class="buildingDetailsNum">',stored.corn,'</span></li>',
                '            <li><label>Fungus</label><span class="buildingDetailsNum">',stored.fungus,'</span></li>',
                '        </ul>',
                '    </div>',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><label>Lapis</label><span class="buildingDetailsNum">',stored.lapis,'</span></li>',
                '            <li><label>Meal</label><span class="buildingDetailsNum">',stored.meal,'</span></li>',
                '            <li><label>Milk</label><span class="buildingDetailsNum">',stored.milk,'</span></li>',
                '            <li><label>Pancake</label><span class="buildingDetailsNum">',stored.pancake,'</span></li>',
                '            <li><label>Pie</label><span class="buildingDetailsNum">',stored.pie,'</span></li>',
                '            <li><label>Potato</label><span class="buildingDetailsNum">',stored.potato,'</span></li>',
                '            <li><label>Root</label><span class="buildingDetailsNum">',stored.root,'</span></li>',
                '            <li><label>Shake</label><span class="buildingDetailsNum">',stored.shake,'</span></li>',
                '            <li><label>Soup</label><span class="buildingDetailsNum">',stored.soup,'</span></li>',
                '            <li><label>Syrup</label><span class="buildingDetailsNum">',stored.syrup,'</span></li>',
                '            <li><label>Wheat</label><span class="buildingDetailsNum">',stored.wheat,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
        },
        _getDumpTab : function() {
            this.resources = this.result.food_stored;
            this.dumpTab = new YAHOO.widget.Tab({ label: "Dump", contentEl: this.DumpGetDisplay(this.result.dump)});
            this.dumpTab.subscribe("activeChange", this.DumpGetDisplay, this, true);
            return this.dumpTab;
        },
        DumpGetDisplay : function() {
            var div = document.createElement("div"),
                resources = [],
                rKey;

            for(rKey in this.resources) {
                resources.push(rKey);
            }
            resources = resources.sort();

            if( resources.length > 0 ) {
                var ul = document.createElement('ul'),
                    li = document.createElement('li'),
                    nLi = li.cloneNode(false);
                nLi.innerHTML = 'Convert food into waste.';
                ul.appendChild(nLi);

                nLi = li.cloneNode(false);
                nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/food.png" class="smallFood" /></span>';

                var sel = document.createElement("select"),
                    opt = document.createElement("option");
                for(var i=0; i<resources.length; i++) {
                    rKey = resources[i];
                    if(this.resources.hasOwnProperty(rKey) && this.resources[rKey] > 0) {
                        var nOpt = opt.cloneNode(false);
                        nOpt.value = rKey;
                        nOpt.innerHTML = [rKey, ' (', this.resources[rKey], ')'].join('');
                        sel.appendChild(nOpt);
                    }
                }
                if( sel.options.length == 0 ) {
                    div.innerHTML = "No food to dump.";
                    return div;
                }
                sel.id = "type";
                nLi.appendChild(sel);

                input = document.createElement("input");
                input.id = 'dumpAmount';
                input.type = "text";
                input.value = 0;
                input = nLi.appendChild(input);
                ul.appendChild(nLi);

                Dom.addClass(div, 'dumpTab');
                div.appendChild(ul);

                var form = document.createElement('form');
                btn = document.createElement("button");
                btn.setAttribute("type", "button");
                btn.innerHTML = "Dump";
                btn = form.appendChild(btn);
                Event.on(btn, "click", this.Dump, this, true);

                div.appendChild(form);

                var msg = document.createElement('div');
                msg.id = "dumpMessage";
                div.appendChild(msg);

            }
            else {
                div.innerHTML = "No food to dump.";
            }

            return div;
        },
        Dump : function(e) {
            var building = this.building;
            if(building) {
                var sel = Dom.get("type");
                var type = sel[sel.selectedIndex].value;
                var amount = Dom.get("dumpAmount").value*1;
                if(amount > this.resources[type]) {
                    Dom.get("dumpMessage").innerHTML = "Can only convert " + type + " you have stored.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else if(amount <= 0) {
                    Dom.get("dumpMessage").innerHTML = "You must specify an amount greater than zero.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else {
                    Lacuna.Pulser.Show();
                    this.service.dump({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        type:type,
                        amount:amount
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "FoodReserve.Dump.success");
                            this.rpcSuccess(o);
                            
                            if(this.dumpTab){
                                var ce = this.dumpTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                this.resources[type] -= amount;
                                ce.appendChild(this.DumpGetDisplay(o.result.dump));
                                Dom.get("dumpMessage").innerHTML = "Successfully converted " + amount + " " + type + " to waste.";
                                Lib.fadeOutElm("dumpMessage");
                            }
                            Lacuna.Pulser.Hide();
                        },
                        scope:this
                    });
                }
            }
        }

    });
    
    YAHOO.lacuna.buildings.FoodReserve = FoodReserve;

})();
YAHOO.register("foodreserve", YAHOO.lacuna.buildings.FoodReserve, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/foodReserve.js","/building")
},{"buffer":71,"oMfpAn":75}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.GeneticsLab == "undefined" || !YAHOO.lacuna.buildings.GeneticsLab) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
    var GeneticsLab = function(result){
        GeneticsLab.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.GeneticsLab;
    };
    
    Lang.extend(GeneticsLab, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getLabTab(),this._getRenameTab()];
        },
        _getLabTab : function() {
            this.tab = new YAHOO.widget.Tab({ label: "Lab", content: [
                '<table class="tleTable">',
                '    <tr>',
                '        <th>Survival Chance</th><th>Graft Success</th><th>Essentia Cost</th>',
                '    </tr>',
                '    <tr>',
                '        <td><span id="geneticsLabSurvival"></span>%</td><td><span id="geneticsLabGraft"></span>%</td><td id="geneticsLabCost"></td>',
                '    </tr>',
                '</table>',
                '<div id="geneticsLabMessage" style="border-top:1px solid #52acff;margin-top:5px;"></div>',
                '<div id="geneticsLabDisplay" class="yui-g" style="display:none;margin:5px 0;">',
                '    <div class="yui-u first" style="width:39.1%">',
                '        <div style="border-bottom:1px solid #52acff;margin-bottom:5px;font-weight:bold;"><label>Available Spies</label></div>',
                '        <div style="overflow:auto;height:150px;">',
                '            <ul id="geneticsLabSpies">',
                '            </ul>',
                '        </div>',
                '    </div>',
                '    <div class="yui-u" style="width:59.1%;">',
                '        <div id="geneticsLabExperimentMessage" style="display:none;"></div>',
                '        <div id="geneticsLabDetailsContainer" style="display:none;">',
                '            <div style="border-bottom:1px solid #52acff;margin-bottom:5px;font-weight:bold;"><label><span id="geneticsLabSpyName"></span> Details</label></div>',
                '            <label for="geneticsLabAffinities" style="font-weight:bold;">Graft:</label><select id="geneticsLabAffinities"></select>',
                '            <button type="button" id="geneticsLabRunExperiement">Run Experiment</button>',
                '            <div style="overflow:auto;height:120px;border:1px solid #52acff;">',
                '                <ul id="geneticsLabDetails">',
                '                </ul>',
                '            </div>',
                '        </div>',
                '    </div>',
                '</div>'
            ].join('')});
            this.tab.subscribe("activeChange", this.prepareExperiment, this, true);
            
            Event.delegate("geneticsLabSpies", "click", this.selectSpyForExperiment, "li", this, true);
            Event.on("geneticsLabRunExperiement", "click", this.runExperiment, this, true);
            
            return this.tab;
        },
       _getRenameTab : function() {
            var div = document.createElement("div");
            Dom.addClass(div, 'speciesRenameTab');
            div.innerHTML = [
                '<p>',
                '    <div>Current species name: <span id="currentSpeciesName"></span></div>',
                '    <div>Current species desc: <span id="currentSpeciesDesc"></span></div>',
                '</p>',
                '<hr />',
                '<fieldset>',
                '   <legend>Change Species Name</legend>',
                '   <table>',
                '     <tr valign="bottom"><td><label for="newSpeciesName">New species name:</label></td><td align="left"><input type="text" id="newSpeciesName"></input></td></tr>',
                '     <tr valign="top"><td><label for="newSpeciesDesc">New species description:</label></td><td align="left"><textarea id="newSpeciesDesc" cols="47"></textarea></td></tr>',
                '   </table>',
                '   <div><button id="changeSpeciesName">Change Name</button></div>',
                '</fieldset>'
            ].join('');
            this.tab = new YAHOO.widget.Tab({ label: "Rename Species", contentEl: div});
            this.tab.subscribe("activeChange", this.ShowSpecies, this, true);

            Event.on('changeSpeciesName', "click", this.RenameSpecies, this, true);

            return this.tab;
        },
        ShowSpecies : function(e) {
            Game.Services.Empire.view_public_profile({
                session_id:Game.GetSession(),
                empire_id:Game.EmpireData.id
            }, {
                success:function(o){
                    Lacuna.Pulser.Hide();
                    var profile = o.result.profile;
                    Dom.get('currentSpeciesDesc').innerHTML = profile.description;
                    Dom.get('currentSpeciesName').innerHTML = profile.species;
                },
                scope:this
            });
        },
        RenameSpecies : function(e) {
            Event.stopEvent(e);
            var btn = Event.getTarget(e);
            var newName = Dom.get('newSpeciesName').value;
            var newDesc = Dom.get('newSpeciesDesc').value.substr(0,1024);
            Lacuna.Pulser.Show();
            btn.disabled = true;
            this.service.rename_species({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                params: {
                    name: newName,
                    description: newDesc
                }
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "GeneticsLab.rename_species.success");
                    btn.disabled = false;
                    Dom.get('newSpeciesName').value = '';
                    Dom.get('newSpeciesDesc').value = '';
                    Dom.get('currentSpeciesName').innerHTML = newName;
                    Dom.get('currentSpeciesDesc').innerHTML = newDesc;
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    alert('Your species name has been changed!');
                },
                failure : function(o){
                    btn.disabled = false;
                },
                scope:this
            });
        },
        
        getSpeciesStatList : function(stat) {
            var frag = document.createDocumentFragment(),
                li = document.createElement('li');
            
            var nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Name</label>',
                '<span>', stat.name, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Description</label>',
                '<span>', stat.description, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Habitable Orbits</label>',
                '<span>', stat.min_orbit,
                stat.max_orbit > stat.min_orbit ? ' to '+ stat.max_orbit : '',
                '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Manufacturing</label>',
                '<span>', stat.manufacturing_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Deception</label>',
                '<span>', stat.deception_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Research</label>',
                '<span>', stat.research_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Management</label>',
                '<span>', stat.management_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Farming</label>',
                '<span>', stat.farming_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Mining</label>',
                '<span>', stat.mining_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Science</label>',
                '<span>', stat.science_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Environmental</label>',
                '<span>', stat.environmental_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Political</label>',
                '<span>', stat.political_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Trade</label>',
                '<span>', stat.trade_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Growth</label>',
                '<span>', stat.growth_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);
            
            return frag;
        },
        prepareExperiment : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                delete this.currentSpy;
                
                this.service.prepare_experiment({
                    session_id:Game.GetSession(),
                    building_id:this.building.id
                }, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        if(o.result.can_experiment == 1) {
                            if(o.result.grafts.length > 0) {
                                Dom.get("geneticsLabMessage").innerHTML = "";
                                Dom.setStyle("geneticsLabDisplay","display","");
                            }
                            
                            this.updateDisplay(o.result);
                        }
                        else {
                            Dom.get("geneticsLabMessage").innerHTML = "Unable to currently run experiments.  You can only have 1 graft per level of the Genetics Lab.";
                        }
                    },
                    scope:this
                });    
            }
        },
        runExperiment : function() {
            if(this.currentSpy) {
                Lacuna.Pulser.Show();
                
                this.service.run_experiment({
                    session_id:Game.GetSession(),
                    building_id:this.building.id,
                    spy_id:this.currentSpy,
                    affinity:Lib.getSelectedOptionValue("geneticsLabAffinities")
                }, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        Dom.get("geneticsLabExperimentMessage").innerHTML = o.result.experiment.message;
                        Dom.setStyle("geneticsLabExperimentMessage","display","");

                        Dom.setStyle("geneticsLabDetailsContainer", "display", "none");
                        this.updateDisplay(o.result);
                    },
                    scope:this
            });
            }
        },
        selectSpyForExperiment : function(e, matchedEl, container) {
            var obj = matchedEl.Object,
                sel = Dom.get("geneticsLabAffinities"),
                details = Dom.get("geneticsLabDetails"),
                option = document.createElement("option");
            
            Dom.removeClass(Sel.query("li.selected", "geneticsLabSpies"),"selected");
            Dom.addClass(matchedEl,"selected");
            Dom.get("geneticsLabSpyName").innerHTML = ['[',obj.species.name,'] ',obj.spy.name].join('');
            Dom.setStyle("geneticsLabExperimentMessage","display","none");
            Dom.setStyle("geneticsLabDetailsContainer","display","");
            this.currentSpy = obj.spy.id;
            sel.options.length = 0;
            for(var a=0; a<obj.graftable_affinities.length; a++) {
                var nOpt = option.cloneNode(false);
                nOpt.value = obj.graftable_affinities[a];
                nOpt.innerHTML = obj.graftable_affinities[a].titleCaps("_"," ");
                sel.appendChild(nOpt);
            }
            details.innerHTML = "";
            details.appendChild(this.getSpeciesStatList(obj.species));
        },
        updateDisplay : function(exp) {
            Dom.get("geneticsLabSurvival").innerHTML = exp.survival_odds;
            Dom.get("geneticsLabGraft").innerHTML = exp.graft_odds;
            Dom.get("geneticsLabCost").innerHTML = exp.essentia_cost;
            Dom.removeClass(Sel.query("li.selected", "geneticsLabSpies"),"selected");
            if(exp.grafts.length) {
                var grafts = exp.grafts;
                //sort by species name then spy name
                grafts.sort(function(a,b) {
                    if(a.species.name > b.species.name) {
                        return 1;
                    }
                    else if(a.species.name < b.species.name) {
                        return -1;
                    }
                    else if(a.spy.name > b.spy.name) {
                        return 1;
                    }
                    else if(a.spy.name < b.spy.name) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
                
                var li = document.createElement("li"),
                    ul = Dom.get("geneticsLabSpies");
                ul.innerHTML = "";
                for(var s=0; s<grafts.length; s++) {
                    var obj = grafts[s],
                        nLi = li.cloneNode(false);
                    nLi.Object = obj;
                    Dom.setStyle(nLi, "prisoner");
                    nLi.innerHTML = ['[',obj.species.name,'] ',obj.spy.name].join('');
                    ul.appendChild(nLi);
                }
            }
            else {
                var expMsg = Dom.get("geneticsLabExperimentMessage").innerHTML;
                if(expMsg) {
                    Dom.get("geneticsLabMessage").innerHTML = expMsg + "  No spies available to run experiments on.";
                }
                else {
                    Dom.get("geneticsLabMessage").innerHTML = "No spies available to run experiments on.";
                }
                Dom.setStyle("geneticsLabDisplay","display","none");
            }
        }
        
    });
    
    YAHOO.lacuna.buildings.GeneticsLab = GeneticsLab;

})();
YAHOO.register("geneticslab", YAHOO.lacuna.buildings.GeneticsLab, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/geneticsLab.js","/building")
},{"buffer":71,"oMfpAn":75}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.IntelTraining == "undefined" || !YAHOO.lacuna.buildings.IntelTraining) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var IntelTraining = function(result){
        IntelTraining.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.IntelTraining;
    };
    
    Lang.extend(IntelTraining, Lacuna.buildings.Building, {
        destroy : function() {
            IntelTraining.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTrainTab()];
        },
        _getTrainTab : function() {
            var spies = this.result.spies;
            this.trainTab = new YAHOO.widget.Tab({ label: "Train Spies", content: [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><span style="font-weight:bold;">Spies Training : </span> <span id="spiesCurrent">',spies.in_training,'</span></li>',
                '            <li><span style="font-weight:bold;">Points per hour : </span> <span id="pointsper">',spies.points_per,'</span></li>',
                '            <li><span style="font-weight:bold;">Max Points : </span> <span id="pointsper">',spies.max_points,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            
            return this.trainTab;
        }
        
    });
    
    YAHOO.lacuna.buildings.IntelTraining = IntelTraining;

})();
YAHOO.register("IntelTraining", YAHOO.lacuna.buildings.IntelTraining, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/intelTraining.js","/building")
},{"buffer":71,"oMfpAn":75}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Intelligence == "undefined" || !YAHOO.lacuna.buildings.Intelligence) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Intelligence = function(result){
        Intelligence.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Intelligence;
    };
    
    Lang.extend(Intelligence, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.pager) {
                this.pager.destroy();
            }
            Intelligence.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTrainTab(), this._getSpiesTab()];
        },
        _getTrainTab : function() {
            var spies = this.result.spies;
            this.trainTab = new YAHOO.widget.Tab({ label: "Train Spies", content: [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><span style="font-weight:bold;">Spies:</span> <span id="spiesCurrent">',spies.current,'</span> of ',spies.maximum,'</li>',
                '            <li id="spiesTrainOptions"><span style="font-weight:bold;">Train:</span> <select id="spiesTrainNumber"></select> new spies. <button type="button" id="spiesTrain">Train</button></li>',
                '        </ul>',
                '    </div>',
                '    <div class="yui-u">',
                '        <ul>',
                '            <li>Training Costs</li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span><span class="buildingDetailsNum">',spies.training_costs.food,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span><span class="buildingDetailsNum">',spies.training_costs.ore,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span><span class="buildingDetailsNum">',spies.training_costs.water,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span><span class="buildingDetailsNum">',spies.training_costs.energy,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span><span class="buildingDetailsNum">',spies.training_costs.waste,'</span></li>',
                '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/time.png" title="Time" class="smallTime" /></span><span class="buildingDetailsNum">',Lib.formatTime(spies.training_costs.time),'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            this.trainTab.subscribe("activeChange", this.trainView, this, true);
            var btn = Sel.query("button", this.trainTab.get("contentEl"), true);
            if(btn) {
                Event.on(btn, "click", this.SpyTrain, this, true);
            }
            
            return this.trainTab;
        },
        _getSpiesTab : function() {
            this.spiesTab = new YAHOO.widget.Tab({ label: "Spies", content: [
                '<div>',
                '    <p id="spiesSubsidizeOffer" style="display:none;">You may subsidize training for 1 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /> per spy. <button type="button" id="spiesSubsidize">Subsidize</button></p>',
                '    <div>',
                '        <div id="spiesDetails">',
                '        </div>',
                '    </div>',
                '    <div id="spyPaginator"></div>',
                '</div>'
            ].join('')});
            this.spiesTab.subscribe("activeChange", this.spiesView, this, true);

            Event.on("spiesSubsidize", "click", this.Subsidize, this, true);
                    
            return this.spiesTab;
        },
        
        trainView : function(e) {
            var spies = this.result.spies;
            var canTrain = spies.maximum - spies.current;
            Dom.get("spiesCurrent").innerHTML = spies.current;
            if (canTrain > 0) {
                Dom.setStyle('spiesTrainOptions', 'display', '');
                var elNumSelect = Dom.get('spiesTrainNumber');
                if (canTrain > 5) {
                    canTrain = 5;
                }
                var currentNum = elNumSelect.children.length;
                for (var i = canTrain; i < currentNum; i++) {
                    elNumSelect.removeChild(elNumSelect.lastChild);
                }
                for (var n = currentNum + 1; n <= canTrain; n++) {
                    var elOption = document.createElement('option');
                    elOption.value = n;
                    elOption.innerHTML = n;
                    elNumSelect.appendChild(elOption);
                }
            }
            else {
                Dom.setStyle('spiesTrainOptions', 'display', 'none');
            }

        },
        spiesView : function(e) {
            if(e.newValue) {
                if(!this.spies) {
                    Lacuna.Pulser.Show();
                    this.service.view_spies({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            YAHOO.log(o, "info", "Intelligence.Intelligence.view_spies.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.spies = o.result;
                            this.pager = new Pager({
                                rowsPerPage : 30,
                                totalRecords: o.result.spy_count,
                                containers  : 'spyPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.pager.subscribe('changeRequest',this.SpyHandlePagination, this, true);
                            this.pager.render();
                            
                            this.SpyPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.SpyPopulate();
                }
            }
        },

        SpyInfo : function(spy) {
            var assign = spy.possible_assignments,
                div = document.createElement("div"),
                ul = document.createElement("ul"),
                li = document.createElement("li"),
                isTraining;
            var nDiv = div.cloneNode(false),
                nUl = ul.cloneNode(false),
                nLi = li.cloneNode(false);

            Dom.addClass(nDiv, "spyInfo");
            nDiv.id = 'spy' + spy.id;
            Dom.addClass(nUl, "clearafter");

            Dom.addClass(nLi,"spyName");
            nLi.innerHTML = spy.name;
            nUl.appendChild(nLi);
            Event.on(nLi, "click", this.SpyName, {Self:this,Spy:spy,el:nLi}, true);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyAssignedTo");
            nLi.innerHTML = '<label>Assigned To:</label> <a class="starmap_link" href="#' + spy.assigned_to.x + 'x' + spy.assigned_to.y + '">' + spy.assigned_to.name + '</a>';
            Event.delegate(nLi, "click", this.handleStarmapLink, "a.starmap_link", this, true);
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyAssignment");

            var sel;
            if(spy.is_available && spy.assignment != 'Mercenary Transport' ) {
                sel = document.createElement("select");
                var opt = document.createElement("option"),
                    btn = document.createElement("button");
                for(var a=0; a<assign.length; a++) {
                    var job = assign[a];
                    nOpt = opt.cloneNode(false);
                    nOpt.value = job.task;
                    nOpt.innerHTML = [job.task, ' - Skill: ', job.skill.titleCaps('_',''), ' - Recovery: ', Lib.formatTime(job.recovery)].join('');
                    if(spy.assignment == job.task) { nOpt.selected = true; sel.currentAssign = job.task; }
                    sel.appendChild(nOpt);
                }
                Event.on(sel, "change", this.SpyAssignChange);

                nLi.appendChild(sel);

                btn.setAttribute("type", "button");
                btn.innerHTML = "Assign";
                Dom.setStyle(btn,"display","none");
                Event.on(btn, "click", this.SpyAssign, {Self:this,Assign:sel,Id:spy.id,Line:nDiv}, true);
                sel.Button = nLi.appendChild(btn);
            }
            else {
                nLi.innerHTML = spy.assignment;
                if(!isTraining) {
                    isTraining = spy.assignment == "Training";
                }
            }

            // Add mission results if they exist
            if(spy.mission) {
                var elem = sel ? sel : nLi;
                var result = document.createElement("div");
                Dom.setStyle(result, "display", "none");
                Dom.addClass(result, 'spyAssignResult');
                var result_text = document.createElement("span");
                var result_link = document.createElement("a");
                result_link.href = "#";
                result_link.innerHTML = "View Report";
                Event.on(result_link, "click", this.SpyShowMessage, {Self:this,ResultLink:result_link,Id:spy.id,Line:nDiv}, true);
                Dom.setStyle(result_link, "display", "none");

                elem.ResultText = result.appendChild(result_text);
                elem.ResultLink = result.appendChild(result_link);
                elem.Results = nLi.appendChild(result);

                var mission = spy.mission;
                elem.ResultText.innerHTML = "Mission " + mission.result + (
                    mission.reason ? ": " + mission.reason
                        : ".");
                Dom.setStyle(elem.Results, "display", "block");
                if (mission.message_id) {
                    elem.ResultLink.MessageId = mission.message_id;
                    Dom.setStyle(elem.ResultLink, "display", "inline");
                }
                else {
                    Dom.setStyle(elem.ResultLink, "display", "none");
                }
            }

            nUl.appendChild(nLi);

            nDiv.appendChild(nUl);
            nUl = ul.cloneNode(false);
            Dom.addClass(nUl, "clearafter");

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyLevel");
            nLi.innerHTML = "<label>Level:</label>"+spy.level;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyOffense");
            nLi.innerHTML = "<label>Offense:</label>"+spy.offense_rating;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyDefense");
            nLi.innerHTML = "<label>Defense:</label>"+spy.defense_rating;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyAvailableWhen");
            nLi.innerHTML = "<label>Available:</label>"+(spy.is_available ? 'Now' : Lib.formatServerDate(spy.available_on));
            nUl.appendChild(nLi);

            nDiv.appendChild(nUl);
            nUl = ul.cloneNode(false);
            Dom.addClass(nUl, "clearafter");

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyIntel");
            nLi.innerHTML = "<label>Intel:</label>"+spy.intel;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyMayhem");
            nLi.innerHTML = "<label>Mayhem:</label>"+spy.mayhem;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyPolitics");
            nLi.innerHTML = "<label>Politics:</label>"+spy.politics;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyTheft");
            nLi.innerHTML = "<label>Theft:</label>"+spy.theft;
            nUl.appendChild(nLi);

            var mission_count = spy.mission_count;
            nDiv.appendChild(nUl);
            nUl = ul.cloneNode(false);
            Dom.addClass(nUl, "clearafter");

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyMissionCounts");
            nLi.innerHTML = "<label>Mission Count</label>";
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyOffensiveMissions");
            nLi.innerHTML = "<label>Offensive:</label>"+mission_count.offensive;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyDefensiveMissions");
            nLi.innerHTML = "<label>Defensive:</label>"+mission_count.defensive;
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyTotalMissions");
            nLi.innerHTML = "<label>Total:</label>"+(parseInt(mission_count.defensive,10)+parseInt(mission_count.offensive,10));
            nUl.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"spyBurn");
            var bbtn = document.createElement("button");
            bbtn.setAttribute("type", "button");
            bbtn.innerHTML = "Burn";
            bbtn = nLi.appendChild(bbtn);
            nUl.appendChild(nLi);

            nDiv.appendChild(nUl);

            Event.on(bbtn, "click", this.SpyBurn, {Self:this,Spy:spy,Line:nDiv}, true);

            return [nDiv, isTraining];
        },
        SpyPopulate : function() {
            var details = Dom.get("spiesDetails");
            if(details) {
                var spies = this.spies.spies,
                    nDiv,
                    isTraining;
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                Dom.setStyle(details.parentNode,"height","");
                Dom.setStyle(details.parentNode,"overflow-y","");
                        
                for(var i=0; i<spies.length; i++) {
                    var ret = this.SpyInfo( spies[i] );
                    nDiv = ret[0];
                    if (ret[1]) {
                        isTraining = true;
                    }
                    details.appendChild(nDiv);
                }
                
                if(isTraining) {
                    Dom.get("spiesSubsidize").disabled = false;
                    Dom.setStyle("spiesSubsidizeOffer", "display", "");
                }
                else {
                    Dom.get("spiesSubsidize").disabled = true;
                    Dom.setStyle("spiesSubsidizeOffer", "display", "none");
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 150;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        handleStarmapLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)x(-?\d+)$/);
            Game.StarJump({x:res[1],y:res[2]});
        },
        SpyShowMessage : function () {
            var message_id = this.ResultLink.MessageId;
            if (message_id) {
                Lacuna.Messaging.showMessage(message_id);
            }
        },
        SpyHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_spies({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Intelligence.SpyHandlePagination.view_spies.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.spies = o.result;
                    this.SpyPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pager.setState(newState);
        },
        SpyAssignChange : function() {
            var btn = this.Button,
                defVal = this.currentAssign,
                selVal = this[this.selectedIndex].value;
            if(btn) {
                Dom.setStyle(btn, "display", defVal != selVal ? "" : "none");
            }
        },
        SpyAssign : function() {
            Lacuna.Pulser.Show();
            var assign = this.Assign[this.Assign.selectedIndex].value;
            
            this.Self.service.assign_spy({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                spy_id:this.Id,
                assignment:assign
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Intelligence.SpyAssign.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    //delete this.Self.spies; /* Can't delete it, we need it later */
                    var spy = o.result.spy;
                    spy.assignment = assign;
                    spy.mission = o.result.mission;
                    var spies = this.Self.spies.spies;
                    for(var i=0; i<spies.length; i++) {
                        if(spy.id == spies[i].id) {
                            spies[i] = spy;
                            break;
                        }
                    }
                    this.Self.spies.spies = spies;
                    var ret = this.Self.SpyInfo(spy);
                    //Dom.get('spiesDetails').replaceChild(ret[0], Dom.get('spy' + spy.id));
                    this.Line.parentNode.insertBefore(ret[0], this.Line);
                    var ol = this.Line.parentNode.removeChild(this.Line);
                    Event.purgeElement(ol);
                },
                failure : function(o){
                    this.Assign.selectedIndex = this.Assign.defaultIndex;
                },
                scope:this
            });
        },
        SpyBurn : function() {
            if(confirm(["Are you sure you want to Burn ",this.Spy.name,"?"].join(''))) {
                Lacuna.Pulser.Show();
                
                this.Self.service.burn_spy({
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    spy_id:this.Spy.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Intelligence.SpyBurn.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        var spies = this.Self.spies.spies;
                        for(var i=0; i<spies.length; i++) {
                            if(spies[i].id == this.Spy.id) {
                                spies.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        this.Self.result.spies.current = (this.Self.result.spies.current*1) - 1;
                    },
                    scope:this
                });
            }
        },
        SpyName : function() {
            this.el.innerHTML = "";
            
            var inp = document.createElement("input"),
                bSave = document.createElement("button"),
                bCancel = bSave.cloneNode(false);
            inp.type = "text";
            inp.value = this.Spy.name;
            this.Input = inp;
            bSave.setAttribute("type", "button");
            bSave.innerHTML = "Save";
            Event.on(bSave,"click",this.Self.SpyNameSave,this,true);
            bCancel.setAttribute("type", "button");
            bCancel.innerHTML = "Cancel";
            Event.on(bCancel,"click",this.Self.SpyNameClear,this,true);
                        
            Event.removeListener(this.el, "click");        
                
            this.el.appendChild(inp);
            this.el.appendChild(document.createElement("br"));
            this.el.appendChild(bSave);
            this.el.appendChild(bCancel);
        },
        SpyNameSave : function(e) {
            Event.stopEvent(e);
            Lacuna.Pulser.Show();
            var newName = this.Input.value;
            
            this.Self.service.name_spy({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                spy_id:this.Spy.id,
                name:newName
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Intelligence.SpyNameSave.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    //this.Self.spies = undefined; /* Can't delete it, we need it later */
                    this.Spy.name = newName;
                    if(this.Input) {
                        this.Input.value = newName;
                    }
                    this.Self.SpyNameClear.call(this);
                },
                failure : function(o){
                    if(this.Input) {
                        this.Input.value = this.Spy.name;
                    }
                },
                scope:this
            });
        },
        SpyNameClear : function(e) {
            if(e) { Event.stopEvent(e); }
            if(this.Input) {
                delete this.Input;
            }
            if(this.el) {
                Event.purgeElement(this.el);
                this.el.innerHTML = this.Spy.name;
                Event.on(this.el, "click", this.Self.SpyName, this, true);
            }
        },
        SpyTrain : function() {
            var select = Dom.get("spiesTrainNumber"),
                num = select[select.selectedIndex].value*1;
                
            if(Lang.isNumber(num) && num <= this.result.spies.maximum - this.result.spies.current) {
                Lacuna.Pulser.Show();
                this.service.train_spy({session_id:Game.GetSession(),building_id:this.building.id,quantity:num}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Intelligence.SpyTrain.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        var trained = o.result.trained*1;
                        if(trained > 0) {
                            this.spies = undefined;
                            this.result.spies.current = (this.result.spies.current*1) + (o.result.trained*1);
                            this.trainView();
                            // Dom.get("spiesCurrent").innerHTML = this.result.spies.current;
                            //this.UpdateCost(this.spies.training_costs, trained);
                        }
                        var not_trained = o.result.not_trained*1;
                        if(not_trained > 0 && o.result.reason_not_trained && o.result.reason_not_trained.message) {
                            alert(o.result.reason_not_trained.message);
                        }
                    },
                    scope:this
                });
            }
        },
        Subsidize : function(e) {
            Lacuna.Pulser.Show();
            Dom.get("spiesSubsidize").disabled = true;
            
            this.service.subsidize_training({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);

                    delete this.spies;
                    this.spiesView({newValue:1});
                },
                failure : function(o){
                    Dom.get("spiesSubsidize").disabled = false;
                },
                scope:this
            });
        }
        
    });
    
    YAHOO.lacuna.buildings.Intelligence = Intelligence;

})();
YAHOO.register("Intelligence", YAHOO.lacuna.buildings.Intelligence, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/intelligence.js","/building")
},{"buffer":71,"oMfpAn":75}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.LibraryOfJith == "undefined" || !YAHOO.lacuna.buildings.LibraryOfJith) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var LibraryOfJith = function(result){
        LibraryOfJith.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.LibraryOfJith;
        this.maps = {};
        
        this.subscribe("onLoad", this.createFind, this, true);
    };
    
    Lang.extend(LibraryOfJith, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getTab()];
        },
        _getTab : function() {
            this.libraryTab = new YAHOO.widget.Tab({ label: "Species Library", content: [
                    '<div>',
                    '    <div><label for="lojFindEmpire">Lookup by Empire Name:</label><div style="display:inline-block;width:300px;"><input type="text" id="lojFindEmpire" /></div></div>',
                    '    <ul id="lojDetails" style="margin-top:5px;overflow-y:auto;">',
                    '    </ul>',
                    '</div>'
                ].join('')});
                    
            return this.libraryTab;
        },
        
        createFind : function() {
            this.species = Dom.get("lojDetails");

            var dataSource = new Util.XHRDataSource("/empire");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.empires",
                fields : ["name","id"]
            };
            
            var oTextboxList = new YAHOO.lacuna.TextboxList("lojFindEmpire", dataSource, { //config options
                maxResultsDisplayed: 25,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:false,
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){                
                var s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };
            oTextboxList.dirtyEvent.subscribe(function(event, isDirty, oSelf){
                var empire = this._oTblSingleSelection.Object;

                oSelf.getSpecies(empire.id);
            },this);
            this.find = oTextboxList;
        },
        
        getSpecies : function(id) {
            Lacuna.Pulser.Show();
            this.service.research_species({session_id:Game.GetSession(),building_id:this.building.id, empire_id:id}, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.speciesDisplay(o.result.species);
                },
                scope:this
            });
        },
        speciesDisplay : function(stat) {
            this.species.innerHTML = [
                '<li style="border-bottom:1px solid #52ACFF;font-size:120%;"><label>',stat.name,'</label></li>',
                '<li style="padding-bottom:5px;">', stat.description, '</li>',
                '<li>',
                '    <label>Habitable Orbits:</label><span>', stat.min_orbit, stat.max_orbit > stat.min_orbit ? ' to '+ stat.max_orbit : '','</span>',
                '</li>',
                '<li>',
                '    <label>Manufacturing:</label><span>', stat.manufacturing_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Deception:</label><span>', stat.deception_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Research:</label><span>', stat.research_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Management:</label><span>', stat.management_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Farming:</label><span>', stat.farming_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Mining:</label><span>', stat.mining_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Science:</label><span>', stat.science_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Environmental:</label><span>', stat.environmental_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Political:</label><span>', stat.political_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Trade:</label><span>', stat.trade_affinity, '</span>',
                '</li>',
                '<li>',
                '    <label>Growth:</label><span>', stat.growth_affinity, '</span>',
                '</li>'
            ].join('');

            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 180;
                if(Ht > 300) { Ht = 300; }
                var tC = Dom.get('lojDetails');    
                Dom.setStyle(tC,"height",Ht + "px");
                Dom.setStyle(tC,"overflow-y","auto");
            },10);
        }
        
    });
    
    YAHOO.lacuna.buildings.LibraryOfJith = LibraryOfJith;

})();
YAHOO.register("libraryofjith", YAHOO.lacuna.buildings.LibraryOfJith, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/libraryOfJith.js","/building")
},{"buffer":71,"oMfpAn":75}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.MayhemTraining == "undefined" || !YAHOO.lacuna.buildings.MayhemTraining) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var MayhemTraining = function(result){
        MayhemTraining.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.MayhemTraining;
    };
    
    Lang.extend(MayhemTraining, Lacuna.buildings.Building, {
        destroy : function() {
            MayhemTraining.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTrainTab()];
        },
        _getTrainTab : function() {
            var spies = this.result.spies;
            this.trainTab = new YAHOO.widget.Tab({ label: "Train Spies", content: [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><span style="font-weight:bold;">Spies Training : </span> <span id="spiesCurrent">',spies.in_training,'</span></li>',
                '            <li><span style="font-weight:bold;">Points per hour : </span> <span id="pointsper">',spies.points_per,'</span></li>',
                '            <li><span style="font-weight:bold;">Max Points : </span> <span id="pointsper">',spies.max_points,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            
            return this.trainTab;
        },
        
    });
    
    YAHOO.lacuna.buildings.MayhemTraining = MayhemTraining;

})();
YAHOO.register("MayhemTraining", YAHOO.lacuna.buildings.MayhemTraining, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/mayhemTraining.js","/building")
},{"buffer":71,"oMfpAn":75}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.MercenariesGuild == "undefined" || !YAHOO.lacuna.buildings.MercenariesGuild) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Pager = YAHOO.widget.Paginator,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var MercenariesGuild = function(result){
        MercenariesGuild.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.MercenariesGuild;
        
        this.availableAcceptText = "Accept";
        var cost =  Math.round( (3-(this.building.level * 0.1)) * 10 ) / 10;
        this.addMercenariesGuildText = ['Add for ',cost,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" style="vertical-align:middle;" />'].join('');
        
        //defaults.  Values are updated to server numbers during get_* calls
        this.spySize = 350;
        this.createEvent("onLoadSpies");
        
        if(this.building.level > 0) {
            this.subscribe("onLoad", function() {
                this.getSpies();
                this.mine.subscribe("activeChange", this.getMine, this, true);
                this.avail.subscribe("activeChange", this.getAvailable, this, true);
                this.add.subscribe("activeChange", this.getAddShips, this, true);
            }, this, true);
        }
    };

    Lang.extend(MercenariesGuild, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.availablePager) {
                this.availablePager.destroy();
            }
            if(this.minePage) {
                this.minePage.destroy();
            }
            MercenariesGuild.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            this.mineTabIndex = 2; //array location plus 1 since Production tab is always first
            return [this._getAvailTab(), this._getMineTab(), this._getAddTab()];
        },
        _getAvailTab : function() {
            this.avail = new YAHOO.widget.Tab({ label: "Available Mercs", content: [
                '<div>',
                '    <ul class="tradeHeader tradeInfo clearafter">',
                '        <li class="tradeEmpire">Empire</li>',
                '        <li class="tradeOfferedDate">Offered Date</li>',
                '        <li class="tradeAsking">Cost</li>',
                '        <li class="tradeOffer">Offering</li>',
                '        <li class="tradeAction"></li>',
                '        <li class="tradeAction"></li>',
                '    </ul>',
                '    <div><div id="tradeAvailableDetails"></div></div>',
                '    <div id="tradeAvailablePaginator"></div>',
                '</div>'].join('')});
            
            return this.avail;
        },
        _getMineTab : function() {
            this.mine = new YAHOO.widget.Tab({ label: "My Mercs", content: ['<div class="myMercenariesGuilds">',
                '    <ul class="tradeHeader tradeInfo clearafter">',
                '        <li class="tradeOfferedDate">Offered Date</li>',
                '        <li class="tradeAsking">Cost</li>',
                '        <li class="tradeOffer">Offering</li>',
                '        <li class="tradeAction"></li>',
                '    </ul>',
                '    <div><div id="tradeMineDetails"></div></div>',
                '    <div id="tradeMinePaginator"></div>',
                '</div>'].join('')});
            
            return this.mine;
        },
        _getAddTab : function() {
            this.add = new YAHOO.widget.Tab({ label: "Add Merc", content: [
            '<div id="aHt">',
            '<ul style="margin-top:5px;">',
            '    <li><label>Spy:</label><select id="tradeAddSpyName"></select></li>',
            '    <li style="margin: 5px 0;"><label>Asking Essentia:</label><input type="text" id="tradeAddAskingQuantity" /></li>',
            '    <li style="margin-bottom:5px;"><label>With Ship:</label><select id="tradeAddShip"></select></li>',
            '    <li id="tradeAddMessage" class="alert"></li>',
            '</ul></div><button id="tradeAdd" type="button">',this.addMercenariesGuildText,'</button>'].join('')});
            
            this.subscribe("onLoadSpies", this.populateAddSpyName, this, true);
            
            Event.on("tradeAdd", "click", this.AddMerc, this, true);
            return this.add;
        },
        
        getSpies : function(force) {
            if(force || !this.spies) {
                Lacuna.Pulser.Show();
                this.service.get_spies({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.spies = o.result.spies;
                        this.spySize = o.result.cargo_space_used_each || this.spySize;
                        this.fireEvent("onLoadSpies");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },

        //View Available
        getAvailable : function(e) {
            if(e.newValue && !this.availableMercs) {
                Lacuna.Pulser.Show();
                var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:1};

                this.service.view_market(data, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.availableMercs = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                        
                        this.availablePager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeAvailablePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.availablePager.subscribe('changeRequest',this.AvailableHandlePagination, this, true);
                        this.availablePager.render();
                        
                        this.AvailablePopulate();
                    },
                    scope:this
                });
            }
        },
        AvailablePopulate : function() {
            var details = Dom.get("tradeAvailableDetails");
            
            if(details) {
                var trades = this.availableMercs.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        bbtn,
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.MercenariesGuild = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeEmpire");
                    nLi.innerHTML = trade.empire.name;
                    Event.on(nLi, "click", this.EmpireProfile, trade.empire);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatServerDateTimeShort(trade.date_offered);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = this.availableAcceptText;
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableAccept, {Self:this,MercenariesGuild:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    Dom.addClass(bbtn, "reportAbuse");
                    bbtn.innerHTML = "Spam";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableReport, {Self:this,MercenariesGuild:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 240;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        AvailableHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:newState.page};

            this.service.view_market(data, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.availableMercs = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                    
                    this.AvailablePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.availablePager.setState(newState);
        },
        AvailableAccept : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            this.Self.service.accept_from_market({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.MercenariesGuild.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "MercenariesGuild.accept_trade.success");
                    this.Self.rpcSuccess(o);
                    //force get the new availabe list after accepting so we get a new captcha
                    delete this.Self.availableMercs;
                    this.Self.getAvailable({newValue:true});
                    Lacuna.Pulser.Hide();
                },
                failure : function() {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        AvailableReport : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            this.Self.service.report_abuse({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.MercenariesGuild.id
            }, {
                success : function(o){
                    Event.purgeElement(btn);
                    btn.parentNode.removeChild(btn);

                    this.Self.rpcSuccess(o);
                    Lacuna.Pulser.Hide();
                },
                failure : function() {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        EmpireProfile : function(e, empire) {
            Lacuna.Info.Empire.Load(empire.id);
        },
        
        //View Mine
        getMine : function(e) {
            if(e.newValue && !this.mineMercs) {
                Lacuna.Pulser.Show();
                this.service.view_my_market({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.mineMercs = o.result; //store: trades=[], trade_count = 1, page_number=1
                        
                        this.minePage = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeMinePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.minePage.subscribe('changeRequest',this.MineHandlePagination, this, true);
                        this.minePage.render();
                        
                        this.MinePopulate();
                    },
                    scope:this
                });
            }
        },
        MinePopulate : function() {
            var details = Dom.get("tradeMineDetails");
            
            if(details) {
                var trades = this.mineMercs.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";

                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Trade = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatServerDateTimeShort(trade.date_offered);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Withdraw";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.MineWithdraw, {Self:this,Trade:trade,Line:nUl}, true);

                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }

                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 240;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        MineHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_my_market({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "MercenariesGuild.view_available_trades.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.mineMercs = o.result; //store: trades=[], trade_count = 1, page_number=1
                    
                    this.MinePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.minePage.setState(newState);
        },
        MineWithdraw : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            if(confirm(['Are you sure you want to withdraw the trade asking for ', this.Trade.ask, ' essentia and offering ', this.Trade.offer,'?'].join(''))) {
                Lacuna.Pulser.Show();
                this.Self.service.withdraw_from_market({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    trade_id:this.Trade.id
                }, {
                    success : function(o){
                        this.Self.rpcSuccess(o);
                        //splice out removed trade
                        var trades = this.Self.mineMercs.trades;
                        for(var i=0; i<trades.length; i++) {
                            if(trades[i].id == this.Trade.id) {
                                trades.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        
                        Lacuna.Pulser.Hide();
                        //delete ships since we'll get one back on withdraw
                        delete this.Self.tradeShips;
                        this.Self.getSpies(true);
                    },
                    failure : function() {
                        btn.disabled = false;
                    },
                    scope:this
                });
            }
            else {
                btn.disabled = false;
            }
        },
        
        //Add trade
        populateAddSpyName : function() {
            var elm = Dom.get("tradeAddSpyName"),
                opt = document.createElement("option"), nOpt;
                
            if(elm) {
                elm.options.length = 0;    
                for(var x=0; x < this.spies.length; x++) {
                    var obj = this.spies[x];
                    nOpt = opt.cloneNode(false);
                    nOpt.value = obj.id;
                    nOpt.innerHTML = [obj.name, ' - ', obj.level].join('');
                    elm.appendChild(nOpt);
                }
            }
        },
        getAddShips : function(e) {
            if(e.newValue && !this.tradeShips) {
                Lacuna.Pulser.Show();
                
                this.service.get_trade_ships({
                    session_id: Game.GetSession(""),
                    building_id: this.building.id
                },{
                    success : function(o){
                        this.rpcSuccess(o);
                        
                        var elm = Dom.get("tradeAddShip"),
                            opt = document.createElement("option"),
                            ships = o.result.ships,
                            nOpt;
                            
                        if(elm && ships) {
                            this.tradeShips = ships;
                            
                            var selectedVal = Lib.getSelectedOptionValue(elm);
                            elm.options.length = 0;    
                            for(var x=0; x < ships.length; x++) {
                                var obj = ships[x];
                                nOpt = opt.cloneNode(false);
                                nOpt.value = obj.id;
                                nOpt.innerHTML = [obj.name, ' (', obj.type_human, ' - Hold:', obj.hold_size, ' - Speed:', obj.speed, ')'].join('');
                                nOpt.selected = selectedVal == obj.id;
                                elm.appendChild(nOpt);
                            }
                        }
                        
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        updateAddCargo : function(byVal) {
            var c = Dom.get("tradeAddCargo"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        AddMerc : function(e) {
            var qVal = Dom.get("tradeAddAskingQuantity").value*1;
            if(!Lang.isNumber(qVal) || qVal <= 0) {
                Dom.get("tradeAddMessage").innerHTML = "Quantity of asking essentia must be a number and greater than 0";
                return;
            }
            else {
                Dom.get("tradeAddMessage").innerHTML = "";
            }
            
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            var data = {
                session_id:Game.GetSession(""),
                building_id:this.building.id,
                spy_id: Lib.getSelectedOptionValue("tradeAddSpyName"),
                ask: qVal,
                ship_id: Lib.getSelectedOptionValue("tradeAddShip")
            };
            
            Lacuna.Pulser.Show();
            this.service.add_to_market(data, {
                success : function(o){
                    this.rpcSuccess(o);
                    delete this.tradeShips;
                    this.getSpies(true);
                    Dom.get("tradeAddAskingQuantity").value = "";
                    delete this.mineMercs;
                    this.fireEvent("onSelectTab", this.mineTabIndex);
                    btn.disabled = false;
                    Lacuna.Pulser.Hide();
                },
                failure : function() {
                    btn.disabled = false;
                },
                scope:this
            });
        }

    });
    
    Lacuna.buildings.MercenariesGuild = MercenariesGuild;

})();
YAHOO.register("trade", YAHOO.lacuna.buildings.MercenariesGuild, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/mercenariesGuild.js","/building")
},{"buffer":71,"oMfpAn":75}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.MiningMinistry == "undefined" || !YAHOO.lacuna.buildings.MiningMinistry) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var MiningMinistry = function(result){
        MiningMinistry.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Mining;
    };
    
    Lang.extend(MiningMinistry, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getPlatformTab(), this._getShipsTab()];
        },
        _getPlatformTab : function() {
            this.platformTab = new YAHOO.widget.Tab({ label: "Platforms", content: [
                '<div id="platformShippingInfo"></div>',
                '<div class="platformContainer">',
                '    <div id="platformDetails">',
                '    </div>',
                '</div>'
            ].join('')});
            this.platformTab.subscribe("activeChange", this.viewPlatforms, this, true);
                    
            return this.platformTab;
        },
        _getShipsTab : function() {
            this.shipsTab = new YAHOO.widget.Tab({ label: "Ships", content: [
                '<div class="shipsContainer">',
                '    <ul class="shipHeader shipInfo clearafter">',
                '        <li class="shipName">Name</li>',
                '        <li class="shipTask">Task</li>',
                '        <li class="shipSpeed">Speed</li>',
                '        <li class="shipHold">Hold</li>',
                '        <li class="shipAction"></li>',
                '    </ul>',
                '    <div><div id="shipsDetails"></div></div>',
                '</div>'
            ].join('')});
            this.shipsTab.subscribe("activeChange", this.viewShips, this, true);
                    
            return this.shipsTab;
        },
        
        viewPlatforms : function(e) {
            if(e.newValue) {
                if(!this.platforms) {
                    Lacuna.Pulser.Show();
                    this.service.view_platforms({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            YAHOO.log(o, "info", "MiningMinistry.view_platforms.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.platforms = { 
                                max_platforms:o.result.max_platforms,
                                platforms:o.result.platforms
                            };
                            
                            this.MiningMinistryPlatforms();
                        },
                        scope:this
                    });
                }
                else {
                    this.MiningMinistryPlatforms();
                }
            }
        },
        viewShips : function(e) {
            if(e.newValue) {
                if(!this.ships) {
                    this.MiningMinistryShipsView();
                }
                else {
                    this.MiningMinistryShipsPopulate();
                }
            }
        },
        
        CapacityDescription : function(capacity) {
            var output = ['Current production to shipping metric is ', capacity, '. '];
            if(capacity == -1) {
                output.push('You have no ships servicing your platforms.');
            }
            else if(capacity == 0) {
                output.push('You are producing an insignificant amount of ore. Add more platforms or upgrade your Mining Ministry.');
            }
            else if(capacity > 100) {
                output.push('You are producing more than your ships can handle. Add more ship to bring the value closer to 100.');
            }
            else if(capacity < 100) {
                output.push('Your ships have more capacity than the platforms are producing. You may remove ships or add platforms to get closer to 100.');
            }
            else if(capacity == 100) {
                output.push('Your shipping capacity and production values are exactly in sync.');
            }
            return output.join('');
        },
        platformClick : function(){
            Game.StarJump(this);
        },
        MiningMinistryPlatforms : function() {
            var platforms = this.platforms.platforms,
                details = Dom.get("platformDetails");
                
            if(details) {
                var ul = document.createElement("ul"),
                    li = document.createElement("li"),
                    info = Dom.get("platformShippingInfo");
                    
                if(platforms.length > 0) {
                    info.innerHTML = ['Total of ', platforms.length, ' platforms deployed.  This ministry can control a maximum of ', this.platforms.max_platforms, 
                        ' platforms. ', this.CapacityDescription(platforms[0].shipping_capacity)
                    ].join('');
                }
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                
                var ores = Lib.ResourceTypes.ore;
                var totals = [];
                for (var i in ores) totals[i] = 0;
                var grand_total = 0;

                if (platforms.length > 0) {
                    for(var i=0; i<platforms.length; i++) {
                        var obj = platforms[i],
                            nUl = ul.cloneNode(false),
                            nLi = li.cloneNode(false);
                            
                        nUl.Platform = obj;
                        Dom.addClass(nUl, "platformInfo");
                        Dom.addClass(nUl, "clearafter");

                        Dom.addClass(nLi,"platformLocation");
                        nLi.innerHTML = ['<img src="',Lib.AssetUrl,'star_system/',obj.asteroid.image,'.png" />',obj.asteroid.name].join('');
                        Event.on(nLi, "click", this.platformClick, obj, true);
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"platformAbandon");
                        var bbtn = document.createElement("button");
                        bbtn.setAttribute("type", "button");
                        bbtn.innerHTML = "Abandon";
                        bbtn = nLi.appendChild(bbtn);
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"platformOre");
                        var outOre = ['<ul><li><label>Ore Per Hour:</label></li>'];
                        var total = 0;
                        for (var ore_i in ores) {
                            var ore = ores[ore_i];
                            if(obj[ore + '_hour'] > 0) {
                                outOre.push('<li><label>' + ore.replace(/^\w/, function(c){ return c.toUpperCase() }) + ':</label> ');
                                outOre.push(obj[ore+'_hour']);
                                outOre.push('</li>');
                                totals[ore_i] += parseInt(obj[ore+'_hour']);
                                total += parseInt(obj[ore+'_hour']);
                            }
                        }
                        if(total > 0) {
                            outOre.splice(1, 0, '<li><label>Total:</label> ');
                            outOre.splice(2, 0, parseInt(total));
                            outOre.splice(3, 0, '</li>');
                            grand_total += total;
                        }
                        outOre.push('</ul>');
                        nLi.innerHTML = outOre.join('');
                        nUl.appendChild(nLi);

                        details.appendChild(nUl);
                        
                        Event.on(bbtn, "click", this.MiningMinistryPlatformAbandon, {Self:this,Platform:obj,Line:nUl}, true);
                    }

                    var nUl = ul.cloneNode(false), nLi = li.cloneNode(false);
                    Dom.addClass(nUl, "platformInfo");
                    Dom.addClass(nUl, "clearafter");
                    
                    Dom.addClass(nLi,"platformLocation");
                    Dom.setStyle(nLi, 'cursor', 'auto');
                    nLi.innerHTML = 'Total';
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"platformOre");
                    var outOre = ['<ul><li><label>Ore Per Hour:</label></li>'];
                    outOre.push('<li><label>Grand Total:</label> ');
                    outOre.push(parseInt(grand_total));
                    outOre.push('</li>');
                    for (var ore_i in ores) {
                        var ore = ores[ore_i];
                        if(totals[ore_i] > 0) {
                            outOre.push('<li><label>' + ore.replace(/^\w/, function(c){ return c.toUpperCase() }) + ':</label> ');
                            outOre.push(totals[ore_i]);
                            outOre.push('</li>');
                        }
                    }
                    outOre.push('</ul>');
                    nLi.innerHTML = outOre.join('');
                    nUl.appendChild(nLi);
                    details.insertBefore(nUl, details.firstChild);
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 210;
                    if(Ht > 280) { Ht = 280; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        MiningMinistryPlatformAbandon : function() {
            if(confirm(["Are you sure you want to Abandon the mining platform at  ",this.Platform.asteroid.name,"?"].join(''))) {
                Lacuna.Pulser.Show();
                
                this.Self.service.abandon_platform({
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    platform_id:this.Platform.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "MiningMinistry.MiningMinistryPlatformAbandon.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        var platforms = this.Self.platforms.platforms;
                        for(var i=0; i<platforms.length; i++) {
                            if(platforms[i].id == this.Platform.id) {
                                platforms.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                    },
                    scope:this
                });
            }
        },
        MiningMinistryShipsView : function() {
            Lacuna.Pulser.Show();
            this.service.view_ships({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "MiningMinistry.MiningMinistryShipsView.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.ships = o.result.ships;
                    
                    this.MiningMinistryShipsPopulate();
                },
                scope:this
            });
        },
        MiningMinistryShipsPopulate : function() {
            var ships = this.ships,
                details = Dom.get("shipsDetails");
            
            if(details) {
                var ul = document.createElement("ul"),
                    li = document.createElement("li"),
                    availShips = [],
                    workingShips = [];
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    if(ship.task == "Docked") {
                        availShips.push(ship);
                    }
                    else {
                        workingShips.push(ship);
                    }
                        
                    nUl.Ship = ship;
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = ship.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = ship.task;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipSpeed");
                    nLi.innerHTML = ship.speed;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipHold");
                    nLi.innerHTML = ship.hold_size;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = ship.task == "Docked" ? "Start Mining" : "Stop Mining";
                    bbtn = nLi.appendChild(bbtn);
                    nUl.appendChild(nLi);
                    
                    if(ship.task == "Docked") {
                        Event.on(bbtn, "click", this.MiningMinistryShipsAdd, {Self:this,Ship:ship}, true);
                    }
                    else {
                        Event.on(bbtn, "click", this.MiningMinistryShipsRemove, {Self:this,Ship:ship}, true);
                    }
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 175;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        MiningMinistryShipsAdd : function() {
            Lacuna.Pulser.Show();
                
            this.Self.service.add_cargo_ship_to_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "MiningMinistry.MiningMinistryShipsAdd.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.MiningMinistryShipsView();
                    delete this.platforms; //reset platforms so we geto the new correct info
                },
                scope:this.Self
            });
        },
        MiningMinistryShipsRemove : function() {
            Lacuna.Pulser.Show();
            
            this.Self.service.remove_cargo_ship_from_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "MiningMinistry.MiningMinistryShipsRemove.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.MiningMinistryShipsView();
                    delete this.platforms; //reset platforms so we geto the new correct info
                },
                scope:this.Self
            });
        }

    });
    
    YAHOO.lacuna.buildings.MiningMinistry = MiningMinistry;

})();
YAHOO.register("miningministry", YAHOO.lacuna.buildings.MiningMinistry, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/miningMinistry.js","/building")
},{"buffer":71,"oMfpAn":75}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.MissionCommand == "undefined" || !YAHOO.lacuna.buildings.MissionCommand) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var MissionCommand = function(result){
        MissionCommand.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.MissionCommand;
    };
    
    Lang.extend(MissionCommand, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getMissionTab()];
        },
        _getMissionTab : function() {
            this.missionTab = new YAHOO.widget.Tab({ label: "Missions", content: [
                '<div>',
                '    <div class="missionsHeader"></div>',
                '    <div id="missionsHt" style="overflow:auto;">',
                '        <ul id="missionsAvailable">',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            this.missionTab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.getMissions();
                    var mHt = Game.GetSize().h - 150;
                    if(mHt > 300) { mHt = 300; }
                    Dom.setStyle(Dom.get('missionsHt'), 'height', mHt + 'px');
                }
            }, this, true);
            return this.missionTab;
        },
        getMissions : function() {
            if(!this.missions) {
                Lacuna.Pulser.Show();
                this.service.get_missions({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.missions = o.result.missions;
                        this.displayMissions();
                    },
                    scope:this
                });
            }
            else {
                this.displayMissions();
            }
        },
        displayMissions : function() {
            var missions = this.missions,
                ul = Dom.get("missionsAvailable");

            if(ul) {
                var ulParent = ul.parentNode,
                    li = document.createElement("li");
                    
                ul = ulParent.removeChild(ul);
                ul.innerHTML = "";
                /*
                {
                    "id" : "id-goes-here",
                    "max_university_level" : 12,
                    "date_posted" : "01 31 2010 13:09:05 +0600",
                    "name" : "The Big Mission",
                    "description" : "Do the big thing and make it go.",
                    "objectives" : [
                      "1500 apple",
                      "Kill a spy",
                      "Destroy a ship"
                    ],
                    "rewards" : [
                        "1 essentia"
                    ]
                }
                */
                if(missions && missions.length > 0) {
                    for(var i=0; i<missions.length; i++) {
                        var ms = missions[i],
                            nLi = li.cloneNode(false);
                        Dom.addClass(nLi, "mission");
                        nLi.innerHTML = ['<div class="yui-ge">',
                        '    <div class="yui-u first">',
                        '        <div class="missionName">',ms.name,'</div>',
                        '        <div class="missionPosted">Posted: ',Lib.formatServerDate(ms.date_posted),'</div>',
                        '        <div class="missionUniversity">Max University: ',ms.max_university_level,'</div>',
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <button type="button" id="complete',ms.id,'" class="missionComplete">Complete</button>',
                        '        <button type="button" id="skip',ms.id,'" class="missionSkip">Skip</button>',
                        '    </div>',
                        '</div>',
                        '<div class="missionDesc">',ms.description,'</div>',
                        '<div class="yui-g">',
                        '    <div class="yui-u first">',
                        '        <div><label style="font-weight:bold;">Objectives:</label></div>',
                        this.parseObjectives(ms.objectives),
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <div><label style="font-weight:bold;">Rewards:</label></div>',
                        this.parseRewards(ms.rewards),
                        '    </div>',
                        '</div>'].join('');
                        Event.on(Sel.query("button.missionComplete", nLi, true), "click", this.completeMission, {Self:this,Mission:ms,Line:nLi}, true);
                        Event.on(Sel.query("button.missionSkip", nLi, true), "click", this.skipMission, {Self:this,Mission:ms,Line:nLi}, true);

                        ul.appendChild(nLi);
                    }
                }
                //add child back in
                ulParent.appendChild(ul);
            }
        },
        parseObjectives : function(arr) {
            var lst = ['<ol class="missionList">'];
            for(var n=0; n<arr.length; n++) {
                lst[lst.length] = '<li>';
                lst[lst.length] = arr[n];
                lst[lst.length] = '</li>';
            }
            lst[lst.length] = '</ol>';
            return lst.join('');
        },
        parseRewards : function(arr) {
            var lst = ['<ol class="missionList">'];
            for(var n=0; n<arr.length; n++) {
                lst[lst.length] = '<li>';
                lst[lst.length] = arr[n];
                lst[lst.length] = '</li>';
            }
            lst[lst.length] = '</ol>';
            return lst.join('');
        },
        completeMission : function() {
            var btn = Dom.get('complete'+this.Mission.id);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            this.Self.service.complete_mission({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                mission_id:this.Mission.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);

                    this.Self.missions = undefined;
                    this.Self.getMissions();
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        skipMission : function() {
            var btn = Dom.get('skip'+this.Mission.id);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            this.Self.service.skip_mission({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                mission_id:this.Mission.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);

                    this.Self.missions = undefined;
                    this.Self.getMissions();
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        }
    });
    
    YAHOO.lacuna.buildings.MissionCommand = MissionCommand;

})();
YAHOO.register("MissionCommand", YAHOO.lacuna.buildings.MissionCommand, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/missionCommand.js","/building")
},{"buffer":71,"oMfpAn":75}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Network19 == "undefined" || !YAHOO.lacuna.buildings.Network19) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Network19 = function(result){
        Network19.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Network19;
    };
    
    Lang.extend(Network19, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getCoverageTab()];
        },
        _getCoverageTab : function() {
            this.coverageTab = new YAHOO.widget.Tab({ label: "Coverage", content: [
                    '<div id="newsCoverageContainer">',
                    '    <span id="newsCoverageText">',this.result.restrict_coverage == "1" ? 'Coverage is current restricted' : 'News is flowing freely', '</span>',
                    '    : <button id="newsCoverage" type="button">',(this.result.restrict_coverage == "1" ? 'Open Coverage' : 'Restrict Coverage'),'</button>',
                    '</div>',
                    '<div class="newsFeedContainer">',
                    '    <ul id="newsFeed">',
                    '    </ul>',
                    '</div>',
                    '<div class="newsRssLinksContainer">',
                    '    <ul id="newsRssLinks" class="clearafter">',
                    '    </ul>',
                    '</div>'
                ].join('')});
            this.coverageTab.subscribe("activeChange", this.NewsGet, this, true);

            Event.on("newsCoverage", "click", this.NewsCoverage, this, true);
                    
            return this.coverageTab;
        },

        NewsCoverage : function(e) {
            var target = Event.getTarget(e),
                isRestrict = 1;
            target.disabled = true;
            if(target.innerHTML == "Open Coverage") {
                isRestrict = 0;
            }

            Lacuna.Pulser.Show();
            this.service.restrict_coverage({session_id:Game.GetSession(),building_id:this.result.building.id,onoff:isRestrict}, {
                success : function(o){
                    YAHOO.log(o, "info", "Network19.NewsCoverage.restrict_coverage.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    Dom.get("newsCoverageText").innerHTML = isRestrict ? 'Coverage is currently restricted' : 'News is flowing freely';
                    target.innerHTML = isRestrict ? 'Open Coverage' : 'Restrict Coverage';
                    target.disabled = false;
                },
                failure : function(o){
                    target.disabled = false;
                },
                scope:this
            });
        },
        NewsGet : function() {
            Lacuna.Pulser.Show();
            this.service.view_news({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "Network19.NewsGet.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    var news = o.result.news,
                        newsFeed = Dom.get("newsFeed");
                        
                    if(newsFeed) {
                        var feedFrag = document.createDocumentFragment(),
                            rss = o.result.feeds,
                            newsRssLinks = Dom.get("newsRssLinks"),
                            rssFrag = document.createDocumentFragment(),
                            li = document.createElement("li");
                        
                        
                        newsFeed.innerHTML = "";
                        newsRssLinks.innerHTML = "";
                            
                        for(var i=0; i<news.length; i++) {
                            var ni = news[i],
                                nLi = li.cloneNode(false);
                            Dom.addClass(nLi, "newsHeadline");
                            nLi.innerHTML = [Lib.formatServerDateShort(ni.date), ": ", ni.headline].join('');
                            feedFrag.appendChild(nLi);
                        }
                        newsFeed.appendChild(feedFrag);
                        
                        for(var key in rss) {
                            if(rss.hasOwnProperty(key)){
                                var link = rss[key],
                                    rssLi = li.cloneNode(false);
                                Dom.addClass(rssLi, "newsRssLink");
                                rssLi.innerHTML = [key, '<a href="', link, '" target="_blank"><img src="', Lib.AssetUrl, 'ui/rss.png" alt="rss" style="margin-left:1px" /></a>'].join('');
                                rssFrag.appendChild(rssLi);
                            }
                        }
                        newsRssLinks.appendChild(rssFrag);
                    }
                },
                scope:this
            });
        }
        
    });
    
    YAHOO.lacuna.buildings.Network19 = Network19;

})();
YAHOO.register("network19", YAHOO.lacuna.buildings.Network19, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/network19.js","/building")
},{"buffer":71,"oMfpAn":75}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Observatory == "undefined" || !YAHOO.lacuna.buildings.Observatory) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Observatory = function(result){
        Observatory.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Observatory;
    };
    
    Lang.extend(Observatory, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.pager) {
                this.pager.destroy();
            }
            Observatory.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getProbesTab(), this._getAbandonAllProbesTab()];
        },
        _getProbesTab : function() {
            this.probesTab = new YAHOO.widget.Tab({ label: "Probes", content: [
                    '<div>',
                    '    <div id="observatoryInfo"></div>',
                    '    <div class="probeContainer clearafter">',
                    '        <ul id="probeDetails" class="probeInfo">',
                    '        </ul>',
                    '    </div>',
                    '    <div id="probePaginator"></div>',
                    '</div>'
                ].join('')});
            this.probesTab.subscribe("activeChange", this.GetProbes, this, true);
                    
            return this.probesTab;
        },
        _getAbandonAllProbesTab : function() {
            this.probesTab = new YAHOO.widget.Tab({ label: "Abandon All Probes", content: [
                    '<div>',
                    '    <button type="button" id="observatoryBigRedButton">Abandon All Probes!</button>',
                    '</div>'
                ].join('')});
            
            Event.on("observatoryBigRedButton", "click", this.AbandonAllProbes, this, true);
            
            return this.probesTab;
        },
        
        GetProbes : function(e) {
            if(e.newValue) {
                if(!this.probes) {
                    Lacuna.Pulser.Show();
                    this.service.get_probed_stars({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                        success : function(o){
                            YAHOO.log(o, "info", "Observatory.get_probed_stars.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.ProbeInfoDisplay(o.result);
                            this.probes = o.result.stars;
                            this.pager = new Pager({
                                rowsPerPage : 30,
                                totalRecords: o.result.star_count*1,
                                containers  : 'probePaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.pager.subscribe('changeRequest',this.ProbesHandlePagination, this, true);
                            this.pager.render();
                            
                            this.ProbesDisplay();
                        },
                        scope:this
                    });
                }
                else {
                    this.ProbesDisplay();
                }
            }
        },
        ProbeInfoDisplay : function(data) {
            var info = Dom.get("observatoryInfo");
            if(info) {
                info.innerHTML = ['Total of ', data.star_count, ' probes in use.  ', ( "travelling" in data ? data.travelling + ' en route.  ' : '' ), 'This observatory can control a maximum of ', data.max_probes, ' probes.'].join('');
            }
        },
        ProbesDisplay : function() {
            var stars = this.probes,
                probeDetails = Dom.get("probeDetails");
                
            if(probeDetails) {
                Event.purgeElement(probeDetails);
                probeDetails.innerHTML = "";
                
                var li = document.createElement("li");
                
                for(var i=0; i<stars.length; i++) {
                    var st = stars[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.Star = st;
                    Dom.addClass(nLi,"probeStar");
                    
                    nLi.innerHTML = [
                        '<div class="probeStarContainer yui-gf">',
                        '    <div class="yui-u first probeAction" style="background-color:black;">',
                        '        <img src="',Lib.AssetUrl,'star_map/',st.color,'.png" alt="',st.name,'" style="width:50px;height:50px;" />',
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <div class="probeDelete"></div>',
                        '        <div>',st.name,'</div>',
                        '        <div>',st.x,' : ',st.y,'</div>',
                        '    </div>',
                        '</div>'
                    ].join('');
                    
                    nLi = probeDetails.appendChild(nLi);
                    Event.delegate(nLi, "click", this.ProbeJump, "div.probeAction", this, true);
                    Event.delegate(nLi, "click", this.ProbeAbandon, "div.probeDelete", this, true);
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 175;
                    if(Ht > 290) { Ht = 290; }
                    Dom.setStyle(probeDetails.parentNode,"height",Ht + "px");
                    Dom.setStyle(probeDetails.parentNode,"overflow-y","auto");
                },10);
            }
        },
        ProbesHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.get_probed_stars({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Observatory.ProbesHandlePagination.get_probed_stars.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.probes = o.result.stars;
                    // Update the Paginator's state
                    this.pager.setState(newState);
                    this.ProbesDisplay();
                },
                scope:this
            });
        },
        ProbeAbandon : function(e, matchedEl, container) {
            if(container.Star) {
                if(confirm(["Are you sure you want to abandon the probe at ",container.Star.name,"?"].join(''))) {
                    Lacuna.Pulser.Show();
                    this.service.abandon_probe({
                            session_id:Game.GetSession(),
                            building_id:this.building.id,
                            star_id:container.Star.id
                        }, {
                        success : function(o){
                            YAHOO.log(o, "info", "Observatory.ProbeAction.abandon_probe.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            Event.purgeElement(container);
                            container.parentNode.removeChild(container);
                            this.probes = null;
                        },
                        scope:this
                    });
                }
            }
        },
        ProbeJump : function(e, matchedEl, container) {
            if(container.Star) {
                Game.StarJump(container.Star);
            }
        },
        AbandonAllProbes : function(e) {
            if(confirm("Are you sure you want to abandon all probes controlled by this Observatory?")) {
                Lacuna.Pulser.Show();
                this.service.abandon_all_probes({
                        session_id:Game.GetSession(),
                        building_id:this.building.id
                    }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Observatory.AbandonAllProbes.abandon_all_probes.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.probes = null;
                        
                        //close buildingDetails
                        this.fireEvent("onHide");
                    },
                    scope:this
                });
            }
        }

    });
    
    YAHOO.lacuna.buildings.Observatory = Observatory;

})();
YAHOO.register("Observatory", YAHOO.lacuna.buildings.Observatory, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/observatory.js","/building")
},{"buffer":71,"oMfpAn":75}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.OracleOfAnid == "undefined" || !YAHOO.lacuna.buildings.OracleOfAnid) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var OracleOfAnid = function(result){
        OracleOfAnid.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.OracleOfAnid;
        this.maps = {};
        
        
        this.subscribe("onLoad", function(){
            this.CreateFind();
            Event.on("oracleCurrentStar", "click", this.GoToCurrentStar, this, true);
            
            this.oracleStar = Dom.get("oracleStar");
            this.oraclePlanets = {
                1:Dom.get("oraclePlanetOne"),
                2:Dom.get("oraclePlanetTwo"),
                3:Dom.get("oraclePlanetThree"),
                4:Dom.get("oraclePlanetFour"),
                5:Dom.get("oraclePlanetFive"),
                6:Dom.get("oraclePlanetSix"),
                7:Dom.get("oraclePlanetSeven"),
                8:Dom.get("oraclePlanetEight")
            };
            
            Event.delegate("oracleDisplay", "click", this.DisplayClick, "div.tile", this, true);
            
        }, this, true);
    };
    
    Lang.extend(OracleOfAnid, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getTab()];
        },
        _getTab : function() {
            this.tab = new YAHOO.widget.Tab({ label: "Oracle", content: [
                    '<div>',
                    '    <div><label for="oracleStarFind">Lookup Star Name:</label><div style="display:inline-block;width:300px;"><input type="text" id="oracleStarFind" /></div> or <button type="button" id="oracleCurrentStar">Go To Current Star</button></div>',
                    '    <div id="oracleMessage" style="font-weight: bold; margin: 5px;"></div>',
                    '    <div id="oracleDisplay" style="position:relative;height:150px;width:700px;background:black url(',Lib.AssetUrl,'star_system/field.png);">',
                    '        <div id="oracleStar" class="tile" style="position:absolute;height:150px;width:150px;left:0px;top:0px;"></div>',
                    '        <div id="oraclePlanetOne" class="tile" style="position:absolute;height:50px;width:50px;left:150px;top:50px;"></div>',
                    '        <div id="oraclePlanetTwo" class="tile" style="position:absolute;height:50px;width:50px;left:210px;top:50px;"></div>',
                    '        <div id="oraclePlanetThree" class="tile" style="position:absolute;height:50px;width:50px;left:270px;top:50px;"></div>',
                    '        <div id="oraclePlanetFour" class="tile" style="position:absolute;height:50px;width:50px;left:330px;top:50px;"></div>',
                    '        <div id="oraclePlanetFive" class="tile" style="position:absolute;height:50px;width:50px;left:390px;top:50px;"></div>',
                    '        <div id="oraclePlanetSix" class="tile" style="position:absolute;height:50px;width:50px;left:450px;top:50px;"></div>',
                    '        <div id="oraclePlanetSeven" class="tile" style="position:absolute;height:50px;width:50px;left:510px;top:50px;"></div>',
                    '        <div id="oraclePlanetEight" class="tile" style="position:absolute;height:50px;width:50px;left:570px;top:50px;"></div>',
                    '    </div>',
                    '</div>'
                ].join('')});
                    
            return this.tab;
        },
        
        CreateFind : function() {
            if(!this.findStar) {
                var dataSource = new Util.XHRDataSource("/map");
                dataSource.connMethodPost = "POST";
                dataSource.maxCacheEntries = 2;
                dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                dataSource.responseSchema = {
                    resultsList : "result.stars",
                    fields : ["name","color","x","y","id"]
                };
                
                var oTextboxList = new YAHOO.lacuna.TextboxList("oracleStarFind", dataSource, { //config options
                    maxResultsDisplayed: 25,
                    minQueryLength:3,
                    multiSelect:false,
                    forceSelection:false,
                    useIndicator:true
                });
                oTextboxList.formatResult = function(oResultData, sQuery, sResultMatch) {
                    return [
                        '<div class="yui-gf">',
                        '    <div class="yui-u first" style="background-color:black;">',
                        '        <img src="',Lib.AssetUrl,'star_map/',oResultData.color,'.png" alt="',oResultData,name,'" style="width:50px;height:50px;" />',
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <div>',oResultData.name,'</div>',
                        '        <div>',oResultData.x,' : ',oResultData.y,'</div>',
                        '    </div>',
                        '</div>'].join("");
                };
                oTextboxList.generateRequest = function(sQuery){                
                    var s = Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "search_stars",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                decodeURIComponent(sQuery)
                            ]
                        });
                    return s;
                };
                oTextboxList.dirtyEvent.subscribe(function(event, isDirty, oSelf){
                    var star = this._oTblSingleSelection.Object;

                    oSelf.GetStar(star.id);
                },this);
                this.findStar = oTextboxList;
            }
        },
        GoToCurrentStar : function() {
            this.GetStar(Game.GetCurrentPlanet().star_id);
        },
        
        GetStar : function(starId) {
            Lacuna.Pulser.Show();
            this.service.get_star({session_id:Game.GetSession(),building_id:this.building.id, star_id:starId}, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.star = o.result.star;
                    Dom.get("oracleMessage").innerHTML = this.star.name;
                    this.Display();
                },
                failure : function(o){
                    Dom.get("oracleMessage").innerHTML = o.error.message;
                    return true;
                },
                scope:this
            });
        },
        Display : function() {
            this.oraclePlanetsData = {};
            if(this.oracleStar) {
                var planets = this.star.bodies,
                    tileSize = 50;
                    
                this.oracleStar.innerHTML = ['<img title="',this.star.name,'" src="',Lib.AssetUrl,'star_map/',this.star.color,'.png','" class="star" style="width:',(tileSize*3),'px;height:',(tileSize*3),'px;" />'].join('');
                this.oraclePlanets[1].innerHTML = "";
                this.oraclePlanets[2].innerHTML = "";
                this.oraclePlanets[3].innerHTML = "";
                this.oraclePlanets[4].innerHTML = "";
                this.oraclePlanets[5].innerHTML = "";
                this.oraclePlanets[6].innerHTML = "";
                this.oraclePlanets[7].innerHTML = "";
                this.oraclePlanets[8].innerHTML = "";
                
                for(var n=0; n<planets.length; n++) {
                    var data = planets[n],
                        div = this.oraclePlanets[data.orbit],
                        pSize = ((100 - Math.abs(data.size - 100)) / (100 / tileSize)) + 15,
                        style = ['width:',pSize,'px;height:',pSize,'px;margin-top:',Math.floor(((tileSize - pSize) / 2)),'px;position:absolute;top:0;left:0;'].join(''),
                        pImg = data.image.substr(0,data.image.length-1) + '2';
                        
                    this.oraclePlanetsData[data.orbit] = data;
                        
                    var html = ['<img title="',data.name,' (',data.x,',',data.y,')" src="',Lib.AssetUrl,'star_system/',pImg,'.png','" class="planet planet',data.orbit,'" style="',style,'" />'];
                    if(data.empire) {
                        html = html.concat(['<img title="',data.name,' (',data.x,',',data.y,')" src="',Lib.AssetUrl,'star_map/',data.empire.alignment,'.png" class="planet" style="',style,'z-index:2;" />']);
                    }
                    div.innerHTML = html.join('');
                }
            }
        },
        DisplayClick : function(e, matchedEl, container) {
            if(matchedEl.id == "oracleStar") {
                YAHOO.lacuna.MapStar.ShowStar({data:this.star}, true);
            }
            else {
                var planet;
                switch(matchedEl.id) {
                    case "oraclePlanetOne":
                        planet = this.oraclePlanetsData[1];
                        break;
                    case "oraclePlanetTwo":
                        planet = this.oraclePlanetsData[2];
                        break;
                    case "oraclePlanetThree":
                        planet = this.oraclePlanetsData[3];
                        break;
                    case "oraclePlanetFour":
                        planet = this.oraclePlanetsData[4];
                        break;
                    case "oraclePlanetFive":
                        planet = this.oraclePlanetsData[5];
                        break;
                    case "oraclePlanetSix":
                        planet = this.oraclePlanetsData[6];
                        break;
                    case "oraclePlanetSeven":
                        planet = this.oraclePlanetsData[7];
                        break;
                    case "oraclePlanetEight":
                        planet = this.oraclePlanetsData[8];
                        break;
                }
                YAHOO.lacuna.MapStar.ShowPlanet({data:planet}, true);
            }
        }

    });
    
    YAHOO.lacuna.buildings.OracleOfAnid = OracleOfAnid;

})();
YAHOO.register("OracleOfAnid", YAHOO.lacuna.buildings.OracleOfAnid, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/oracleOfAnid.js","/building")
},{"buffer":71,"oMfpAn":75}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.OreStorage == "undefined" || !YAHOO.lacuna.buildings.OreStorage) {
    
(function(){
    var    Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var OreStorage = function(result){
        OreStorage.superclass.constructor.call(this, result);

        this.service = Game.Services.Buildings.OreStorage;
    };
    
    YAHOO.lang.extend(OreStorage, YAHOO.lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getOreTab(),this._getDumpTab()];
        },
        _getOreTab : function() {
            var stored = this.result.ore_stored;
            return new YAHOO.widget.Tab({ label: "Ore", content: [
                '<div class="yui-g buildingDetailsExtra">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><label>Anthracite</label><span class="buildingDetailsNum">',stored.anthracite,'</span></li>',
                '            <li><label>Bauxite</label><span class="buildingDetailsNum">',stored.bauxite,'</span></li>',
                '            <li><label>Beryl</label><span class="buildingDetailsNum">',stored.beryl,'</span></li>',
                '            <li><label>Chalcopyrite</label><span class="buildingDetailsNum">',stored.chalcopyrite,'</span></li>',
                '            <li><label>Chromite</label><span class="buildingDetailsNum">',stored.chromite,'</span></li>',
                '            <li><label>Fluorite</label><span class="buildingDetailsNum">',stored.fluorite,'</span></li>',
                '            <li><label>Galena</label><span class="buildingDetailsNum">',stored.galena,'</span></li>',
                '            <li><label>Goethite</label><span class="buildingDetailsNum">',stored.goethite,'</span></li>',
                '            <li><label>Gold</label><span class="buildingDetailsNum">',stored.gold,'</span></li>',
                '            <li><label>Gypsum</label><span class="buildingDetailsNum">',stored.gypsum,'</span></li>',
                '        </ul>',
                '    </div>',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><label>Halite</label><span class="buildingDetailsNum">',stored.halite,'</span></li>',
                '            <li><label>Kerogen</label><span class="buildingDetailsNum">',stored.kerogen,'</span></li>',
                '            <li><label>Magnetite</label><span class="buildingDetailsNum">',stored.magnetite,'</span></li>',
                '            <li><label>Methane</label><span class="buildingDetailsNum">',stored.methane,'</span></li>',
                '            <li><label>Monazite</label><span class="buildingDetailsNum">',stored.monazite,'</span></li>',
                '            <li><label>Rutile</label><span class="buildingDetailsNum">',stored.rutile,'</span></li>',
                '            <li><label>Sulfur</label><span class="buildingDetailsNum">',stored.sulfur,'</span></li>',
                '            <li><label>Trona</label><span class="buildingDetailsNum">',stored.trona,'</span></li>',
                '            <li><label>Uraninite</label><span class="buildingDetailsNum">',stored.uraninite,'</span></li>',
                '            <li><label>Zircon</label><span class="buildingDetailsNum">',stored.zircon,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
        },
        _getDumpTab : function() {
            this.resources = this.result.ore_stored;
            this.dumpTab = new YAHOO.widget.Tab({ label: "Dump", contentEl: this.DumpGetDisplay(this.result.dump)});
            this.dumpTab.subscribe("activeChange", this.DumpGetDisplay, this, true);
            return this.dumpTab;
        },
        DumpGetDisplay : function() {
            var div = document.createElement("div"),
                resources = [],
                rKey;

            for(rKey in this.resources) {
                resources.push(rKey);
            }
            resources = resources.sort();

            if( resources.length > 0 ) {
                var ul = document.createElement('ul'),
                    li = document.createElement('li'),
                    nLi = li.cloneNode(false);
                nLi.innerHTML = 'Convert ore into waste.';
                ul.appendChild(nLi);

                nLi = li.cloneNode(false);
                nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/ore.png" class="smallOre" /></span>';

                var sel = document.createElement("select"),
                    opt = document.createElement("option");
                for(var i=0; i<resources.length; i++) {
                    rKey = resources[i];
                    if(this.resources.hasOwnProperty(rKey) && this.resources[rKey] > 0) {
                        var nOpt = opt.cloneNode(false);
                        nOpt.value = rKey;
                        nOpt.innerHTML = [rKey, ' (', this.resources[rKey], ')'].join('');
                        sel.appendChild(nOpt);
                    }
                }
                if( sel.options.length == 0 ) {
                    div.innerHTML = "No ore to dump.";
                    return div;
                }
                sel.id = "type";
                nLi.appendChild(sel);

                input = document.createElement("input");
                input.id = 'dumpAmount';
                input.type = "text";
                input.value = 0;
                input = nLi.appendChild(input);
                ul.appendChild(nLi);

                Dom.addClass(div, 'dumpTab');
                div.appendChild(ul);

                var form = document.createElement('form');
                btn = document.createElement("button");
                btn.setAttribute("type", "button");
                btn.innerHTML = "Dump";
                btn = form.appendChild(btn);
                Event.on(btn, "click", this.Dump, this, true);

                div.appendChild(form);

                var msg = document.createElement('div');
                msg.id = "dumpMessage";
                div.appendChild(msg);

            }
            else {
                div.innerHTML = "No ore to dump.";
            }

            return div;
        },
        Dump : function(e) {
            var building = this.building;
            if(building) {
                var sel = Dom.get("type");
                var type = sel[sel.selectedIndex].value;
                var amount = Dom.get("dumpAmount").value*1;
                if(amount > this.resources[type]) {
                    Dom.get("dumpMessage").innerHTML = "Can only convert " + type + " you have stored.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else if(amount <= 0) {
                    Dom.get("dumpMessage").innerHTML = "You must specify an amount greater than zero.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else {
                    Lacuna.Pulser.Show();
                    this.service.dump({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        type:type,
                        amount:amount
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "OreStorage.Dump.success");
                            this.rpcSuccess(o);
                            
                            if(this.dumpTab){
                                var ce = this.dumpTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                this.resources[type] -= amount;
                                ce.appendChild(this.DumpGetDisplay(o.result.dump));
                                Dom.get("dumpMessage").innerHTML = "Successfully converted " + amount + " " + type + " to waste.";
                                Lib.fadeOutElm("dumpMessage");
                            }
                            Lacuna.Pulser.Hide();
                        },
                        scope:this
                    });
                }
            }
        }
    });
    
    YAHOO.lacuna.buildings.OreStorage = OreStorage;

})();
YAHOO.register("orestorage", YAHOO.lacuna.buildings.OreStorage, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/oreStorage.js","/building")
},{"buffer":71,"oMfpAn":75}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Park == "undefined" || !YAHOO.lacuna.buildings.Park) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Park = function(result){
        Park.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Park;
    };
    
    Lang.extend(Park, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getPartyTab()];
        },
        _getPartyTab : function() {
            var div = document.createElement("div");
            if(this.result.party.can_throw) {
                div.appendChild(this.PartyGetDisplay());
            }
            else if(this.result.party.seconds_remaining*1 > 0) {
                div.innerHTML = [].join('');
                div.appendChild(this.PartyGetTimeDisplay(this.result.party));
                this.addQueue(this.result.party.seconds_remaining, this.PartyQueue, "partyTime");
            }
            else {
                div.innerHTML = '<p>You need at least 10,000 food to throw a party.</p>';
            }
            this.partyTab = new YAHOO.widget.Tab({ label: "Party", contentEl: div});
            return this.partyTab;
        },
        Party : function(e) {
            Lacuna.Pulser.Show();
            
            this.service.throw_a_party({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Park.Party.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    //this.work = o.result.building.work;
                    //this.updateBuildingTile(o.result.building);
                    
                    this.UpdatePartyTab(o.result.party);
                },
                scope:this
            });    
        },
        UpdatePartyTab : function(party) {
            if(this.partyTab) {
                var ce = this.partyTab.get("contentEl");
                Event.purgeElement(ce);
                ce.innerHTML = "";
                if(this.work && this.work.seconds_remaining && this.work.seconds_remaining*1 > 0) {
                    ce.appendChild(this.PartyGetTimeDisplay(party));
                    this.addQueue(this.work.seconds_remaining, this.PartyQueue, "partyTime");
                }
                else if(party && party.can_throw) {
                    ce.appendChild(this.PartyGetDisplay());
                }
                else {
                    ce.innerHTML = "<p>You need at least 10,000 food to throw a party.</p>";
                }
            }
        },
        PartyGetDisplay : function() {
            var btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Throw Party!";
            Event.on(btn, "click", this.Party, this, true);
            return btn;
        },
        PartyGetTimeDisplay : function(party) {
            var ul = document.createElement("ul");
            ul.innerHTML = ['<li>You will get ',Lib.formatNumber(party.happiness),' happiness from your party!</li>',
                '<li>Party time remaining: <span id="partyTime">',Lib.formatTime(party.seconds_remaining),'</span></li>',
                '<li>You may subsidize the party for 2 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />.</li>',
                '<li><button type="button" id="parkSubsidize">Subsidize</button></li>'].join('');
            Event.on("parkSubsidize", "click", this.Subsidize, this, true);
            return ul;
        },
        PartyQueue : function(remaining, el){
            if(remaining <= 0) {
                var span = Dom.get(el),
                    p = span.parentNode;
                p.removeChild(span);
                p.innerHTML = "No Parties being thrown.";
            }
            else {
                Dom.get(el).innerHTML = Lib.formatTime(Math.round(remaining));
            }
        },
        Subsidize : function(e) {
            Lacuna.Pulser.Show();
            Dom.get("parkSubsidize").disabled = true;
            
            this.service.subsidize_party({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);

                    //delete this.work;
                    //this.updateBuildingTile(o.result.building);
                    this.resetQueue();
                    
                    this.UpdatePartyTab(o.result.party);
                },
                failure : function(o){
                    Dom.get("parkSubsidize").disabled = false;
                },
                scope:this
            });
        }
        
    });
    
    YAHOO.lacuna.buildings.Park = Park;

})();
YAHOO.register("park", YAHOO.lacuna.buildings.Park, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/park.js","/building")
},{"buffer":71,"oMfpAn":75}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.PlanetaryCommand == "undefined" || !YAHOO.lacuna.buildings.PlanetaryCommand) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var PlanetaryCommand = function(result){
        PlanetaryCommand.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.PlanetaryCommand;
    };
    
    Lang.extend(PlanetaryCommand, Lacuna.buildings.Building, {
        getTabs : function() {
            var tabs = PlanetaryCommand.superclass.getTabs.call(this);
            tabs.splice(1, 0, this._getPlanetTab(), this._getAbandonTab(), this._getRenameTab());
            return tabs;
        },
        getChildTabs : function() {
            return [this._getPlanTab(), this._getResourcesTab()];
        },
        _getPlanetTab : function() {
            var planet = this.result.planet,
                tab = new YAHOO.widget.Tab({ label: "Planet", content: [
                    '<div class="yui-g buildingDetailsExtra">',
                    '    <div class="yui-u first">',
                    '        <ul>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></span>',
                    '                <span class="pcStored">',planet.food_stored, '</span><span class="pcSlash">/</span><span class="pcCapacity">', planet.food_capacity, '</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.food_hour),'</span>/hr</li>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" /></span>',
                    '                <span class="pcStored">',planet.ore_stored, '</span><span class="pcSlash">/</span><span class="pcCapacity">', planet.ore_capacity, '</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.ore_hour),'</span>/hr</li>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></span>',
                    '                <span class="pcStored">',planet.water_stored, '</span><span class="pcSlash">/</span><span class="pcCapacity">', planet.water_capacity, '</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.water_hour),'</span>/hr</li>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></span>',
                    '                <span class="pcStored">',planet.energy_stored, '</span><span class="pcSlash">/</span><span class="pcCapacity">', planet.energy_capacity, '</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.energy_hour),'</span>/hr</li>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></span>',
                    '                <span class="pcStored">',planet.waste_stored, '</span><span class="pcSlash">/</span><span class="pcCapacity">', planet.waste_capacity, '</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.waste_hour),'</span>/hr</li>',
                    '            <li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/happiness.png" title="Happiness" class="smallHappy" /></span>',
                    '                <span class="pcStored">',planet.happiness, '</span><span class="pcSlash">&nbsp;</span><span class="pcCapacity">&nbsp;</span> @ <span class="pcPerHour">', Lib.convertNumDisplay(planet.happiness_hour),'</span>/hr</li>',
                    '        </ul>',
                    '    </div>',
                    '    <div class="yui-u first">',
                    '        <ul class="buildingDetailsPC">',
                    '            <li><label>Buildings:</label>',planet.building_count,'</li>',
                    '            <li><label>Planet Size:</label>',planet.size,'</li>',
                    '            <li><label>Plots Available:</label>',(planet.plots_available || 0)*1,'</li>',
                    '            <li><label>Population:</label>',Lib.formatNumber(planet.population),'</li>',
                    '            <li><label>Next Colony Cost:</label>',Lib.formatNumber(this.result.next_colony_cost),'<span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/happiness.png" /></span></li>',
                    '            <li><label>Location:</label>',planet.x,'x : ',planet.y,'y</li>',
                    '            <li><label>Zone:</label>',planet.zone,'</li>',
                    '            <li><label>Star:</label>',planet.star_name,'</li>',
                    '            <li><label>Orbit:</label>',planet.orbit,'</li>',
                    '        </ul>',
                    '    </div>',
                    '</div>'
                ].join('')});
                
            this.planetTab = tab;
            
            return tab;
        },
        _getAbandonTab : function() {
            this.abandonTab = new YAHOO.widget.Tab({ label: "Abandon", content: ['<div>',
            '    <div id="commandMessage" class="alert">This colony and everything on it will disappear if you abandon it.</div>',
            '    <button type="button" id="commandAbandon">Abandon Colony</button>',
            '</div>'].join('')});
            
            Event.on("commandAbandon", "click", this.Abandon, this, true);
            
            return this.abandonTab;
        },
        _getRenameTab : function() {
            this.renameTab = new YAHOO.widget.Tab({ label: "Rename", content: ['<div><ul>',
            '    <li><label>Current Planet Name: </label><span id="commandPlanetCurrentName">',Game.GetCurrentPlanet().name,'</span></li>',
            '    <li><label>New Planet Name: </label><input type="text" id="commandPlanetNewName" maxlength="100" /></li>',
            '    <li class="alert" id="commandPlanetRenameMessage"></li>',
            '    <li><button type="button" id="commandRename">Rename</button></li>',
            '</ul></div>'].join('')});
            
            Event.on("commandRename", "click", this.Rename, this, true);
            
            return this.renameTab;
        },
        _getPlanTab : function() {
            this.planTab = new YAHOO.widget.Tab({ label: "Plans", content: [
                '<ul class="plan planHeader clearafter"><li class="planQuan">Quantity</li><li class="planName">Name</li><li class="planLevel">Level</li><li class="planExtra">Extra Level</li></ul>',
                '<div>',
                '    <div id="planDetails">',
                '    </div>',
                '</div>'
            ].join('')});
            this.planTab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    if(!this.plans) {
                        Lacuna.Pulser.Show();
                        this.service.view_plans({session_id:Game.GetSession(),building_id:this.building.id}, {
                            success : function(o){
                                Lacuna.Pulser.Hide();
                                this.rpcSuccess(o);
                                this.plans = o.result.plans;
                                
                                this.PlanPopulate();
                            },
                            scope:this
                        });
                    }
                    else {
                        this.PlanPopulate();
                    }
                }
            }, this, true);
                
            return this.planTab;
        },
        _getResourcesTab : function() {
            
            var food_items = '',
                foods      = Lib.ResourceTypes.food;
            
            for(x=0; x < foods.length; x++) {
                food = foods[x];
                
                food_items += [
                    '<li><label>',
                    food.titleCaps(),
                    '</label><span class="pcStored">',
                    this.result.food[food+"_stored"],
                    '</span> @ <span class="pcPerHour">',
                    Lib.convertNumDisplay(this.result.food[food+"_hour"]),
                    '</span>/hr</li>',
                ].join('');
            }
            
            var ore_items = '',
                ores      = Lib.ResourceTypes.ore;
            
            for(x=0; x < ores.length; x++) {
                ore = ores[x];
                
                ore_items += [
                    '<li><label>',
                    ore.titleCaps(),
                    '</label><span class="pcStored">',
                    this.result.ore[ore+"_stored"],
                    '</span> @ <span class="pcPerHour">',
                    Lib.convertNumDisplay(this.result.ore[ore+"_hour"]),
                    '</span>/hr</li>',
                ].join('');
            }
            ore_items += [
                    '<li><label>Water</label><span class="pcStored">',
                    this.result.planet.water_stored,
                    '</span> @ <span class="pcPerHour">',
                    Lib.convertNumDisplay(this.result.planet.water_hour),
                    '</span>/hr</li>',
                ].join('');
            ore_items += [
                    '<li><label>Energy</label><span class="pcStored">',
                    this.result.planet.energy_stored,
                    '</span> @ <span class="pcPerHour">',
                    Lib.convertNumDisplay(this.result.planet.energy_hour),
                    '</span>/hr</li>',
                ].join('');

            this.resourcesTab = new YAHOO.widget.Tab({ label: "Resources", content: [
                    '<div class="yui-g buildingDetailsExtra">',
                    '    <div class="yui-u first">',
                    '        <ul class="buildingDetailsPC">',
                    food_items,
                    '        </ul>',
                    '    </div>',
                    '    <div class="yui-u first">',
                    '        <ul class="buildingDetailsPC">',
                    ore_items,
                    '        </ul>',
                    '    </div>',
                    '</div>'
                ].join('')});
                
            return this.resourcesTab;
        },
        Abandon : function() {
            var cp = Game.GetCurrentPlanet();
            if(confirm(['Are you sure you want to abandon ',cp.name,'?'].join(''))) {
                Lacuna.Pulser.Show();
                Game.Services.Body.abandon({
                    session_id:Game.GetSession(""),
                    body_id:cp.id
                }, {
                success : function(o){
                    YAHOO.log(o, "info", "PlanetaryCommand.abandon.success");
                    this.rpcSuccess(o);

                    delete Game.EmpireData.planets[cp.id]; // Remove the abandoned planet

                    // Clean up the star map
                    if(Lacuna.MapStar._map) {
                        if(cp.x && cp.y) {
                            if(Lacuna.MapStar._map.tileCache[cp.x] && Lacuna.MapStar._map.tileCache[cp.x][cp.y]) {
                                delete Lacuna.MapStar._map.tileCache[cp.x][cp.y]; // Remove the planet from the cache
                            }
                            var tileId = ['tile',cp.x,cp.y,Lacuna.MapStar._map.zoom].join('_');
                            var tile = Lacuna.MapStar._map.tileLayer.tileCache[tileId];
                            if(tile) {
                                if(tile.domElement) {
                                    var domEl = tile.domElement; // get the element
                                    var childEl = domEl.childNodes[1]; // find the alignment child
                                    if(childEl) {
                                        domEl.removeChild(childEl); // remove it
                                    }
                                }
                                delete tile.data; // Remove the data
                                delete tile.alignHolder; // Remove the alignment display
                                tile.blank = true; // Force the planet to redraw
                            }
                        }
                    }

                    this.fireEvent("onHide");
                    Game.PlanetJump(); //jumps to home planet if nothing passed in
                    
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
            }
        },
        Rename : function() {
            var newName = Dom.get("commandPlanetNewName").value,
                cp = Game.GetCurrentPlanet(),
                planetId = cp.id;
            Game.Services.Body.rename({
                    session_id: Game.GetSession(""),
                    body_id:planetId,
                    name:newName
                },{
                    success : function(o){
                        YAHOO.log(o, "info", "PlanetaryCommand.Rename.success");
                        if(o.result && planetId) {
                        
                            Dom.get("commandPlanetRenameMessage").innerHTML = ["Successfully renamed your planet from ", Game.EmpireData.planets[planetId].name," to ", newName, '.'].join('');
                            Lib.fadeOutElm("commandPlanetRenameMessage");
                            Dom.get("commandPlanetNewName").value = "";
                            Dom.get("commandPlanetCurrentName").innerHTML = newName;
                            Game.EmpireData.planets[planetId].name = newName;
                            Lacuna.Menu.update();

                            if(Lacuna.MapStar._map) {
                                Lacuna.MapStar._map.tileCache[cp.x][cp.y].name = newName; // Change the name in the cache
                                var tileId = ['tile',cp.x,cp.y,Lacuna.MapStar._map.zoom].join('_');
                                var tile = Lacuna.MapStar._map.tileLayer.tileCache[tileId];
                                if(tile) {
                                    tile.blank = true; // Force the planet to redraw
                                }
                            }
                        }
                    },
                    failure : function(o){
                        Dom.get("commandPlanetRenameMessage").innerHTML = o.error.message;
                        Lib.fadeOutElm("commandPlanetRenameMessage");
                        return true;
                    },
                    scope:this
                }
            );
        },
        PlanPopulate : function(){
            var div = Dom.get("planDetails");
            if(div) {
                var divParent = div.parentNode,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                div = divParent.removeChild(div);
                
                if(this.plans.length > 0) {
                    div.innerHTML = "";

                    for(var i=0; i<this.plans.length; i++) {
                        var plan = this.plans[i],
                            nUl = ul.cloneNode(false),
                            nLi = li.cloneNode(false);
                        
                        Dom.addClass(nUl, "plan");
                        Dom.addClass(nUl, "clearafter");

                        Dom.addClass(nLi,"planQuan");
                        nLi.innerHTML = plan.quantity;
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"planName");
                        nLi.innerHTML = plan.name;
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"planLevel");
                        nLi.innerHTML = plan.level;
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"planExtra");
                        nLi.innerHTML = plan.extra_build_level;
                        nUl.appendChild(nLi);

                        div.appendChild(nUl);
                    }
                }
                else {
                    div.innerHTML = "No Plans currently available on this planet.";
                }
                
                //add child back in
                divParent.appendChild(div);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 170;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(divParent,"height",Ht + "px");
                    Dom.setStyle(divParent,"overflow-y","auto");
                },10);
            }
        }
    });
    
    Lacuna.buildings.PlanetaryCommand = PlanetaryCommand;

})();
YAHOO.register("planetarycommand", YAHOO.lacuna.buildings.PlanetaryCommand, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/planetaryCommand.js","/building")
},{"buffer":71,"oMfpAn":75}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.PoliticsTraining == "undefined" || !YAHOO.lacuna.buildings.PoliticsTraining) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var PoliticsTraining = function(result){
        PoliticsTraining.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.PoliticsTraining;
    };
    
    Lang.extend(PoliticsTraining, Lacuna.buildings.Building, {
        destroy : function() {
            PoliticsTraining.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTrainTab()];
        },
        _getTrainTab : function() {
            var spies = this.result.spies;
            this.trainTab = new YAHOO.widget.Tab({ label: "Train Spies", content: [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><span style="font-weight:bold;">Spies Training : </span> <span id="spiesCurrent">',spies.in_training,'</span></li>',
                '            <li><span style="font-weight:bold;">Points per hour : </span> <span id="pointsper">',spies.points_per,'</span></li>',
                '            <li><span style="font-weight:bold;">Max Points : </span> <span id="pointsper">',spies.max_points,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            
            return this.trainTab;
        },
        
    });
    
    YAHOO.lacuna.buildings.PoliticsTraining = PoliticsTraining;

})();
YAHOO.register("PoliticsTraining", YAHOO.lacuna.buildings.PoliticsTraining, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/politicsTraining.js","/building")
},{"buffer":71,"oMfpAn":75}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Security == "undefined" || !YAHOO.lacuna.buildings.Security) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Security = function(result){
        Security.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Security;
        
        this.foreignSpiesMessage = "There may be spies on your planet that we don't know about.";
    };
    
    Lang.extend(Security, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.pagerPrisoners) {
                this.pagerPrisoners.destroy();
            }
            if(this.pagerSpies) {
                this.pagerSpies.destroy();
            }
            Security.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getPrisonersTab(), this._getSpiesTab()];
        },
        _getPrisonersTab : function() {
            var spies = this.result.spies;
            this.prisonersTab = new YAHOO.widget.Tab({ label: "Prisoners", content: [
                '<div>',
                '    <ul class="spiesHeader securityInfo clearafter">',
                '        <li class="securityName">Name</li>',
                '        <li class="securityLevel">Level</li>',
                '        <li class="securitySentence">Sentence Expires</li>',
                '        <li class="securityStatus">Status</li>',
                '        <li class="securityExecute">Execute</li>',
                '        <li class="securityRelease">Release</li>',
                '    </ul>',
                '    <div><div id="prisonersDetails"></div></div>',
                '    <div id="prisonersPaginator"></div>',
                '</div>'
            ].join('')});
            this.prisonersTab.subscribe("activeChange", this.prisonersView, this, true);
            
            return this.prisonersTab;
        },
        _getSpiesTab : function() {
            this.spiesTab = new YAHOO.widget.Tab({ label: "Foreign Spies", content: [
                '<div>',
                '    <p>',this.foreignSpiesMessage,'</p>',
                '    <ul class="spiesHeader securityInfo clearafter">',
                '        <li class="securityName">Name</li>',
                '        <li class="securityLevel">Level</li>',
                '        <li class="securityNextMisson">Next Misson</li>',
                '        <li class="securityNextMisson">Current Misson</li>',
                '    </ul>',
                '    <div><div id="securityDetails"></div></div>',
                '    <div id="securityPaginator"></div>',
                '</div>'
            ].join('')});
            this.spiesTab.subscribe("activeChange", this.spiesView, this, true);
                    
            return this.spiesTab;
        },
        
        prisonersView : function(e) {
            if(e.newValue) {
                if(!this.prisoners) {
                    Lacuna.Pulser.Show();
                    this.service.view_prisoners({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            YAHOO.log(o, "info", "Security.Security.view_prisoners.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.prisoners = o.result.prisoners;
                            this.pagerPrisoners = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.captured_count,
                                containers  : 'prisonersPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.pagerPrisoners.subscribe('changeRequest',this.PrisonersHandlePagination, this, true);
                            this.pagerPrisoners.render();
                            
                            this.PrisonersPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.SpyPopulate();
                }
            }
        },
        PrisonersPopulate : function() {
            var details = Dom.get("prisonersDetails");
            if(details) {
                var prisoners = this.prisoners,
                    div = document.createElement("div"),
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                Dom.setStyle(details.parentNode,"height","");
                Dom.setStyle(details.parentNode,"overflow-y","");
                for(var i=0; i<prisoners.length; i++) {
                    var prisoner = prisoners[i],
                        nDiv = div.cloneNode(false),
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    Dom.addClass(nDiv, "securityInfo");
                    Dom.addClass(nUl, "clearafter");

                    Dom.addClass(nLi,"securityName");
                    nLi.innerHTML = prisoner.name;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityLevel");
                    nLi.innerHTML = prisoner.level;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securitySentence");
                    nLi.innerHTML = Lib.formatServerDate(prisoner.sentence_expires);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityStatus");
                    nLi.innerHTML = prisoner.task;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityExecute");
                    var Ebtn = document.createElement("button");
                    Ebtn.setAttribute("type", "button");
                    Ebtn.innerHTML = "Execute";
                    Ebtn = nLi.appendChild(Ebtn);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityRelease");
                    var Rbtn = document.createElement("button");
                    Rbtn.setAttribute("type", "button");
                    Rbtn.innerHTML = "Release";
                    Rbtn = nLi.appendChild(Rbtn);
                    nUl.appendChild(nLi);

                    nDiv.appendChild(nUl);

                    details.appendChild(nDiv);
                    
                    Event.on(Ebtn, "click", this.PrisonersExecute, {Self:this,Prisoner:prisoner,Line:nDiv}, true);
                    Event.on(Rbtn, "click", this.PrisonersRelease, {Self:this,Prisoner:prisoner,Line:nDiv}, true);
                }
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 200;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        PrisonersHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_prisoners({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Security.PrisonersHandlePagination.view_prisoners.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.prisoners = o.result.prisoners;
                    this.PrisonersPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pagerPrisoners.setState(newState);
        },
        PrisonersExecute : function() {
            if(confirm(["Are you sure you want to execute ",this.Prisoner.name,"?"].join(''))) {
                Lacuna.Pulser.Show();
                
                this.Self.service.execute_prisoner({
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    prisoner_id:this.Prisoner.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Security.PrisonersExecute.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        var prisoners = this.Self.prisoners;
                        for(var i=0; i<prisoners.length; i++) {
                            if(prisoners[i].id == this.Prisoner.id) {
                                prisoners.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                    },
                    scope:this
                });
            }
        },
        PrisonersRelease : function() {
            if(confirm(["Are you sure you want to release ",this.Prisoner.name,"?"].join(''))) {
                Lacuna.Pulser.Show();
                
                this.Self.service.release_prisoner({
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    prisoner_id:this.Prisoner.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Security.PrisonersRelease.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        var prisoners = this.Self.prisoners;
                        for(var i=0; i<prisoners.length; i++) {
                            if(prisoners[i].id == this.Prisoner.id) {
                                prisoners.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                    },
                    scope:this
                });
            }
        },

        spiesView : function(e) {
            if(e.newValue) {
                if(!this.spies) {
                    Lacuna.Pulser.Show();
                    this.service.view_foreign_spies({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            YAHOO.log(o, "info", "Security.Security.view_foreign_spies.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.spies = o.result.spies;
                            this.pagerSpies = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.spy_count,
                                containers  : 'securityPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.pagerSpies.subscribe('changeRequest',this.SpyHandlePagination, this, true);
                            this.pagerSpies.render();
                            
                            this.SpyPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.SpyPopulate();
                }
            }
        },
        SpyPopulate : function() {
            var details = Dom.get("securityDetails");
            if(details) {
                var spies = this.spies,
                    div = document.createElement("div"),
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                Dom.setStyle(details.parentNode,"height","");
                Dom.setStyle(details.parentNode,"overflow-y","");
                
                for(var i=0; i<spies.length; i++) {
                    var spy = spies[i],
                        nDiv = div.cloneNode(false),
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    Dom.addClass(nDiv, "securityInfo");
                    Dom.addClass(nUl, "clearafter");

                    Dom.addClass(nLi,"securityName");
                    nLi.innerHTML = spy.name;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityLevel");
                    nLi.innerHTML = spy.level;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityNextMisson");
                    nLi.innerHTML = Lib.formatServerDate(spy.next_mission);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"securityTask");
                    nLi.innerHTML = spy.task;
                    nUl.appendChild(nLi);
                    nDiv.appendChild(nUl);

                    details.appendChild(nDiv);
                }
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 200;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        SpyHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_foreign_spies({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Security.SpyHandlePagination.view_foreign_spies.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.spies = o.result.spies;
                    this.SpyPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pagerSpies.setState(newState);
        }

    });
    
    YAHOO.lacuna.buildings.Security = Security;

})();
YAHOO.register("Security", YAHOO.lacuna.buildings.Security, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/security.js","/building")
},{"buffer":71,"oMfpAn":75}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Shipyard == "undefined" || !YAHOO.lacuna.buildings.Shipyard) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Shipyard = function(result){
        Shipyard.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Shipyard;
    };
    
    Lang.extend(Shipyard, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getQueueTab(), this._getBuildTab()];
        },
        _getQueueTab : function() {
            var div = document.createElement("div");
            div.innerHTML = ['<div>You may subsidize the build queue for 1 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /> per ship. <button type="button" class="shipQueueSubsidize">Subsidize</button> </div>',
                '<ul class="shipQueue shipQueueHeader clearafter"><li class="shipQueueType">Type</li><li class="shipQueueEach">Time To Complete</li></ul>',
                '<div id="qHt" style="overflow:auto;"><div id="shipsBuilding"></div></div>'].join('');
            Event.on(Sel.query(".shipQueueSubsidize",div,true), "click", this.SubsidizeBuildQueue, this, true);
        
            var queueTab = new YAHOO.widget.Tab({ label: "Build Queue", contentEl:div });
            queueTab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.getQueue();
                    var Ht = Game.GetSize().h - 210;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(Dom.get('qHt'),'height',Ht + 'px');
                    }
            }, this, true);
                    
            this.queueTab = queueTab;
            
            return queueTab;
        },
        _getBuildTab : function() {
            var buildTab = new YAHOO.widget.Tab({ label: "Build Ships", content: [
                '<div>',
                '    <div class="clearafter" style="font-weight:bold;">',
                '        <span id="shipDocksAvailable" style="float:left;"></span>',
                '        <span style="float:right;"><select id="shipBuildView"><option value="All">All</option><option value="Now" selected="selected">Now</option><option value="Later">Later</option></select></span>',
                '    </div>',
                '    <div id="shipBuildMessage" class="error"></div>',
                '    <div id="bHt" style="overflow:auto;margin-top:2px;border-top:1px solid #52acff;">',
                '        <ul id="shipDetails">',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});

            buildTab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.getBuild();
                    var Ht = Game.GetSize().h - 190;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(Dom.get('bHt'),'height',Ht + 'px');
                }
            }, this, true);
            
            Event.on("shipBuildView", "change", this.ShipPopulate, this, true);

            this.buildTab = buildTab;
            
            return buildTab;
        },
        getBuild : function() {
            if(!this.ships) {
                Lacuna.Pulser.Show();
                this.service.get_buildable({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Shipyard.getBuild.get_buildable.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.ships = {
                            buildable: o.result.buildable,
                            docks_available: o.result.docks_available,
                            build_queue_max: o.result['build_queue_max'],
                            build_queue_used: o.result['build_queue_used']
                        };
                        this.SetDocksAvailableMessage();
                        this.ShipPopulate();
                    },
                    scope:this
                });
            }
            else {
                this.ShipPopulate();
            }
        },
        getQueue : function() {
            if(!this.ship_build_queue) {
                Lacuna.Pulser.Show();
                this.service.view_build_queue({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Shipyard.getQueue.view_build_queue.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.ship_build_queue = o.result;
                        this.ShipyardDisplay();
                    },
                    scope:this
                });
            }
            else {
                this.ShipyardDisplay();
            }
        },
        ShipyardDisplay : function() {
            var bq = this.ship_build_queue,
                div = Dom.get("shipsBuilding");

            if(div) {
                var divParent = div.parentNode,
                    ul = document.createElement("ul"),
                    li = document.createElement("li"),
                    serverTime = Lib.getTime(Game.ServerData.time);

                this.resetQueue();
                div = divParent.removeChild(div);
                div.innerHTML = "";
                
                /*= {
                    number_of_ships_building: o.result.number_of_ships_building,
                    ships_building: o.result.ships_building
                };*/
                if(bq && bq.ships_building && bq.ships_building.length > 0) {
                    for(var i=0; i<bq.ships_building.length; i++) {
                        var bqo = bq.ships_building[i],
                            nUl = ul.cloneNode(false),
                            nLi = li.cloneNode(false),
                            ncs = (Lib.getTime(bqo.date_completed) - serverTime) / 1000;
                        
                        nUl.Build = bqo;
                        
                        Dom.addClass(nUl, "shipQueue");
                        Dom.addClass(nUl, "clearafter");

                        Dom.addClass(nLi,"shipQueueType");
                        nLi.innerHTML = bqo.type_human;
                        nUl.appendChild(nLi);
                        
                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"shipQueueEach");
                        nLi.innerHTML = Lib.formatTime(ncs);
                        nUl.appendChild(nLi);

                        nLi = li.cloneNode(false);
                        Dom.addClass(nLi,"shipQueueEach");
                        sbtn = document.createElement('button');
                        sbtn.setAttribute('type', 'button');
                        sbtn.innerHTML = 'Subsidize';
                        nLi.appendChild(sbtn);
                        nUl.appendChild(nLi);


                        div.appendChild(nUl);
                        Event.on(sbtn, "click", this.SubsidizeShip, {Self:this,Ship:bqo, Item:nUl}, true);
                        this.addQueue(ncs, this.ShipyardQueue, nUl);
                    }
                }
                //add child back in
                divParent.appendChild(div);
            }
        },
        ShipyardQueue : function(remaining, elLine){
            var compTime;
            if(remaining <= 0) {
                compTime = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                compTime = Lib.formatTime(Math.round(remaining));
            }
            Sel.query("li.shipQueueEach",elLine,true).innerHTML = compTime;
        },
        SubsidizeBuildQueue : function() {
            Lacuna.Pulser.Show();
            
            this.service.subsidize_build_queue({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Shipyard.SubsidizeBuildQueue.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);

                    this.ship_build_queue = undefined;
                    this.ShipyardDisplay();
                },
                scope:this
            });
        },
        
        SetBuildMessage : function(message) {
            var msg = Dom.get("shipBuildMessage");
            if(msg) {
                msg.innerHTML = message;
                Lib.fadeOutElm("shipBuildMessage");
            }
        },
        SetDocksAvailableMessage : function() {
            var sda = Dom.get("shipDocksAvailable");
            if(sda) {
                if(this.ships.docks_available) {
                    var message = 'There are ' + this.ships.docks_available + ' docks available for new ships.';
                    if (this.ships.build_queue_max && this.ships.build_queue_max - this.ships.build_queue_used > 0) {
                        message += '  You can queue ' + (this.ships.build_queue_max - this.ships.build_queue_used) + (this.ships.build_queue_used && this.ships.build_queue_used-0 ? ' additional' : '') + ' ships.';
                    }
                    else if (this.ships.build_queue_max) {
                        message += '  However, your build queue is full.';
                    }
                    sda.innerHTML = message;
                }
                else {
                    sda.innerHTML = 'You have no docks available.  Do you still have a Space Port?';
                }
            }
        },
        ShipPopulate : function() {
            var details = Dom.get("shipDetails");
            
            if(details) {
                var ships = this.ships.buildable,
                    li = document.createElement("li"),
                    shipNames = [],
                    filter = Lib.getSelectedOptionValue("shipBuildView"),
                    defReason = !this.ships.docks_available ? "No docks available at Space Port." : undefined;
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                        
                for(var shipType in ships) {
                    if(ships.hasOwnProperty(shipType)) {
                        if(filter == "All") {
                            shipNames.push(shipType);
                        }
                        else if(filter == "Now" && ships[shipType].can) {
                            shipNames.push(shipType);
                        }
                        else if(filter == "Later" && !ships[shipType].can) {
                            shipNames.push(shipType);
                        }
                    }
                }
                shipNames.sort();
                
                for(var i=0; i<shipNames.length; i++) {
                    var shipName = shipNames[i],
                        ship = ships[shipName],
                        nLi = li.cloneNode(false),
                        reason="", attributes = [];
                    
                    if(ship.reason) {
                        reason = '<div style="font-style:italic;">'+ship.reason[1]+'</div>';
                        //reason = '<div style="font-style:italic;">'+Lib.parseReason(ship.reason, defReason)+'</div>';
                    }
                    
                    for(var a in ship.attributes) {
                        attributes[attributes.length] = '<span style="white-space:nowrap;margin-left:5px;"><label style="font-style:italic">';
                        attributes[attributes.length] = a.titleCaps('_',' ');
                        attributes[attributes.length] = ': </label>';
                        attributes[attributes.length] = ship.attributes[a];
                        attributes[attributes.length] = '</span> ';
                    }
                    
                    nLi.innerHTML = ['<div class="yui-gb" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',shipName,'.png" style="width:100px;height:100px;" class="shipImage" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:63%">',
                    '        <span class="shipName">',ship.type_human,'</span>: ',
                    '        <div class="shipDesc" style="display:none;">',Game.GetShipDesc(shipName),'</div>',
                    '        <div><label style="font-weight:bold;">Cost:</label>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" />',ship.cost.food,'</span>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre" />',ship.cost.ore,'</span>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" />',ship.cost.water,'</span>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" />',ship.cost.energy,'</span>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" />',ship.cost.waste,'</span>',
                    '            <span style="white-space:nowrap;"><img src="',Lib.AssetUrl,'ui/s/time.png" title="Time" class="smallTime" />',Lib.formatTime(ship.cost.seconds),'</span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',attributes.join(''),'</div>',
                    !ship.can ? reason : '',
                    '    </div>',
                    '    <div class="yui-u" style="width:18%">',
                    ship.can ? ' <input type="text" style="width:25px;" id="ship_'+shipName+'" value="1"> <button type="button">Build</button>' : 
                    '    </div>',
                    '</div>'].join('');
                    if(ship.can) {
                        Event.on(Sel.query("button", nLi, true), "click", this.ShipBuild, {Self:this,Type:shipName,Ship:ship}, true);
                    }
                    
                    details.appendChild(nLi);
                    
                }
                
                Event.delegate(details, "click", this.ShipExpandDesc, ".shipName");
                Event.delegate(details, "click", this.ShipExpandDesc, ".shipImage");
            }
        },
        ShipExpandDesc : function(e, matchedEl, container) {
            var desc = Sel.query('div.shipDesc', matchedEl.parentNode.parentNode, true);
            if(desc) {
                var dis = Dom.getStyle(desc, "display");
                Dom.setStyle(desc, "display", dis == "none" ? "" : "none");
            }
        },
        SubsidizeShip : function() {
             Lacuna.Pulser.Show();
             this.Self.service.subsidize_ship({args: {
				    session_id: Game.GetSession(),
                    building_id: this.Self.building.id,
					ship_id: this.Ship.id
			 }},{
					success: function(o) {
						Lacuna.Pulser.Hide();
						this.Self.rpcSuccess(o);
						this.Item.parentNode.removeChild(this.Item);
						
					}, scope: this
				});
		},
        ShipBuild : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            var qty = Dom.get("ship_"+this.Type);
            this.Self.service.build_ship({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                type:this.Type,
                quantity:qty.value
            }, {
                success : function(o){
                    btn.disabled = false;
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);

                    this.Self.ship_build_queue = o.result;
                    this.Self.ShipyardDisplay();
                    
                    this.Self.ships.docks_available-=qty.value;
                    if(this.Self.ships.docks_available < 0) {
                        this.Self.ships.docks_available = 0;
                    }
                    this.Self.SetDocksAvailableMessage();
                    this.Self.SetBuildMessage("Successfully started building " + this.Ship.type_human + ".");
                },
                failure : function(o){
                    btn.disabled = false;
                },
                scope:this
            });
        }
        
    });
    
    YAHOO.lacuna.buildings.Shipyard = Shipyard;

})();
YAHOO.register("shipyard", YAHOO.lacuna.buildings.Shipyard, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/shipyard.js","/building")
},{"buffer":71,"oMfpAn":75}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.SpacePort == "undefined" || !YAHOO.lacuna.buildings.SpacePort) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Pager = YAHOO.widget.Paginator,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var SpacePort = function(result){
        SpacePort.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.SpacePort;
    };
    
    Lang.extend(SpacePort, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.shipsPager) {
                this.shipsPager.destroy();
            }
            if(this.viewPager) {
                this.viewPager.destroy();
            }
            if(this.foreignPager) {
                this.foreignPager.destroy();
            }
            if(this.orbitingPager) {
                this.orbitingPager.destroy();
            }
            SpacePort.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTravelTab(), this._getViewTab(), this._getOrbitingTab(), this._getForeignTab(), this._getLogsTab(), this._getSendTab(), this._getSendFleetTab()];
        },
        _getTravelTab : function() {
            this.travelTab = new YAHOO.widget.Tab({ label: "Travelling", content: [
                '<div>',
                '    <div style="overflow:auto;margin-top:2px;">',
                '        <ul id="shipDetails"></ul>',
                '    </div>',
                '    <div id="shipsPaginator"></div>',
                '</div>'
            ].join('')});
            /*
            
                '    <ul class="shipHeader shipInfo clearafter">',
                '        <li class="shipTypeImage">&nbsp;</li>',
                '        <li class="shipName">Name</li>',
                '        <li class="shipArrives">Arrives</li>',
                '        <li class="shipFrom">From</li>',
                '        <li class="shipTo">To</li>',
                '        <li class="shipSpeed">Speed</li>',
                '        <li class="shipHold">Hold Size</li>',
                '        <li class="shipHold">Stealth</li>',
                '    </ul>',
                '    <div><div id="shipDetails"></div></div>',
            */
            //subscribe after adding so active doesn't fire
            this.travelTab.subscribe("activeChange", this.getTravel, this, true);
            
            return this.travelTab;
        },
        _getViewTab : function() {
            this.viewShipsTab = new YAHOO.widget.Tab({ label: "View", content: [
                '<div>',
                '    <div class="yui-ge" style="border-bottom:1px solid #52acff;"><div id="shipsCount" class="yui-u first"></div><div class="yui-u"><button type="button" id="shipsRecallAll" style="display:none;">Recall All</button></div></div>',    
                '    <div style="overflow:auto;margin-top:2px;"><ul id="shipsViewDetails"></ul></div>',
                '    <div id="shipsViewPaginator"></div>',
                '</div>'
            ].join('')});
            //subscribe after adding so active doesn't fire
            this.viewShipsTab.subscribe("activeChange", this.getShips, this, true);
            Event.on("shipsRecallAll", "click", this.ShipRecallAll, this, true);
            
            return this.viewShipsTab;
        },
        _getOrbitingTab : function() {
            this.viewOrbitingTab = new YAHOO.widget.Tab({ label: "Foreign Orbiting", content: [
                '<div>',
                '    <ul class="shipHeader shipInfo clearafter">',
                '        <li class="shipTypeImage">&nbsp;</li>',
                '        <li class="shipName">Name</li>',
                '        <li class="shipArrives">Arrived</li>',
                '        <li class="shipFrom">From</li>',
                '    </ul>',
                '    <div><div id="shipsOrbitingDetails"></div></div>',
                '    <div id="shipsOrbitingPaginator"></div>',
                '</div>'
            ].join('')});
            this.viewOrbitingTab.subscribe("activeChange", this.getOrbiting, this, true);
            
            return this.viewOrbitingTab;
        },
        _getForeignTab : function() {
            this.foreignShipsTab = new YAHOO.widget.Tab({ label: "Incoming", content: [
                '<div>',
                '    <ul class="shipHeader shipInfo clearafter">',
                '        <li class="shipTypeImage">&nbsp;</li>',
                '        <li class="shipName">Name</li>',
                '        <li class="shipArrives">Arrives</li>',
                '        <li class="shipFrom">From</li>',
                '    </ul>',
                '    <div><div id="shipsForeignDetails"></div></div>',
                '    <div id="shipsForeignPaginator"></div>',
                '</div>'
            ].join('')});
            //subscribe after adding so active doesn't fire
            this.foreignShipsTab.subscribe("activeChange", this.getForeign, this, true);
            
            return this.foreignShipsTab;
        },
        _getLogsTab : function() {
            this.battleLogsTab = new YAHOO.widget.Tab({ label: "Battle Logs", content: [
                '<div>',
                '    <ul class="shipHeader shipInfo clearafter" style="padding-left:5px; padding-right:5px;">',
                '        <li class="shipTask">Role</li>',
                '        <li class="shipName">Name</li>',
                '        <li class="shipFrom">From</li>',
                '        <li>Details</li>',
                '    </ul>',
                '    <div><div id="battleLogsDetails"></div></div>',
                '    <div id="battleLogsPaginator"></div>',
                '</div>'
            ].join('')});
            //subscribe after adding so active doesn't fire
            this.battleLogsTab.subscribe("activeChange", this.getLogs, this, true);
            
            return this.battleLogsTab;
        },
        _getSendTab : function() {
            this.sendTab = new YAHOO.widget.Tab({ label: "Send", content: [
                '<div id="sendShipPick">',
                '    Send To <select id="sendShipType"><option value="body_name">Planet Name</option><option value="body_id">Planet Id</option><option value="star_name">Star Name</option><option value="star_id">Star Id</option><option value="xy">X,Y</option></select>',
                '    <span id="sendShipTargetSelectText"><input type="text" id="sendShipTargetText" /></span>',
                '    <span id="sendShipTargetSelectXY" style="display:none;">X:<input type="text" id="sendShipTargetX" /> Y:<input type="text" id="sendShipTargetY" /></span>',
                '    <button type="button" id="sendShipGet">Get Available Ships For Target</button>',
                '</div>',
                '<div id="sendShipSend" style="display:none;border-top:1px solid #52ACFF;margin-top:5px;padding-top:5px">',
                '    Sending ships to: <span id="sendShipNote"></span>',
                '    <div style="border-top:1px solid #52ACFF;margin-top:5px;"><ul id="sendShipAvail"></ul></div>',
                '</div>'
            ].join('')});
            
            Event.on("sendShipType", "change", function(){
                if(Lib.getSelectedOptionValue(this) == "xy") {
                    Dom.setStyle("sendShipTargetSelectText", "display", "none");
                    Dom.setStyle("sendShipTargetSelectXY", "display", "");
                }
                else {
                    Dom.setStyle("sendShipTargetSelectText", "display", "");
                    Dom.setStyle("sendShipTargetSelectXY", "display", "none");
                }
            });
            Event.on("sendShipGet", "click", this.GetShipsFor, this, true);
            
            return this.sendTab;
        },
        _getSendFleetTab : function() {
            this.sendFleetTab = new YAHOO.widget.Tab({ label: "Fleet", content: [
                '<div id="sendFleetPick">',
                '    Send To <select id="sendFleetType"><option value="body_name">Planet Name</option><option value="body_id">Planet Id</option><option value="star_name">Star Name</option><option value="star_id">Star Id</option><option value="xy">X,Y</option></select>',
                '    <span id="sendFleetTargetSelectText"><input type="text" id="sendFleetTargetText" /></span>',
                '    <span id="sendFleetTargetSelectXY" style="display:none;">X:<input type="text" id="sendFleetTargetX" /> Y:<input type="text" id="sendFleetTargetY" /></span>',
                '    <button type="button" id="sendFleetGet">Get Available Ships For Target</button>',
                '</div>',
                '<div id="sendFleetSend" style="display:none;border-top:1px solid #52ACFF;margin-top:5px;padding-top:5px">',
                '    <div class="yui-g"><div class="yui-u first">Sending ships to: <span id="sendFleetNote"></span></div><div class="yui-u" style="text-align:right;">Set speed:<input type="text" id="setSpeed" value="0" size="6"><button type="button" id="sendFleetSubmit">Send Fleet</button></div></div>',
                '    <div style="border-top:1px solid #52ACFF;margin-top:5px;"><ul id="sendFleetAvail"></ul></div>',
                '</div>'
            ].join('')});
            
            Event.on("sendFleetType", "change", function(){
                if(Lib.getSelectedOptionValue(this) == "xy") {
                    Dom.setStyle("sendFleetTargetSelectText", "display", "none");
                    Dom.setStyle("sendFleetTargetSelectXY", "display", "");
                }
                else {
                    Dom.setStyle("sendFleetTargetSelectText", "display", "");
                    Dom.setStyle("sendFleetTargetSelectXY", "display", "none");
                }
            });
            Event.on("sendFleetGet", "click", this.GetFleetFor, this, true);
            Event.on("sendFleetSubmit", "click", this.FleetSend, this, true);
            
            return this.sendFleetTab;
        },
        
        getTravel : function(e) {
            if(e.newValue) {
                if(!this.shipsTravelling) {
                    Lacuna.Pulser.Show();
                    this.service.view_ships_travelling({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                        success : function(o){
                            YAHOO.log(o, "info", "SpacePort.view_ships_travelling.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.shipsTravelling = {
                                number_of_ships_travelling: o.result.number_of_ships_travelling,
                                ships_travelling: o.result.ships_travelling
                            };
                            this.shipsPager = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.number_of_ships_travelling,
                                containers  : 'shipsPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.shipsPager.subscribe('changeRequest',this.ShipHandlePagination, this, true);
                            this.shipsPager.render();
                            
                            this.SpacePortPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.SpacePortPopulate();
                }
            }
        },
        getShips : function(e) {
            if(e.newValue) {
                if(!this.shipsView) {
                    Lacuna.Pulser.Show();
                    this.service.view_all_ships({session_id:Game.GetSession(),building_id:this.building.id,paging:{page_number:1}}, {
                        success : function(o){
                            YAHOO.log(o, "info", "SpacePort.view_all_ships.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.shipsView = {
                                number_of_ships: o.result.number_of_ships,
                                ships: o.result.ships
                            };
                            this.viewPager = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.number_of_ships,
                                containers  : 'shipsViewPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.viewPager.subscribe('changeRequest',this.ViewHandlePagination, this, true);
                            this.viewPager.render();
                            
                            this.ViewPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.ViewPopulate();
                }
            }
        },
        getForeign : function(e) {
            if(e.newValue) {
                if(!this.shipsForeign) {
                    Lacuna.Pulser.Show();
                    this.service.view_foreign_ships({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                        success : function(o){
                            YAHOO.log(o, "info", "SpacePort.view_foreign_ships.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.shipsForeign = {
                                number_of_ships: o.result.number_of_ships,
                                ships: o.result.ships
                            };
                            this.foreignPager = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.number_of_ships,
                                containers  : 'shipsForeignPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.foreignPager.subscribe('changeRequest',this.ForeignHandlePagination, this, true);
                            this.foreignPager.render();
                            
                            this.ForeignPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.ForeignPopulate();
                }
            }
        },
        getLogs : function(e) {
            if(e.newValue) {
                if(!this.battleLogs) {
                    Lacuna.Pulser.Show();
                    this.service.view_battle_logs({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            YAHOO.log(o, "info", "SpacePort.view_battle_logs.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.battleLogs = {
                                number_of_logs: o.result.number_of_logs,
                                battle_log: o.result.battle_log
                            };
                            this.logsPager = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.number_of_logs,
                                containers  : 'battleLogsPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.logsPager.subscribe('changeRequest',this.LogsHandlePagination, this, true);
                            this.logsPager.render();
                            
                            this.LogsPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.LogsPopulate();
                }
            }
        },
        getOrbiting : function(e) {
            if(e.newValue) {
                if(!this.shipsOrbiting) {
                    Lacuna.Pulser.Show();
                    this.service.view_ships_orbiting({session_id:Game.GetSession(),building_id:this.building.id}, {
                        success : function(o){
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.shipsOrbiting = {
                                number_of_ships: o.result.number_of_ships,
                                ships: o.result.ships
                            };
                            this.orbitingPager = new Pager({
                                rowsPerPage : 25,
                                totalRecords: o.result.number_of_ships,
                                containers  : 'shipsOrbitingPaginator',
                                template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                                alwaysVisible : false

                            });
                            this.orbitingPager.subscribe('changeRequest',this.OrbitingHandlePagination, this, true);
                            this.orbitingPager.render();
                            
                            this.OrbitingPopulate();
                        },
                        scope:this
                    });
                }
                else {
                    this.OrbitingPopulate();
                }
            }
        },
        
        SpacePortPopulate : function() {
            var ships = this.shipsTravelling.ships_travelling,
                details = Dom.get("shipDetails");

            if(details) {
                var parentEl = details.parentNode,
                    li = document.createElement("li"),
                    serverTime = Lib.getTime(Game.ServerData.time);

                Event.purgeElement(details, true);
                details = parentEl.removeChild(details);
                details.innerHTML = "";
                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false),
                        sec = (Lib.getTime(ship.date_arrives) - serverTime) / 1000;
                    
                    nLi.innerHTML = ['<div class="yui-g" style="margin-bottom:2px;">',
                    '<div class="yui-g first">',
                    '    <div class="yui-u first" style="background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" title="',ship.type_human,'" style="width:105px;height:105px;" />',
                    '    </div>',
                    '    <div class="yui-u">',
                    '        <span class="shipName">',ship.name,'</span>: ',
                    '        <ul>',
                    '            <li><label style="font-weight:bold;">Travel:</label></li>',
                    '            <li style="white-space:nowrap;"><label style="font-style:italic">Arrives In: </label><span class="shipArrives">',Lib.formatTime(sec),'</span></li>',
                    '            <li style="white-space:nowrap;"><label style="font-style:italic">From: </label><span class="shipFrom">',ship.from.name,'</span></li>',
                    '            <li style="white-space:nowrap;"><label style="font-style:italic">To: </label><span class="shipTo">',ship.to.name,'</span></li>',
                    '        </ul>',
                    '    </div>',
                    '</div>',
                    '<div class="yui-g">',
                    '    <div class="yui-u first">',
                    '        <ul>',
                    '        <li><label style="font-weight:bold;">Attributes:</label></li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Speed: </label>',(ship.fleet_speed > 0 && ship.fleet_speed < ship.speed) ? ship.fleet_speed : ship.speed,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Hold Size: </label>',ship.hold_size,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Stealth: </label>',ship.stealth,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Combat: </label>',ship.combat,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Occupants: </label>',ship.max_occupants,'</li>',                    '        </ul>',
                    '    </div>',
                    '    <div class="yui-u">',
                    '        <div><label style="font-weight:bold;">Payload:</label></div>',
                    Lib.formatInlineList(ship.payload),
                    '    </div>',
                    '</div>',
                    '</div>'].join('');
                    var sn = Sel.query("span.shipName",nLi,true);
                    Event.on(sn, "click", this.ShipName, {Self:this,Ship:ship,el:sn}, true);
                    //Event.on(Sel.query("span.shipFrom",nLi,true), "click", this.EmpireProfile, ship.from);
                    //Event.on(Sel.query("span.shipTo",nLi,true), "click", this.EmpireProfile, ship.to);
                    
                    this.addQueue(sec, this.SpacePortQueue, nLi);
                    
                    details.appendChild(nLi);
                }

                //add child back in
                parentEl.appendChild(details);

                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 220;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        ShipHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_ships_travelling({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SpacePort.ShipHandlePagination.view_ships_travelling.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.shipsTravelling = {
                        number_of_ships_travelling: o.result.number_of_ships_travelling,
                        ships_travelling: o.result.ships_travelling
                    };
                    this.SpacePortPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.shipsPager.setState(newState);
        },
        SpacePortQueue : function(remaining, elLine){
            var arrTime;
            if(remaining <= 0) {
                arrTime = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                arrTime = Lib.formatTime(Math.round(remaining));
            }
            Sel.query("span.shipArrives",elLine,true).innerHTML = arrTime;
        },
        
        ViewActionDetails : function(nLi, ship, noEvent) {
            var ulDet = ['<li style="white-space:nowrap;"><label style="font-weight:bold;">',ship.task,'</label></li>'];

            if(ship.task == "Docked") {
                ulDet[ulDet.length] = '<li style="white-space:nowrap;margin-top:5px"><button type="button" class="scuttle">Scuttle</button></li>';
                
                if(!noEvent) {
                    Event.delegate(nLi, 'click', this.ShipScuttle, 'button.scuttle', {Self:this,Ship:ship,Line:nLi}, true);
                }
            }
            else if(ship.task == "Travelling") {
                var serverTime = Lib.getTime(Game.ServerData.time),
                    sec = (Lib.getTime(ship.date_arrives) - serverTime) / 1000;

                ulDet[ulDet.length] = '<li style="white-space:nowrap;"><label style="font-style:italic">Arrives In: </label><span class="shipArrives">';
                ulDet[ulDet.length] = Lib.formatTime(sec);
                ulDet[ulDet.length] = '</span></li><li style="white-space:nowrap;"><label style="font-style:italic">From: </label><span class="shipFrom">';
                ulDet[ulDet.length] = ship.from.name;
                ulDet[ulDet.length] = '</span></li><li style="white-space:nowrap;"><label style="font-style:italic">To: </label><span class="shipTo">';
                ulDet[ulDet.length] = ship.to.name;
                ulDet[ulDet.length] = '</span></li>';
                
                this.addQueue(sec, this.SpacePortQueue, nLi);
            }
            else if(ship.task == "Defend" || ship.task == "Orbiting") {
                ulDet[ulDet.length] = '<li style="white-space:nowrap;"><span class="shipTo">';
                ulDet[ulDet.length] = ship.orbiting.name;
                ulDet[ulDet.length] = '</span></li><li style="white-space:nowrap;margin-top:5px"><button type="button" class="recall">Recall</button></li>';
                
                if(!noEvent) {
                    Event.delegate(nLi, 'click', this.ShipRecall, 'button.recall', {Self:this,Ship:ship,Line:nLi}, true);
                }
            }
            
            if(ship.payload && ship.payload.length > 0) {
                ulDet[ulDet.length] = '<li style="white-space:nowrap;margin-top:5px"><button type="button" class="payload">Payload</button></li>';
                
                if(!noEvent) {
                    Event.delegate(nLi, 'click', function(e, matchedEl, container){
                        var div = Sel.query('div.shipPayload', container);
                            curDis = Dom.getStyle(div[0], "display");
                        Dom.setStyle(div, "display", curDis == "none" ? "" : "none");
                    }, 'button.payload', this, true);
                }
            }
            
            return ulDet.join('');
        },
        ViewPopulate : function() {
            var details = Dom.get("shipsViewDetails");
            
            if(details) {
                var ships = this.shipsView.ships,
                    parentEl = details.parentNode,
                    li = document.createElement("li"),
                    info = Dom.get("shipsCount"),
                    displayRecallAll;
                    
                Event.purgeElement(details, true);
                details = parentEl.removeChild(details);
                details.innerHTML = "";

                if(info && this.result.max_ships > 0) {
                    info.innerHTML = ['<div>This SpacePort can dock a maximum of ', this.result.max_ships, ' ships. There are ', this.result.docks_available, ' docks available.'].join(''); 
                }               

                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                
                    Dom.setStyle(nLi, "margin-top", "3px");
                    nLi.innerHTML = ['<div class="yui-g" style="margin-bottom:2px;">',
                    '<div class="yui-g first">',
                    '    <div class="yui-u first" style="background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" title="',ship.type_human,'" style="width:115px;height:115px;" />',
                    '    </div>',
                    '    <div class="yui-u">',
                    '        <span class="shipName">',ship.name,'</span>: ',
                    '        <ul class="shipActionDetails">',
                    this.ViewActionDetails(nLi, ship),
                    '        </ul>',
                    '    </div>',
                    '</div>',
                    '<div class="yui-g">',
                    '    <div class="yui-u first">',
                    '        <ul>',
                    '        <li><label style="font-weight:bold;">Attributes:</label></li>',
                    (ship.fleet_speed > 0 && ship.fleet_speed < ship.speed) ? '        <li style="white-space:nowrap;"><label style="font-style:italic">Fleet Speed: </label>'+ship.fleet_speed+'</li>' : '',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Speed: </label>',ship.speed,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Hold Size: </label>',ship.hold_size,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Berth Level: </label>',ship.berth_level,'</li>',
                    '        </ul>',
                    '        <div class="shipPayload" style="display:none;margin-top:5px"><div><label style="font-weight:bold;">Payload:</label></div>',
                    Lib.formatInlineList(ship.payload, 0, 3),
                    '</div>',
                    '    </div>',
                    '    <div class="yui-u">',
                    '        <ul>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Occupants: </label>',ship.max_occupants,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Stealth: </label>',ship.stealth,'</li>',
                    '        <li style="white-space:nowrap;"><label style="font-style:italic">Combat: </label>',ship.combat,'</li>',
                    '        </ul>',
                    '        <div class="shipPayload" style="display:none;margin-top:5px">',
                    Lib.formatInlineList(ship.payload, 3),
                    '        </div>',
                    '    </div>',
                    '</div>',
                    '</div>'].join('');
                    
                    if(ship.task == "Defend" || ship.task == "Orbiting") {
                        displayRecallAll = true;
                    }
                    
                    var sn = Sel.query("span.shipName",nLi,true);
                    Event.on(sn, "click", this.ShipName, {Self:this,Ship:ship,el:sn}, true);
                    //Event.on(Sel.query("span.shipFrom",nLi,true), "click", this.EmpireProfile, ship.from);
                    //Event.on(Sel.query("span.shipTo",nLi,true), "click", this.EmpireProfile, ship.to);

                                
                    details.appendChild(nLi);
                    
                }
                
                if(displayRecallAll) {
                    Dom.setStyle("shipsRecallAll","display","");
                }
                else {
                    Dom.setStyle("shipsRecallAll","display","none");
                }
                
                //add child back in
                parentEl.appendChild(details);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 230;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        ViewHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_all_ships({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                paging:{page_number:newState.page}
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SpacePort.ViewHandlePagination.view_all_ships.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.shipsView = {
                        number_of_ships: o.result.number_of_ships,
                        ships: o.result.ships
                    };
                    this.ViewPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.viewPager.setState(newState);
        },
        
        ShipName : function() {
            this.el.innerHTML = "";
            
            var inp = document.createElement("input"),
                bSave = document.createElement("button"),
                bCancel = bSave.cloneNode(false);
            inp.type = "text";
            inp.value = this.Ship.name;
            this.Input = inp;
            bSave.setAttribute("type", "button");
            bSave.innerHTML = "Save";
            Event.on(bSave,"click",this.Self.ShipNameSave,this,true);
            bCancel.setAttribute("type", "button");
            bCancel.innerHTML = "Cancel";
            Event.on(bCancel,"click",this.Self.ShipNameClear,this,true);
                        
            Event.removeListener(this.el, "click");        
                
            this.el.appendChild(inp);
            this.el.appendChild(document.createElement("br"));
            this.el.appendChild(bSave);
            this.el.appendChild(bCancel);
        },
        ShipNameSave : function(e) {
            Event.stopEvent(e);
            Lacuna.Pulser.Show();
            var newName = this.Input.value;
            
            this.Self.service.name_ship({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id,
                name:newName
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SpacePort.ShipNameSave.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    delete this.Self.shipsView;
                    delete this.Self.shipsTravelling;
                    this.Ship.name = newName;
                    if(this.Input) {
                        this.Input.value = newName;
                    }
                    this.Self.ShipNameClear.call(this);
                },
                failure : function(o){
                    if(this.Input) {
                        this.Input.value = this.Ship.name;
                    }
                },
                scope:this
            });
        },
        ShipNameClear : function(e) {
            if(e) { Event.stopEvent(e); }
            if(this.Input) {
                delete this.Input;
            }
            if(this.el) {
                Event.purgeElement(this.el, true);
                this.el.innerHTML = this.Ship.name;
                Event.on(this.el, "click", this.Self.ShipName, this, true);
            }
        },
        
        ForeignPopulate : function() {
            var details = Dom.get("shipsForeignDetails");
            
            if(details) {
                var ships = this.shipsForeign.ships,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                
                ships = ships.slice(0);
                ships.sort(function(a,b) {
                    if (a.date_arrives > b.date_arrives) {
                        return 1;
                    }
                    else if (a.date_arrives < b.date_arrives) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
                
                Event.purgeElement(details, true);
                details.innerHTML = "";
                
                var serverTime = Lib.getTime(Game.ServerData.time);

                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false),
                        sec = (Lib.getTime(ship.date_arrives) - serverTime) / 1000;
                        
                    nUl.Ship = ship;
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");

                    Dom.addClass(nLi,"shipTypeImage");
                    Dom.setStyle(nLi, "background", ['transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center'].join(''));
                    Dom.setStyle(nLi, "text-align", "center");
                    nLi.innerHTML = ['<img src="',Lib.AssetUrl,'ships/',ship.type,'.png" title="',ship.type_human,'" style="width:50px;height:50px;" />'].join('');
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = ship.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipArrives");
                    nLi.innerHTML = Lib.formatTime(sec);
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipFrom");
                    if(ship.from && ship.from.name) {
                        if(ship.from.empire && ship.from.empire.name) {
                            nLi.innerHTML = ship.from.name + ' <span style="cursor:pointer;">[' + ship.from.empire.name + ']</span>';
                            Event.on(nLi, "click", this.EmpireProfile, ship.from.empire);
                        }
                        else {
                            nLi.innerHTML = ship.from.name;
                        }
                    }
                    else {
                        nLi.innerHTML = 'Unknown';
                    }
                    nUl.appendChild(nLi);

                    this.addQueue(sec, this.ForeignQueue, nUl);
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 220;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        LogsPopulate : function() {
            var details = Dom.get("battleLogsDetails");
            
            if(details) {
                var logs = this.battleLogs.battle_log,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                
                logs = logs.slice(0);
                
                Event.purgeElement(details, true);
                details.innerHTML = "";
                
                for(var i=0; i<logs.length; i++) {
                    var log = logs[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");
                    if (!details.children.length) Dom.addClass(nUl, "first");
                    Dom.addClass(nUl, "attacker");

                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = 'Attacker';
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = log.attacking_unit;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipFrom");
                    nLi.innerHTML = log.attacking_body + ' [' + log.attacking_empire + ']';
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    nLi.innerHTML = '<label>Arrived:</label> ' + log.date;
                    nUl.appendChild(nLi);

                    details.appendChild(nUl);

                    nUl = ul.cloneNode(false),
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");
                    Dom.addClass(nUl, "defender");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = 'Defender';
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = log.defending_unit;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipFrom");
                    nLi.innerHTML = log.defending_body + ' [' + log.defending_empire + ']';
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    nLi.innerHTML = '<label>Victory:</label> ' + log.victory_to.replace(/^\w/, function(c){return c.toUpperCase()});
                    nUl.appendChild(nLi);

                    details.appendChild(nUl);

                    nUl = ul.cloneNode(false),
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");
                    Dom.addClass(nUl, "attacked");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = 'Attacked';
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipFrom");
                    nLi.innerHTML = log.attacked_body + ' [' + log.attacked_empire + ']';
                    nUl.appendChild(nLi);

                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 220;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        ForeignHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_foreign_ships({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SpacePort.view_foreign_ships.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.shipsForeign = {
                        number_of_ships: o.result.number_of_ships,
                        ships: o.result.ships
                    };
                    this.ForeignPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.foreignPager.setState(newState);
        },
        LogsHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_battle_logs({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SpacePort.view_battle_logs.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.battleLogs = {
                        number_of_logs: o.result.number_of_logs,
                        battle_log: o.result.battle_log
                    };
                    this.LogsPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.logsPager.setState(newState);
        },
        ForeignQueue : function(remaining, elLine){
            var arrTime;
            if(remaining <= 0) {
                arrTime = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                arrTime = Lib.formatTime(Math.round(remaining));
            }
            Sel.query("li.shipArrives",elLine,true).innerHTML = arrTime;
        },
        
        OrbitingPopulate : function() {
            var details = Dom.get("shipsOrbitingDetails");
            
            if(details) {
                var ships = this.shipsOrbiting.ships,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                
                ships = ships.slice(0);
                ships.sort(function(a,b) {
                    if(a.date_arrives || b.date_arrives) {
                        if (a.date_arrives > b.date_arrives) {
                            return 1;
                        }
                        else if (a.date_arrives < b.date_arrives) {
                            return -1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else {
                        return 0;
                    }
                });
                Event.purgeElement(details, true);
                details.innerHTML = "";
                var serverTime = Lib.getTime(Game.ServerData.time);
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false),
                        sec = (Lib.getTime(ship.date_arrived) - serverTime) / 1000;
                    nUl.Ship = ship;
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");

                    Dom.addClass(nLi,"shipTypeImage");
                    Dom.setStyle(nLi, "background", ['transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center'].join(''));
                    Dom.setStyle(nLi, "text-align", "center");
                    nLi.innerHTML = ['<img src="',Lib.AssetUrl,'ships/',ship.type,'.png" title="',ship.type_human,'" style="width:50px;height:50px;" />'].join('');
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = ship.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipArrives");
                    nLi.innerHTML = Lib.formatServerDate(ship.date_arrived);
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipFrom");
                    if(ship.from && ship.from.name) {
                        if(ship.from.empire && ship.from.empire.name) {
                            nLi.innerHTML = ship.from.name + ' <span style="cursor:pointer;">[' + ship.from.empire.name + ']</span>';
                            Event.on(nLi, "click", this.EmpireProfile, ship.from.empire);
                        }
                        else {
                            nLi.innerHTML = ship.from.name;
                        }
                    }
                    else {
                        nLi.innerHTML = 'Unknown';
                    }
                    nUl.appendChild(nLi);

                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 220;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        OrbitingHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_ships_orbiting({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.shipsOrbiting = {
                        number_of_ships: o.result.number_of_ships,
                        ships: o.result.ships
                    };
                    this.OrbitingPopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.orbitingPager.setState(newState);
        },
        
        EmpireProfile : function(e, empire) {
            Lacuna.Info.Empire.Load(empire.id);
        },
        ShipScuttle : function(e, matchedEl, container) {
            if(confirm(["Are you sure you want to Scuttle ",this.Ship.name,"?"].join(''))) {
                var btn = Event.getTarget(e);
                btn.disabled = true;
                Lacuna.Pulser.Show();
                
                this.Self.service.scuttle_ship({
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    ship_id:this.Ship.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "SpacePort.ShipScuttle.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        var ships = this.Self.shipsView.ships,
                            info = Dom.get("shipsCount");
                        for(var i=0; i<ships.length; i++) {
                            if(ships[i].id == this.Ship.id) {
                                ships.splice(i,1);
                                break;
                            }
                        }
                        if(info) {
                            this.Self.result.docks_available++;
                            info.innerHTML = ['This SpacePort can dock a maximum of ', this.Self.result.max_ships, ' ships. There are ', this.Self.result.docks_available, ' docks available.'].join(''); 
                        }
                        Event.removeDelegate(this.Line, 'click');
                        this.Line.parentNode.removeChild(this.Line);
                    },
                    failure : function(o){
                        btn.disabled = false;
                    },
                    scope:this
                });
            }
        },
        ShipRecall : function(e, matchedEl, container) {
            matchedEl.disabled = true;
            Lacuna.Pulser.Show();
            
            this.Self.service.recall_ship({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    
                    var ships = this.Self.shipsView.ships,
                        info = Dom.get("shipsCount");
                    for(var i=0; i<ships.length; i++) {
                        if(ships[i].id == this.Ship.id) {
                            ships[i] = o.result.ship;
                            break;
                        }
                    }
                    if(info) {
                        this.Self.result.docks_available++;
                        info.innerHTML = ['This SpacePort can dock a maximum of ', this.Self.result.max_ships, ' ships. There are ', this.Self.result.docks_available, ' docks available.'].join(''); 
                    }
                    //set to travelling
                    var ad = Sel.query("ul.shipActionDetails", this.Line, true);
                    ad.innerHTML = this.Self.ViewActionDetails(this.Line, o.result.ship, true);
                    
                    //remove ships travelling so the tab gets reloaded when viewed next time
                    delete this.Self.shipsTravelling;
                },
                failure : function(o){
                    matchedEl.disabled = false;
                },
                scope:this
            });
        },
        ShipRecallAll : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            Lacuna.Pulser.Show();
            
            this.service.recall_all({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete this.shipsTravelling;
                    delete this.shipsView;
                    this.getShips({newValue:true});
                },
                failure : function(o){
                    btn.disabled = false;
                },
                scope:this
            });
        },
        
        GetShipsFor : function() {
            Lacuna.Pulser.Show();
            
            //Dom.setStyle("sendShipPick", "display", "none");
            Dom.setStyle("sendShipSend", "display", "none");
            
            var type = Lib.getSelectedOptionValue("sendShipType"),
                target = {};
            
            if(type == "xy") {
                target.x = Dom.get("sendShipTargetX").value;
                target.y = Dom.get("sendShipTargetY").value;
                Dom.get("sendShipNote").innerHTML = ['X: ', target.x, ' - Y: ', target.y].join('');
            }
            else {
                target[type] = Dom.get("sendShipTargetText").value;
                Dom.get("sendShipNote").innerHTML = target[type];
            }
            
            this.service.get_ships_for({
                session_id:Game.GetSession(),
                from_body_id:Game.GetCurrentPlanet().id,
                target:target
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.PopulateShipsSendTab(target, o.result.available);
                },
                scope:this
            });
            
        },
        PopulateShipsSendTab : function(target, ships) {
            var details = Dom.get("sendShipAvail"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            Dom.setStyle("sendShipSend", "display", "");
            
            if(ships.length === 0) {
                details.innerHTML = "No available ships to send.";
            }
            else {                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.Ship = ship;
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:60px;height:60px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:67%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span>Task:<span>',ship.task,'</span></span>,',
                    '            <span>Travel Time:<span>',Lib.formatTime(ship.estimated_travel_time),'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '    </div>',
                    '    <div class="yui-u" style="width:8%">',
                    ship.task == "Docked" ? '        <button type="button">Send</button>' : '',
                    '    </div>',
                    '</div>'].join('');
                    
                    if(ship.task == "Docked") {
                        Event.on(Sel.query("button", nLi, true), "click", this.ShipSend, {Self:this,Ship:ship,Target:target,Line:nLi}, true);
                    }
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
                            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 250;
                if(Ht > 250) { Ht = 250; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
        },
        ShipSend : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
        
            var oSelf = this.Self,
                ship = this.Ship,
                target = this.Target;
            
            if(target && ship.id && Lacuna.MapStar.NotIsolationist(ship)) {
                Lacuna.Pulser.Show();
                oSelf.service.send_ship({
                    session_id:Game.GetSession(),
                    ship_id:ship.id,
                    target:target
                }, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        delete this.Self.shipsView;
                        delete this.Self.shipsTravelling;
                        this.Self.GetShipsFor();
                        Event.purgeElement(this.Line, true);
                        this.Line.innerHTML = "Successfully sent " + this.Ship.type_human + ".";
                    },
                    failure : function(o){
                        btn.disabled = false;
                    },
                    scope:this
                });
            }
            else {
                btn.disabled = false;
            }
        },
                
        GetFleetFor : function() {
            Lacuna.Pulser.Show();
            
            Dom.setStyle("sendFleetSend", "display", "none");
            
            var type = Lib.getSelectedOptionValue("sendFleetType"),
                target = {};
            
            if(type == "xy") {
                target.x = Dom.get("sendFleetTargetX").value;
                target.y = Dom.get("sendFleetTargetY").value;
                Dom.get("sendFleetNote").innerHTML = ['X: ', target.x, ' - Y: ', target.y].join('');
            }
            else {
                target[type] = Dom.get("sendFleetTargetText").value;
                Dom.get("sendFleetNote").innerHTML = target[type];
            }
            
            this.service.get_ships_for({
                session_id:Game.GetSession(),
                from_body_id:Game.GetCurrentPlanet().id,
                target:target
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.PopulateFleetSendTab(target, o.result.available);
                },
                scope:this
            });
            
        },
        PopulateFleetSendTab : function(target, ships) {
            var details = Dom.get("sendFleetAvail"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            this.FleetTarget = target;
            
            Dom.setStyle("sendFleetSend", "display", "");
            
            if(ships.length === 0) {
                details.innerHTML = "No available ships to send.";
            }
            else {
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:60px;height:60px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:67%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span>Task:<span>',ship.task,'</span></span>,',
                    '            <span>Travel Time:<span>',Lib.formatTime(ship.estimated_travel_time),'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '    </div>',
                    '    <div class="yui-u" style="width:8%">',
                    ship.task == "Docked" ? '<input type="checkbox" />' : '',
                    '    </div>',
                    '</div>'].join('');
                    
                    if(ship.task == "Docked") {
                        Sel.query("input", nLi, true).Ship = ship;
                    }
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
                            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 250;
                if(Ht > 250) { Ht = 250; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
        },
        FleetSend : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;

            var speed = parseInt(Dom.get("setSpeed").value,10);
            var selected = Sel.query("input:checked", "sendFleetAvail");
            if(selected.length > 0) {
                var ships = [], shipIds = [], minSpeed = 999999999;
                for(var n=0; n<selected.length; n++) {
                    var s = selected[n].Ship;
                    s.speed = parseInt(s.speed,10); // probably not needed but play it safe
                    ships.push(s);
                    shipIds.push(s.id);
                    if (s.speed < minSpeed) {
                        minSpeed = s.speed;
                    }
                }
                
                if(this.FleetTarget && Lacuna.MapStar.NotFleetIsolationist(ships)) {                    
                    if (speed < 0) {
                        alert('Set speed cannot be less than zero.');
                        btn.disabled = false;
                    }
                    else {
                        if (speed > 0 && speed > minSpeed) {
                            alert('Set speed cannot exceed the speed of the slowest ship.');
                            btn.disabled = false;
                        } else {
                            this.service.send_fleet({
                                session_id:Game.GetSession(),
                                ship_ids:shipIds,
                                target:this.FleetTarget,
                                set_speed:speed
                            }, {
                                success : function(o){
                                    Lacuna.Pulser.Hide();
                                    this.rpcSuccess(o);
                                    btn.disabled = false;
                                    delete this.FleetTarget;
                                    delete this.shipsView;
                                    delete this.shipsTravelling;
                                    this.GetFleetFor();
                                },
                                failure : function(o){
                                    btn.disabled = false;
                                },
                                scope:this
                            });
                        }
                    }
                }
            }
            else {
                btn.disabled = false;
            }
        }
    });
    
    YAHOO.lacuna.buildings.SpacePort = SpacePort;

})();
YAHOO.register("spaceport", YAHOO.lacuna.buildings.SpacePort, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/spacePort.js","/building")
},{"buffer":71,"oMfpAn":75}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.SpaceStationLab == "undefined" || !YAHOO.lacuna.buildings.SpaceStationLab) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var SpaceStationLab = function(result){
        SpaceStationLab.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.SpaceStationLab;
    };
    
    Lang.extend(SpaceStationLab, Lacuna.buildings.Building, {
        getChildTabs : function() {
            if(this.result.make_plan && this.result.make_plan.level_costs.length > 0) {
                return [this._getPlanTab()];
            }
            else {
                return;
            }
        },
        _getPlanTab : function() {
            
            Event.onContentReady("stationLabLevelsContainer", this.PlanPopulate, this, true);
            
            Event.on("stationLabGoToPlan", "click", function(){
                delete this.selectedType;
                Dom.get("stationLabPlanSelected").innerHTML = "";
                Dom.setStyle("stationLabPlansContainer", "display", "");
                Dom.setStyle("stationLabLevelsContainer", "display", "none");
            }, this, true);
            
            Event.on("stationLabMakingSubsidize", "click", this.PlanSubsidize, this, true);
            
            Event.delegate("stationLabPlans", 'click', function(e, matchedEl, container){
                this.selectedType = matchedEl.value;
                Dom.get("stationLabPlanSelected").innerHTML = Sel.query('div.buildingName',matchedEl.parentNode.parentNode,true).innerHTML;
                Dom.setStyle("stationLabPlansContainer", "display", "none");
                Dom.setStyle("stationLabLevelsContainer", "display", "");
            }, 'button', this, true); 
            
            Event.delegate("stationLabLevels", 'click', this.PlanMake, 'button', this, true); 
            
            return new YAHOO.widget.Tab({ label: "Make Plan", content: [
                '<div id="stationLabPlansContainer" style="display:none;"><div style="overflow-y:auto;"><ul id="stationLabPlans"></ul></div></div>',
                '<div id="stationLabLevelsContainer" style="display:none;">',
                '    <div class="yui-g" style="padding-bottom:3px;margin-bottom:3px;border-bottom: 1px solid #52acff;">',
                '        <div class="yui-u first" style="font-weight:bold;">Building a <span id="stationLabPlanSelected"></span></div>',
                '        <div class="yui-u" style="text-align:right;"><button type="button" id="stationLabGoToPlan">Go Back</button></div>',
                '    </div>',
                '    <div>',
                '        <table class="buildingStats" cellpadding="0" cellspacing="0">',
                '            <col width="53" /><colgroup span="6" width="110" />',
                '            <tr><td>Level</td>',
                '                <th><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></th>',
                '                <th><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre"  /></th>',
                '                <th><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></th>',
                '                <th><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></th>',
                '                <th><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></th>',
                '                <th></th>',
                '            </tr>',
                '        </table>',
                '        <div id="stationLabLevelsList" style="overflow-y:auto;"></div>',
                '    </div>',
                '</div>',
                '<div id="stationLabMakingContainer" style="display:none;">',
                '    <div style="margin-bottom:10px;"><span id="stationLabMakingName"></span> will complete in <span id="stationLabMakingTime"></span>.</div>',
                '    <button type="button" id="stationLabMakingSubsidize">Subsidize for ',this.result.make_plan.subsidy_cost,' <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" style="vertical-align: middle;" /></button>',
                '</div>'
            ].join('')});
        },
        buildPlans : function(types) {
            var frag = [];
            for(var n=0; n<types.length; n++) {
                var plan = types[n];
                frag[frag.length] = [
                    '<li style="padding-bottom: 2px; margin-bottom:2px; border-bottom: 1px solid #52acff;">',
                    '    <div class="yui-gb">',
                    '        <div class="yui-u first" style="width:200px;background:transparent url(',Lib.AssetUrl,'planet_side/surface-station.jpg) no-repeat center;text-align:center">',
                    '            <img src="',Lib.AssetUrl,'planet_side/',plan.image,'.png" style="width:200px;height:200px;cursor:pointer;" class="buildingImage" />',
                    '        </div>',
                    '        <div class="yui-u">',
                    '            <div class="buildingName">', plan.name, '</div>',
                    '            <div class="buildingDesc">',Game.GetBuildingDesc(plan.url),'</div>',
                    '        </div>',
                    '        <div class="yui-u">',
                    //'            <input type="radio" name="stationLabSelectType" value="',plan.type,'" style="margin-top:30px;margin-left:30px;" />',
                    '            <button type="button" value="',plan.type,'">Select</button>',
                    '        </div>',
                    '    </div>',
                    '</li>'
                ].join('');
            }
            return frag.join('');
        },
        buildLevels : function(levelCosts) {
            var frag = ['<table id="stationLabLevels" class="buildingStats" cellpadding="0" cellspacing="0"><col width="53" /><colgroup span="6" width="110" />'],
                planet = Game.GetCurrentPlanet();
                
            for(var n=0; n<levelCosts.length; n++) {
                var costs = levelCosts[n];
                frag[frag.length] = [
                    '<tr><th>', costs.level, ':</th>',
                    '    <td class=',costs.food > planet.food_stored ? 'low-resource' : '','>',costs.food,'</td>',
                    '    <td class=',costs.ore > planet.ore_stored ? 'low-resource' : '','>',costs.ore,'</td>',
                    '    <td class=',costs.water > planet.water_stored ? 'low-resource' : '','>',costs.water,'</td>',
                    '    <td class=',costs.energy > planet.energy_stored ? 'low-resource' : '','>',costs.energy,'</td>',
                    '    <td>',costs.waste,'</td>',
                    //'    <td><input type="radio" name="stationLabSelectLevel" value="',costs.level,'" /></td>',
                    '    <td><button type="button" value="',costs.level,'">Make</button></td>',
                    '</tr>'
                ].join('');
            }
            frag[frag.length] = '</table>';
            return frag.join('');
        },
        makingQueue : function(remaining, span){
            var time;
            if(remaining <= 0) {
                time = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                time = Lib.formatTime(Math.round(remaining));
            }
            span.innerHTML = time;
        },
        PlanPopulate : function() {
            var makePlan = this.result.make_plan;
            
            if(makePlan.making) {
                Dom.setStyle("stationLabPlansContainer","display","none");
                Dom.setStyle("stationLabLevelsContainer","display","none");
                Dom.setStyle("stationLabMakingContainer","display","");
                
                Dom.get("stationLabMakingName").innerHTML = makePlan.making;
                this.addQueue(this.result.building.work.seconds_remaining, this.makingQueue, Dom.get("stationLabMakingTime"));
            }
            else {
                Dom.setStyle("stationLabPlansContainer","display","");
                Dom.setStyle("stationLabLevelsContainer","display","none");
                Dom.setStyle("stationLabMakingContainer","display","none");
                
                Dom.get("stationLabPlans").innerHTML = this.buildPlans(makePlan.types);
                Dom.get("stationLabLevelsList").innerHTML = this.buildLevels(makePlan.level_costs);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 200;
                    if(Ht > 250) { Ht = 250; }

                    Dom.setStyle(Dom.get("stationLabPlans").parentNode,"height",Ht + "px");
                    
                    Dom.setStyle(Dom.get("stationLabLevels").parentNode,"height",(Ht-50) + "px");
                },10);
            }
        },
        PlanMake : function(e, matchedEl, container) {
            var type = this.selectedType,
                level = matchedEl.value;
                
            if(type && level) {
                matchedEl.disabled = true;
                
                Lacuna.Pulser.Show();
                this.service.make_plan({session_id:Game.GetSession(),building_id:this.building.id, type:type, level:level}, {
                    success : function(o){
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.result = o.result;
                        matchedEl.disabled = false;
                        this.PlanPopulate();
                    },
                    failure : function(o) {
                        matchedEl.disabled = false;
                    },
                    scope:this
                });
            }
        },
        PlanSubsidize : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            Lacuna.Pulser.Show();
            this.service.subsidize_plan({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.result = o.result;
                    btn.disabled = false;
                    this.PlanPopulate();
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        }
    });
    
    Lacuna.buildings.SpaceStationLab = SpaceStationLab;

})();
YAHOO.register("spacestationlab", YAHOO.lacuna.buildings.SpaceStationLab, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/spaceStationLab.js","/building")
},{"buffer":71,"oMfpAn":75}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.SubspaceSupplyDepot == "undefined" || !YAHOO.lacuna.buildings.SubspaceSupplyDepot) {
    
(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var SubspaceSupplyDepot = function(result){
        SubspaceSupplyDepot.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.SubspaceSupplyDepot;
    };
    
    YAHOO.lang.extend(SubspaceSupplyDepot, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getTransmitTab()];
        },
        _getTransmitTab : function() {
            var div = document.createElement("div");
            div.innerHTML = [
                '<div>',
                '    <button class="subspaceTransmit" id="subspaceTransmitFood">Transmit <span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/food.png" class="smallFood" /></span>3600 Food</button>',
                '    <button class="subspaceTransmit" id="subspaceTransmitOre">Transmit <span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" class="smallOre" /></span>3600 Ore</button>',
                '</div>',
                '<div>',
                '    <button class="subspaceTransmit" id="subspaceTransmitWater">Transmit <span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" class="smallWater" /></span>3600 Water</button>',
                '    <button class="subspaceTransmit" id="subspaceTransmitEnergy">Transmit <span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" class="smallEnergy" /></span>3600 Energy</button>',
                '</div>',
                '<div>',
                '    <button class="subspaceTransmit" id="subspaceCompleteBuildQueue">Complete Build Queue (<span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/time.png" class="smallTime" /></span><span id="subspaceQueueTime"></span>)</button>',
                '</div>',
                '<div id="subspaceMessage">&nbsp;</div>'
            ].join('');
            Dom.setStyle(div, 'text-align', 'center');

            Event.on('subspaceTransmitFood', 'click', this.Transmit, {method:"transmit_food"}, this);
            Event.on('subspaceTransmitOre', 'click', this.Transmit, {method:"transmit_ore"}, this);
            Event.on('subspaceTransmitWater', 'click', this.Transmit, {method:"transmit_water"}, this);
            Event.on('subspaceTransmitEnergy', 'click', this.Transmit, {method:"transmit_energy"}, this);
            Event.on('subspaceCompleteBuildQueue', 'click', this.Transmit, {method:"complete_build_queue"}, this);

            var tab = new YAHOO.widget.Tab({ label: "Transmit Resources", contentEl: div });
            tab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    var buildQueueTotal = 0;
                    var buildings = Lacuna.MapPlanet.buildings;
                    for (var building in buildings) {
                        if( buildings.hasOwnProperty(building) ) {
                            var b = buildings[building];
                            if (b.pending_build) {
                                var buildLength = b.pending_build.seconds_remaining*1;
                                if (buildLength > buildQueueTotal) {
                                    buildQueueTotal = buildLength;
                                }
                            }
                        }
                    }
                    this.addQueue( buildQueueTotal, this.UpdateQueueTime, Dom.get('subspaceQueueTime'), this);
                    this.UpdateQueueTime( buildQueueTotal );
                }
            }, this, true);
            
            return tab;
        },
        UpdateQueueTime : function(remaining) {
            if (remaining < 1) {
                remaining = 0;
                Dom.get('subspaceCompleteBuildQueue').disabled = true;
            }
            else {
                Dom.get('subspaceCompleteBuildQueue').disabled = false;
            }
            Dom.get('subspaceQueueTime').innerHTML = Lib.formatTime(remaining);
        },
        Transmit : function(e, opt) {
            var btn = Event.getTarget(e);
            Event.stopEvent(e);
            Lacuna.Pulser.Show();
            btn.disabled = true;
            this.service[opt.method]({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "SubspaceSupplyDepot.Transmit.success");
                    var elMessage = Dom.get('subspaceMessage');
                    if (opt.method == 'complete_build_queue') {
                        this.resetQueue();
                        this.UpdateQueueTime(0);
                        elMessage.innerHTML = 'Build queue completed.';
                    }
                    else {
                        btn.disabled = false;
                        elMessage.innerHTML = 'Transmission completed.';
                    }
                    var a = new Util.Anim(elMessage, {opacity:{from:1,to:0}}, 4);
                    a.onComplete.subscribe(function(){
                        elMessage.innerHTML = "&nbsp;";
                    }, this, true);
                    a.animate();
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                },
                failure : function(o){
                    btn.disabled = false;
                },
                scope:this
            });
        }
    });
    
    Lacuna.buildings.SubspaceSupplyDepot = SubspaceSupplyDepot;

})();
YAHOO.register("SubspaceSupplyDepot", YAHOO.lacuna.buildings.SubspaceSupplyDepot, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/subspaceSupplyDepot.js","/building")
},{"buffer":71,"oMfpAn":75}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.TempleOfTheDrajilites == "undefined" || !YAHOO.lacuna.buildings.TempleOfTheDrajilites) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var TempleOfTheDrajilites = function(result){
        TempleOfTheDrajilites.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.TempleOfTheDrajilites;
        this.maps = {};
        
        
        this.subscribe("onLoad", function(){
            this.CreateFind();
            Event.on("planetsDetailsCurrentStar", "click", this.GoToCurrentStar, this, true);
        }, this, true);
    };
    
    Lang.extend(TempleOfTheDrajilites, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getPlanetsTab()];
        },
        _getPlanetsTab : function() {
            this.planetsTab = new YAHOO.widget.Tab({ label: "Planets", content: [
                    '<div>',
                    '    <div><label for="planetsDetailsStarFind">Lookup Star Name:</label><div style="display:inline-block;width:300px;"><input type="text" id="planetsDetailsStarFind" /></div> or <button type="button" id="planetsDetailsCurrentStar">Go To Current Star</button></div>',
                    '    <div id="planetsDetailsMessage"></div>',
                    '    <div class="clearafter">',
                    '        <ul id="planetsDetails" class="planetsInfo">',
                    '        </ul>',
                    '    </div>',
                    '</div>'
                ].join('')});
            //this.planetsTab.subscribe("activeChange", this.GetPlanets, this, true);
                    
            return this.planetsTab;
        },
        
        CreateFind : function() {
            if(!this.findStar) {
                var dataSource = new Util.XHRDataSource("/map");
                dataSource.connMethodPost = "POST";
                dataSource.maxCacheEntries = 2;
                dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                dataSource.responseSchema = {
                    resultsList : "result.stars",
                    fields : ["name","color","x","y","id"]
                };
                
                var oTextboxList = new YAHOO.lacuna.TextboxList("planetsDetailsStarFind", dataSource, { //config options
                    maxResultsDisplayed: 25,
                    minQueryLength:3,
                    multiSelect:false,
                    forceSelection:false,
                    useIndicator:true
                });
                oTextboxList.formatResult = function(oResultData, sQuery, sResultMatch) {
                    return [
                        '<div class="yui-gf">',
                        '    <div class="yui-u first" style="background-color:black;">',
                        '        <img src="',Lib.AssetUrl,'star_map/',oResultData.color,'.png" alt="',oResultData,name,'" style="width:50px;height:50px;" />',
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <div>',oResultData.name,'</div>',
                        '        <div>',oResultData.x,' : ',oResultData.y,'</div>',
                        '    </div>',
                        '</div>'].join("");
                };
                oTextboxList.generateRequest = function(sQuery){                
                    var s = Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "search_stars",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                decodeURIComponent(sQuery)
                            ]
                        });
                    return s;
                };
                oTextboxList.dirtyEvent.subscribe(function(event, isDirty, oSelf){
                    var star = this._oTblSingleSelection.Object;

                    oSelf.GetPlanets(star.id);
                },this);
                this.findStar = oTextboxList;
            }
        },
        GoToCurrentStar : function() {
            this.GetPlanets(Game.GetCurrentPlanet().star_id);
        },
        
        GetPlanets : function(starId) {
            Lacuna.Pulser.Show();
            this.service.list_planets({session_id:Game.GetSession(),building_id:this.building.id, star_id:starId}, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.planets = o.result.planets;
                    this.PlanetsDisplay();
                },
                failure : function(o){
                    var msg = Dom.get("planetsDetailsMessage"),
                        planetsDetails = Dom.get("planetsDetails");
                    
                    msg.innerHTML = o.error.message;
                    Event.purgeElement(planetsDetails);
                    planetsDetails.innerHTML = "";
                    return true;
                },
                scope:this
            });
        },
        PlanetsDisplay : function() {
            var planets = this.planets,
                planetsDetails = Dom.get("planetsDetails");
                
            if(planetsDetails) {
                Event.purgeElement(planetsDetails);
                planetsDetails.innerHTML = "";
                
                var li = document.createElement("li");
                
                for(var i=0; i<planets.length; i++) {
                    var pt = planets[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.Planet = pt;
                    Dom.addClass(nLi,"planetDisplay");
                    
                    nLi.innerHTML = pt.name;
                    
                    nLi = planetsDetails.appendChild(nLi);
                    Event.on(nLi, "click", this.PlanetView, this, true);
                }
            }
        },
        PlanetView : function(e) {
            var nLi = Event.getTarget(e);
            if(nLi.Planet) {
                if(!this.maps[nLi.Planet.id]) {
                    Lacuna.Pulser.Show();
                    this.service.view_planet({session_id:Game.GetSession(),building_id:this.building.id,planet_id:nLi.Planet.id}, {
                        success : function(o){
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.maps[nLi.Planet.id] = o.result.map;
                            Lacuna.Messaging.attachmentPanel.load(o.result.map);
                        },
                        scope:this
                    });
                }
                else {
                    Lacuna.Messaging.attachmentPanel.load(this.maps[nLi.Planet.id]);
                }
            }
        }

    });
    
    YAHOO.lacuna.buildings.TempleOfTheDrajilites = TempleOfTheDrajilites;

})();
YAHOO.register("templeofthedrajilites", YAHOO.lacuna.buildings.TempleOfTheDrajilites, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/templeOfTheDrajilites.js","/building")
},{"buffer":71,"oMfpAn":75}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.TheDillonForge == "undefined" || !YAHOO.lacuna.buildings.TheDillonForge) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var TheDillonForge = function(result){
        TheDillonForge.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.TheDillonForge;
    };
    
    Lang.extend(TheDillonForge, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getForgeTab()];
        },
        _getForgeTab : function() {
            this.splitTab = new YAHOO.widget.Tab({ label: "Forge", content: [
                '<div id="forgeSplitPlan">',
                '  <div><b>Split a plan into glyphs.</b></div>',
                '  <div id="forgeSplitPlanForm"></div>',
                '<hr/>',
                '</div>',
                '<div id="forgeMakePlan">',
                '  <div><b>Combine level 1 plans into a higher level plan.</b></div>',
                '  <div id="forgeMakePlanForm"></div>',
                '</div>',
                '<div id="forgeSubsidize">',
                '  <div><b>Subsidize current task.</b></div>',
                '  <div id="forgeSubsidizeForm"><div>',
                '</div>'
            ].join('')});
            
            this.splitTab.subscribe("activeChange", this.viewForgeTab, this, true);
            
            return this.splitTab;
        },
        viewForgeTab : function() {
            if ( this.result.tasks.can == 1 ) {
                Dom.setStyle("forgeMakePlan", "display", "");
                Dom.setStyle("forgeSplitPlan", "display", "");
                Dom.setStyle("forgeSubsidize", "display", "none");
                this.viewForgeMakePlan();
                this.viewForgeSplitPlan();
            }
            else {
                Dom.setStyle("forgeMakePlan", "display", "none");
                Dom.setStyle("forgeSplitPlan", "display", "none");
                Dom.setStyle("forgeSubsidize", "display", "");
                this.viewForgeSubsidize();
            }
        },
        viewForgeMakePlan : function() {
            var make_plan = this.result.tasks.make_plan,
                make_form = Dom.get("forgeMakePlanForm");
            
            if ( make_plan.length == 0 ) {
                make_form.innerHTML = "No plans available to make.";
                return;
            }
            
            make_form.innerHTML = '';
            
            var select = document.createElement("select");
            var option = document.createElement("option");
            select.setAttribute("id", "forgeMakePlanSelect");
            
            var emptyFirst = option.cloneNode(false);
            emptyFirst.setAttribute("value","");
            emptyFirst.innerHTML = "Select plan (maximum level) &#91;time to make&#93;";
            select.appendChild(emptyFirst);
            make_plan.sort(function(a,b) {
              if(a["class"] > b["class"]) {
                return 1;
              }
              else if(a["class"] < b["class"]) {
                return -1;
              }
              else {
                if(a.name > b.name) {
                  return 1;
                }
                else if(a.name < b.name) {
                  return -1;
                }
                else {
                  if (a.level > b.level) {
                    return 1;
                  }
                  else if (a.level < b.level) {
                    return -1;
                  }
                  else {
                    if (a.extra_build_level > b.extra_build_level) {
                      return 1;
                    }
                    else if (a.extra_build_level < b.extra_build_level) {
                      return -1;
                    }
                    else {
                      return 0;
                    }
                  }
                }
              }
            });
            
            for (var i = 0; i < make_plan.length; i++) {
                var nOpt = option.cloneNode(false);
                nOpt.setAttribute("value", make_plan[i]['class']);
                nOpt.innerHTML = [
                    make_plan[i].name, ' (',
                    make_plan[i].max_level, ') &#91;',
                    Lib.formatTime( make_plan[i].reset_sec_per_level ), '&#93;'
                ].join('');
                select.appendChild(nOpt);
            }
            
            var input  = document.createElement("input");
            input.setAttribute("id", "forgeMakePlanLevel");
            input.setAttribute("size", 3);
            option.appendChild(input);
            
            var button = document.createElement("button");
            button.innerHTML = "Make Plan";
            Dom.setStyle(button, "margin-left", "1em");
            option.appendChild(button);
            
            make_form.appendChild(select);
            make_form.appendChild( document.createTextNode(" Level: ") );
            make_form.appendChild(input);
            make_form.appendChild(button);
            
            Event.on(button, "click", this.MakePlan, {Self:this}, true);
        },
        MakePlan : function() {
            var plan_class = Lib.getSelectedOptionValue("forgeMakePlanSelect"),
                level = Dom.get("forgeMakePlanLevel").value;
            
            if ( plan_class == "" ) {
                alert("Select a plan");
                return;
            }
            
            if ( level < 2 ) {
                alert("Enter a valid plan level");
                return;
            }
            
            Lacuna.Pulser.Show();
            this.Self.service.make_plan(
                {
                    session_id:Game.GetSession(),
                    building_id:this.Self.building.id,
                    plan_class: plan_class,
                    level: level
                },
                {
                    success : function(o){
                        YAHOO.log(o, "info", "TheDillonForge.MakePlan.success");
                        Lacuna.Pulser.Hide();
                        this.Self.rpcSuccess(o);
                        this.Self.result = o.result;
                        this.Self.viewForgeTab();
                },
                scope:this
            });
        },
        viewForgeSplitPlan : function() {
            var split_plan = this.result.tasks.split_plan,
                split_form = Dom.get("forgeSplitPlanForm");
            
            if ( split_plan.length == 0 ) {
                split_form.innerHTML = "No plans available to split.";
                return;
            }
            
            split_form.innerHTML = "";
            
            var select = document.createElement("select");
            var option = document.createElement("option");
            select.setAttribute("id", "forgeSplitPlanSelect");
            
            var emptyFirst = option.cloneNode(false);
            emptyFirst.setAttribute("value","");
            emptyFirst.innerHTML = "Select plan (levels) &#91;time to split&#93;";
            select.appendChild(emptyFirst);

            split_plan.sort(function(a,b) {
              if(a.name > b.name) {
                return 1;
              }
              else if(a.name < b.name) {
                return -1;
              }
              else {
                if (a.level > b.level) {
                  return 1;
                }
                else if (a.level < b.level) {
                  return -1;
                }
                else {
                  if (a.extra_build_level > b.extra_build_level) {
                    return 1;
                  }
                  else if (a.extra_build_level < b.extra_build_level) {
                    return -1;
                  }
                  else {
                    return 0;
                  }
                }
              }
            });
            
            for (var i=0; i<split_plan.length; i++) {
                var nOpt = option.cloneNode(false);
                var value = [
                    split_plan[i]['class'], ';',
                    split_plan[i].level, ';',
                    split_plan[i].extra_build_level
                ].join('');
                nOpt.setAttribute("value", value);
                nOpt.innerHTML = [
                    split_plan[i].name, ' (',
                    split_plan[i].level, '+',
                    split_plan[i].extra_build_level, ') : ',
                    split_plan[i].quantity, ' &#91;',
                    Lib.formatTime( split_plan[i].reset_seconds ), '&#93;'
                ].join('');
                select.appendChild(nOpt);
            }
            
            var input = document.createElement("input");
            input.setAttribute("id", "forgeSplitPlanQuantity");
            input.setAttribute("size", 6);
            option.appendChild(input);

            var button = document.createElement("button");
            button.innerHTML = "Split Plan";
            Dom.setStyle(button, "margin-left", "1em");
            option.appendChild(button);
            
            split_form.appendChild(select);
            split_form.appendChild( document.createTextNode(" Quantity: ") );
            split_form.appendChild(input);
            split_form.appendChild(button);
            
            Event.on(button, "click", this.SplitPlan, {Self:this}, true);
        },
        SplitPlan : function() {
            var selected = Lib.getSelectedOptionValue("forgeSplitPlanSelect"),
                quantity = Dom.get("forgeSplitPlanQuantity").value;
            
            if ( selected == "" ) {
                alert("Select a plan");
                return;
            }
            if ( quantity < 2 ) {
                quantity = 1;
            }
            
            selected = selected.split(";");
            
            if ( selected.length == 3 ) {
                Lacuna.Pulser.Show();
                this.Self.service.split_plan(
                    {
                        session_id:Game.GetSession(),
                        building_id:this.Self.building.id,
                        plan_class: selected[0],
                        level: selected[1],
                        extra_build_level: selected[2],
                        quantity: quantity,
                    },
                    {
                        success : function(o){
                            YAHOO.log(o, "info", "TheDillonForge.SplitPlan.success");
                            Lacuna.Pulser.Hide();
                            this.Self.rpcSuccess(o);
                            this.Self.result = o.result;
                            this.Self.viewForgeTab();
                    },
                    scope:this
                });
            }
        },
        viewForgeSubsidize : function() {
            var form = Dom.get("forgeSubsidizeForm"),
                cost = this.result.tasks.subsidy_cost,
                work = this.result.tasks.working,
                seconds = this.result.tasks.seconds_remaining;
            
            form.innerHTML = ['<div>',work," for ",Lib.formatTime(seconds),'</div>'].join('');
            
            var button = document.createElement("button");
            button.innerHTML = "Subsidize for " + cost + "E";
            form.appendChild(button);
            
            Event.on(button, "click", this.Subsidize, {Self:this}, true);
        },
        Subsidize : function() {
            Lacuna.Pulser.Show();
            this.Self.service.subsidize({session_id:Game.GetSession(),building_id:this.Self.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "TheDillonForge.Subsidize.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    this.Self.result = o.result;
                    this.Self.viewForgeTab();
                },
                scope:this
            });
        }

    });
    
    YAHOO.lacuna.buildings.TheDillonForge = TheDillonForge;

})();
YAHOO.register("TheDillonForge", YAHOO.lacuna.buildings.TheDillonForge, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/theDillonForge.js","/building")
},{"buffer":71,"oMfpAn":75}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.TheftTraining == "undefined" || !YAHOO.lacuna.buildings.TheftTraining) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var TheftTraining = function(result){
        TheftTraining.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.TheftTraining;
    };
    
    Lang.extend(TheftTraining, Lacuna.buildings.Building, {
        destroy : function() {
            TheftTraining.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            return [this._getTrainTab()];
        },
        _getTrainTab : function() {
            var spies = this.result.spies;
            this.trainTab = new YAHOO.widget.Tab({ label: "Train Spies", content: [
                '<div class="yui-g">',
                '    <div class="yui-u first">',
                '        <ul>',
                '            <li><span style="font-weight:bold;">Spies Training : </span> <span id="spiesCurrent">',spies.in_training,'</span></li>',
                '            <li><span style="font-weight:bold;">Points per hour : </span> <span id="pointsper">',spies.points_per,'</span></li>',
                '            <li><span style="font-weight:bold;">Max Points : </span> <span id="pointsper">',spies.max_points,'</span></li>',
                '        </ul>',
                '    </div>',
                '</div>'
            ].join('')});
            
            return this.trainTab;
        }
    });
    
    YAHOO.lacuna.buildings.TheftTraining = TheftTraining;

})();
YAHOO.register("TheftTraining", YAHOO.lacuna.buildings.TheftTraining, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/theftTraining.js","/building")
},{"buffer":71,"oMfpAn":75}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.ThemePark == "undefined" || !YAHOO.lacuna.buildings.ThemePark) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var ThemePark = function(result){
        ThemePark.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.ThemePark;
    };
    
    Lang.extend(ThemePark, Lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getTab()];
        },
        _getTab : function() {
            this.tab = new YAHOO.widget.Tab({ label: "Operations", content: [
                '<div id="ThemeParkWorking" style="display:none;">',
                '    Time left on current operations: <span id="ThemeParkTime"></span>',
                '</div>',
                '<div id="ThemeParkMessage" style="margin-top:5px;"></div>',
                '<div id="ThemeParkDisplay" style="display:none;margin:5px 0;">',
                '    <button type="button" id="Operate">Open Theme Park</button>',
                '</div>'
            ].join('')});
            
            Event.on("Operate", "click", this.operate, this, true);
            
            this.subscribe("onLoad", function() {
                this.updateDisplay(this.result); //first load this will be accurate
            }, this, true);
            
            return this.tab;
        },
        
        operate : function() {
            Lacuna.Pulser.Show();
                
            this.service.operate({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    this.updateDisplay(o.result);
                },
                scope:this
            });
        },
        updateDisplay : function(result) {
            var isWorking = result.building.work && result.building.work.seconds_remaining > 0;
            if(isWorking) {
                Dom.setStyle("ThemeParkWorking","display","");
                this.resetQueue();
                this.addQueue(result.building.work.seconds_remaining, this.parkQueue, "ThemeParkTime");
            }
            else {
                Dom.setStyle("ThemeParkWorking","display","none");
            }
            
            if(result.themepark.can_operate) {
                Dom.setStyle("ThemeParkDisplay","display","");
                if(isWorking) {
                    Dom.get("Operate").innerHTML = "Extend Theme Park Operations";
                }
                else {
                    Dom.get("Operate").innerHTML = "Open Theme Park";
                }
            }
            else {
                Dom.setStyle("ThemeParkDisplay","display","none");
                Dom.get("ThemeParkMessage").innerHTML = result.themepark.reason[1];
            }
        
        },
        parkQueue : function(remaining, el){
            if(remaining <= 0) {
                var span = Dom.get(el),
                    p = span.parentNode;
                p.removeChild(span);
                p.innerHTML = "Park is closed.";
            }
            else {
                Dom.get(el).innerHTML = Lib.formatTime(Math.round(remaining));
            }
        }
        
    });
    
    YAHOO.lacuna.buildings.ThemePark = ThemePark;

})();
YAHOO.register("ThemePark", YAHOO.lacuna.buildings.ThemePark, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/themePark.js","/building")
},{"buffer":71,"oMfpAn":75}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Trade == "undefined" || !YAHOO.lacuna.buildings.Trade) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Pager = YAHOO.widget.Paginator,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Trade = function(result){
        Trade.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Trade;
        
        this.availableAcceptText = "Accept";
        this.addTradeText = "Add Trade";
        this.pushTradeText = "Send";
        
        // defaults.  Values are updated to server numbers during get_* calls
        this.shipSize = 50000;
        this.planSize = 10000;
        this.spySize = 350;
        this.glyphSize = 100;
        
        this.createEvent("onLoadResources");
        this.createEvent("onLoadGlyphSummary");
        this.createEvent("onLoadPlanSummary");
        this.createEvent("onLoadShipSummary");
        this.createEvent("onLoadPrisoners");
        
        if(this.building.level > 0) {
            this.subscribe("onLoad", function() {
                this.getStoredResources();
                this.mine.subscribe("activeChange", this.getMyTrades, this, true);
                this.avail.subscribe("activeChange", this.getAvailableTrades, this, true);
                this.push.subscribe("activeChange", function(e) {
                    if(e.newValue) {
                        this.getPushShips();
                        
                        if(!this.tradePushSubbed) {
                            Event.on("tradePushResources", "click", function(){
                                if(Dom.getStyle("tradePushResourceName", "display") == "none") {
                                    Dom.setStyle("tradePushResourceName", "display", "block");
                                    this.getStoredResources();
                                }
                                else {
                                    Dom.setStyle("tradePushResourceName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushGlyphSummary", "click", function(){
                                if(Dom.getStyle("tradePushGlyphSummaryName", "display") == "none") {
                                    Dom.setStyle("tradePushGlyphSummaryName", "display", "block");
                                    this.getGlyphSummary();
                                }
                                else {
                                    Dom.setStyle("tradePushGlyphSummaryName", "display", "none");
                                }
                            }, this, true);

                            Event.on("tradePushPlanSummary", "click", function(){
                                if(Dom.getStyle("tradePushPlanSummaryName", "display") == "none") {
                                    Dom.setStyle("tradePushPlanSummaryName", "display", "block");
                                    this.getPlanSummary();
                                }
                                else {
                                    Dom.setStyle("tradePushPlanSummaryName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushShipSummary", "click", function(){
                                if(Dom.getStyle("tradePushShipSummaryName", "display") == "none") {
                                    Dom.setStyle("tradePushShipSummaryName", "display", "block");
                                    this.getShipSummary();
                                }
                                else {
                                    Dom.setStyle("tradePushShipSummaryName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushPrisoners", "click", function(){
                                if(Dom.getStyle("tradePushPrisonerName", "display") == "none") {
                                    Dom.setStyle("tradePushPrisonerName", "display", "block");
                                    this.getPrisoners();
                                }
                                else {
                                    Dom.setStyle("tradePushPrisonerName", "display", "none");
                                }
                            }, this, true);
                        }
                        
                        this.tradePushSubbed = 1;
                    }
                },this,true);
                this.add.subscribe("activeChange", function(e) {
                    if(e.newValue) {
                        this.getAddShips();
                        
                        if(!this.tradeAddSubbed) {
                            Event.on("tradeAddResources", "click", function(){
                                if(Dom.getStyle("tradeAddResourceName", "display") == "none") {
                                    Dom.setStyle("tradeAddResourceName", "display", "block");
                                    this.getStoredResources();
                                }
                                else {
                                    Dom.setStyle("tradeAddResourceName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddGlyphSummary", "click", function(){
                                if(Dom.getStyle("tradeAddGlyphSummaryName", "display") == "none") {
                                    Dom.setStyle("tradeAddGlyphSummaryName", "display", "block");
                                    this.getGlyphSummary();
                                }
                                else {
                                    Dom.setStyle("tradeAddGlyphSummaryName", "display", "none");
                                }
                            }, this, true);

                            Event.on("tradeAddPlanSummary", "click", function(){
                                if(Dom.getStyle("tradeAddPlanSummaryName", "display") == "none") {
                                    Dom.setStyle("tradeAddPlanSummaryName", "display", "block");
                                    this.getPlanSummary();
                                }
                                else {
                                    Dom.setStyle("tradeAddPlanSummaryName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddShipSummary", "click", function(){
                                if(Dom.getStyle("tradeAddShipSummaryName", "display") == "none") {
                                    Dom.setStyle("tradeAddShipSummaryName", "display", "block");
                                    this.getShipSummary();
                                }
                                else {
                                    Dom.setStyle("tradeAddShipSummaryName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddPrisoners", "click", function(){
                                if(Dom.getStyle("tradeAddPrisonerName", "display") == "none") {
                                    Dom.setStyle("tradeAddPrisonerName", "display", "block");
                                    this.getPrisoners();
                                }
                                else {
                                    Dom.setStyle("tradeAddPrisonerName", "display", "none");
                                }
                            }, this, true);
                        }
                        
                        this.tradeAddSubbed = 1;
                    }
                },this,true);
            }, this, true);
        }
    };

    Lang.extend(Trade, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.availablePager) {
                this.availablePager.destroy();
            }
            if(this.minePage) {
                this.minePage.destroy();
            }
            Trade.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            this.mineTabIndex = 3; //array location plus 1 since Production tab is always first
            return [this._getPushTab(), this._getAvailableTradesTab(), this._getMyTradesTab(), this._getAddTradeTab(), this._getSupplyChainTab(), this._getSupplyShipsTab(), this._getWasteChainTab()];
            },
_getPushTab : function() {
this.push = new YAHOO.widget.Tab({ label: "Push", content: [
    '<div id="pHt"><div class="tradeStash yui-g">',
    '    <div class="yui-u first">',
    '        <legend>On Planet</legend>',
    '        <div class="tradeContainers">',
    '            <div><div id="tradePushResources" class="accordian">Resources</div><ul id="tradePushResourceName"></ul></div>',
    '           <div><div id="tradePushGlyphSummary" class="accordian">Glyphs</div><ul id="tradePushGlyphSummaryName" style="display:none;"></ul></div>',
    '           <div><div id="tradePushPlanSummary" class="accordian">Plans</div><ul id="tradePushPlanSummaryName" style="display:none;"></ul></div>',
    '           <div><div id="tradePushShipSummary" class="accordian">Ships</div><ul id="tradePushShipSummaryName" style="display:none;"></ul></div>',
    '            <div><div id="tradePushPrisoners" class="accordian">Prisoners</div><ul id="tradePushPrisonerName" style="display:none;"></ul></div>',
    '        </div>',
    '    </div>',
    '    <div class="yui-u">',
    '        <legend>To Push</legend>',
    '        <div class="tradeContainers"><ul id="tradePushItems"></ul></div>',
    '    </div>',
    '</div>',
    '<ul style="margin-top:5px;">',
    '    <li style=""><label>Total Cargo:</label><span id="tradePushCargo">0</span></li>',
    '    <li style="margin-bottom:5px;"><label>To Colony:</label><select id="tradePushColony"><option value="" selected>&nbsp;</option></select></li>',
    '    <li style="margin-bottom:5px;"><label>With Ship:</label><select id="tradePushShip"></select></li>',
    '    <li style="margin-bottom:5px;"><label>Stay at Colony:</label><input type="checkbox" id="tradePushStay" /></li>',
    '    <li id="tradePushMessage" class="alert"></li>',
    '</ul></div><button id="tradePushSend">',this.pushTradeText,'</button>'].join('')});

this.subscribe("onLoadResources", this.populatePushResourceName, this, true);
this.subscribe("onLoadGlyphSummary", this.populatePushGlyphSummaryName, this, true);
this.subscribe("onLoadPlanSummary", this.populatePushPlanSummaryName, this, true);
this.subscribe("onLoadShipSummary", this.populatePushShipSummaryName, this, true);
this.subscribe("onLoadPrisoners", this.populatePushPrisonerName, this, true);

Event.onAvailable("tradePushColony", function(){
        var opt = document.createElement("option"),
        planets = Lib.planetarySort(Game.EmpireData.planets),
        cp = Game.GetCurrentPlanet(),
        nOpt;

        for(var p=0; p<planets.length; p++) {
        if(planets[p].id != cp.id){
        nOpt = opt.cloneNode(false);
        nOpt.value = planets[p].id;
        nOpt.innerHTML = planets[p].name;
        this.appendChild(nOpt);
        }
        }
        });
Event.on("tradePushColony", "change", this.getPushShips, this, true);

Event.delegate("tradePushResourceName", "click", this.PushAddResource, "button", this, true);
Event.delegate("tradePushGlyphSummaryName", "click", this.PushAddGlyphSummary, "button", this, true);
Event.delegate("tradePushPlanSummaryName", "click", this.PushAddPlanSummary, "button", this, true);
Event.delegate("tradePushShipSummaryName", "click", this.PushAddShipSummary, "button", this, true);
Event.delegate("tradePushPrisonerName", "click", this.PushAddPrisoner, "button", this, true);

Event.delegate("tradePushItems", "click", this.PushRemove, "button", this, true);

Event.on("tradePushSend", "click", this.Push, this, true);

return this.push;
              },
_getAvailableTradesTab : function() {
                   this.avail = new YAHOO.widget.Tab({ label: "Trades", content: [
                           '<div>',
                           '    <div style="border-bottom: 1px solid #52ACFF; padding-bottom: 5px; margin-bottom: 5px;"><label>Filter:</label><select id="tradeFilter"><option value="">All</option><option value="energy">Energy</option><option value="food">Food</option><option value="ore">Ore</option>',
                           '    <option value="water">Water</option><option value="waste">Waste</option><option value="glyph">Glyph</option><option value="prisoner">Prisoner</option>',
                           '    <option value="ship">Ship</option><option value="plan">Plan</option></select></div>',
                           '    <ul class="tradeHeader tradeInfo clearafter">',
                           '        <li class="tradeEmpire">Empire</li>',
                           '        <li class="tradeOfferedDate">Travel Time</li>',
                           '        <li class="tradeAsking">Cost</li>',
                           '        <li class="tradeOffer">Offering</li>',
                           '        <li class="tradeAction"></li>',
                           '        <li class="tradeAction"></li>',
                           '    </ul>',
                           '    <div><div id="tradeAvailableDetails"></div></div>',
                           '    <div id="tradeAvailablePaginator"></div>',
                           '</div>'].join('')});

                   Event.on("tradeFilter", "change", function(e) { this.getAvailableTrades({newValue:true}); }, this, true);

                   return this.avail;
               },
_getMyTradesTab : function() {
                  this.mine = new YAHOO.widget.Tab({ label: "My Trades", content: ['<div class="myTrades">',
                          '    <ul class="tradeHeader tradeInfo clearafter">',
                          '        <li class="tradeOfferedDate">Offered Date</li>',
                          '        <li class="tradeAsking">Cost</li>',
                          '        <li class="tradeOffer">Offering</li>',
                          '        <li class="tradeAction"></li>',
                          '    </ul>',
                          '    <div><div id="tradeMineDetails"></div></div>',
                          '    <div id="tradeMinePaginator"></div>',
                          '</div>'].join('')});

                  return this.mine;
              },
_getAddTradeTab : function() {
                 this.add = new YAHOO.widget.Tab({ label: "Add Trade", content: [
                         '<div id="aHt"><div class="tradeStash yui-g">',
                         '    <div class="yui-u first">',
                         '        <legend>On Planet</legend>',
                         '        <div class="tradeContainers">',
                         '            <div><div id="tradeAddResources" class="accordian">Resources</div><ul id="tradeAddResourceName"></ul></div>',
                         '           <div><div id="tradeAddGlyphSummary" class="accordian">Glyph</div><ul id="tradeAddGlyphSummaryName" style="display:none;"></ul></div>',
                         '           <div><div id="tradeAddPlanSummary" class="accordian">Plan</div><ul id="tradeAddPlanSummaryName" style="display:none;"></ul></div>',
                         '           <div><div id="tradeAddShipSummary" class="accordian">Ship</div><ul id="tradeAddShipSummaryName" style="display:none;"></ul></div>',
                         '            <div><div id="tradeAddPrisoners" class="accordian">Prisoners</div><ul id="tradeAddPrisonerName" style="display:none;"></ul></div>',
                         '        </div>',
                         '    </div>',
                         '    <div class="yui-u">',
                         '        <legend>To Offer</legend>',
                         '        <div class="tradeContainers"><ul id="tradeAddItems"></ul></div>',
                         '    </div>',
                         '</div>',
                         '<ul style="margin-top:5px;">',
                         '    <li style=""><label>Total Cargo:</label><span id="tradeAddCargo">0</span></li>',
                         '    <li style="margin: 5px 0;"><label style="font-weight:bold">Asking Essentia:</label><input type="text" id="tradeAddAskingQuantity" /></li>',
            '    <li style="margin-bottom:5px;"><label>With Ship:</label><select id="tradeAddShip"></select></li>',
            '    <li id="tradeAddMessage" class="alert"></li>',
            '</ul></div><button id="tradeAdd">',this.addTradeText,'</button>'].join('')});
            
            this.subscribe("onLoadResources", this.populateAddResourceName, this, true);
            this.subscribe("onLoadGlyphSummary", this.populateAddGlyphSummaryName, this, true);
            this.subscribe("onLoadPlanSummary", this.populateAddPlanSummaryName, this, true);
            this.subscribe("onLoadShipSummary", this.populateAddShipSummaryName, this, true);
            this.subscribe("onLoadPrisoners", this.populateAddPrisonerName, this, true);
            
            Event.delegate("tradeAddResourceName", "click", this.AddResource, "button", this, true);
            Event.delegate("tradeAddGlyphSummaryName", "click", this.AddGlyphSummary, "button", this, true);
            Event.delegate("tradeAddPlanSummaryName", "click", this.AddPlanSummary, "button", this, true);
            Event.delegate("tradeAddShipSummaryName", "click", this.AddShipSummary, "button", this, true);
            Event.delegate("tradeAddPrisonerName", "click", this.AddPrisoner, "button", this, true);
            
            Event.delegate("tradeAddItems", "click", this.AddRemove, "button", this, true);
            
            Event.on("tradeAdd", "click", this.AddTrade, this, true);
            return this.add;
        },
_getSupplyChainTab : function() {
    var planets = Lib.planetarySort(Game.EmpireData.planets),
        current_planet = Game.GetCurrentPlanet(),
        target_options = "";

    for(var p=0; p<planets.length; p++) {
      if(planets[p].id != current_planet.id){
        target_options += [
            '<option value="', planets[p].id, '">', planets[p].name, '</option>'
        ].join('');
      }
    }
    
    this.supplyChainTab = new YAHOO.widget.Tab({ label: "Supply Chains", content: [
        '<div id="supplyChainInfo" style="margin-bottom: 2px">',
        '    <div id="supplyChainMaxCount"></div><hr/>',
        '    <div id="supplyChainAddNew">',
        '     <b>Add New Supply Chain</b><br/>',
        '     Target: <select id="supplyChainAddTargetId">',
                target_options,
        '     </select>',
        '     Resource: <select id="supplyChainAddResourceType">',
                this.resourceOptionsHTML(),
        '     </select>',
        '     Resources/hr: <input id="supplyChainAddResourceHour" type="text"/>',
        '     <button id="supplyChainAddButton">Add</button>',
        '   </div>',
        '   <div id="supplyChainMetric"></div><hr/>',
        '   <div id="supplyChainList">',
        '      <ul id="supplyChainListHeader" class="supplyChainHeader supplyChainInfo clearafter">',
        '        <li class="supplyChainBody">Target</li>',
        '        <li class="supplyChainResource">Resource</li>',
        '        <li class="supplyChainHour">/hr</li>',
        '        <li class="supplyChainAction"></li>',
        '      </ul>',
        '      <div><div id="supplyChainListDetails"></div></div>',
        '   </div>',
        '   <div id="supplyChainListNone"><b>No Supply Chains In Use</b></div>',
        '</div>',
    ].join('')});
    
    Event.on("supplyChainAddButton", "click", this.SupplyChainAddNew, {Self:this}, true);
    
    this.supplyChainTab.subscribe("activeChange", this.viewSupplyChainInfo, this, true);

    return this.supplyChainTab;
},
_getSupplyShipsTab : function() {
    this.supplyShipsTab = new YAHOO.widget.Tab({ label: "Supply Ships", content: [
        '<div id="supplyChainShipsInfo"></div><hr/>',
        '<div id="supplyChainShipsHeader">',
        '  <ul class="shipHeader shipInfo clearafter">',
        '    <li class="shipName">Name</li>',
        '    <li class="shipTask">Task</li>',
        '    <li class="shipSpeed">Speed</li>',
        '    <li class="shipHold">Hold</li>',
        '    <li class="shipAction"></li>',
        '  </ul>',
        '  <div><div id="supplyChainShipsDetails"></div></div>',
        '</div>',
        '<div id="supplyChainShipsNone">There are no supply ships available.</div>'
    ].join('')});
    
    this.supplyShipsTab.subscribe("activeChange", this.viewSupplyShips, this, true);

    return this.supplyShipsTab;
},
_getWasteChainTab : function() {
    this.wasteChainTab = new YAHOO.widget.Tab({ label: "Waste Chain", content: [
        '<div id="wasteChainDetails" style="margin-bottom: 2px"></div>',
        '<div id="wasteChainShips">',
        '    <ul class="shipHeader shipInfo clearafter">',
        '        <li class="shipName">Name</li>',
        '        <li class="shipTask">Task</li>',
        '        <li class="shipSpeed">Speed</li>',
        '        <li class="shipHold">Hold</li>',
        '        <li class="shipAction"></li>',
        '    </ul>',
        '    <div><div id="wasteChainShipsDetails"></div></div>',
        '</div>',
        '<div id="wasteChainShipsNone">There are no scows available.</div>'
    ].join('')});
    
    this.wasteChainTab.subscribe("activeChange", this.viewWasteChainInfo, this, true);

    return this.wasteChainTab;
},
        
        getGlyphSummary : function(force) {
            if(force || !this.glyph_summary) {
                Lacuna.Pulser.Show();
                this.service.get_glyph_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.glyph_summary = o.result.glyphs;
                        this.glyphSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadGlyphSummary");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },

        getPlanSummary : function(force) {
            if(force || !this.plan_summary) {
                Lacuna.Pulser.Show();
                this.service.get_plan_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.plan_summary = o.result.plans;
                        this.planSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadPlanSummary");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getPrisoners : function(force) {
            if(force || !this.prisoners) {
                Lacuna.Pulser.Show();
                this.service.get_prisoners({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.prisoners = o.result.prisoners;
                        this.spySize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadPrisoners");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getShipSummary : function(force) {
            if(force || !this.ship_summary) {
                Lacuna.Pulser.Show();
                this.service.get_ship_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.ship_summary = o.result.ships;
                        this.shipSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadShipSummary");
                        Lacuna.Pulser.Hide();
                    }, 
                    scope:this
                });
            }
        },
        getStoredResources : function(force) {
            if(force || !this.resources) {
                Lacuna.Pulser.Show();
                this.service.get_stored_resources({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.resources = o.result.resources;
                        this.fireEvent("onLoadResources");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        //View Available
        getAvailableTrades : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:1},
                    selVal = Lib.getSelectedOptionValue("tradeFilter");
                if(selVal) {
                    data.filter = selVal;
                }
                this.service.view_market(data, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.view_available_trades.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.availableTrades = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                        
                        this.availablePager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeAvailablePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.availablePager.subscribe('changeRequest',this.AvailableHandlePagination, this, true);
                        this.availablePager.render();
                        
                        this.AvailablePopulate();
                    },
                    scope:this
                });
            }
        },
        AvailablePopulate : function() {
            var details = Dom.get("tradeAvailableDetails");
            
            if(details) {
                var trades = this.availableTrades.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        bbtn,
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Trade = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeEmpire");
                    nLi.innerHTML = trade.empire.name;
                    Event.on(nLi, "click", this.EmpireProfile, trade.empire);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatTime(Math.round(trade.delivery.duration));
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = this.availableAcceptText;
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableAccept, {Self:this,Trade:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    Dom.addClass(bbtn, "reportAbuse");
                    bbtn.innerHTML = "Spam";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableReport, {Self:this,Trade:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 240;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        AvailableHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:newState.page},
                selVal = Lib.getSelectedOptionValue("tradeFilter");
            if(selVal) {
                data.filter = selVal;
            }
            this.service.view_market(data, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.view_available_trades.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.availableTrades = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                    
                    this.AvailablePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.availablePager.setState(newState);
        },
        AvailableAccept : function() {
            Lacuna.Pulser.Show();
            this.Self.service.accept_from_market({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.Trade.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.accept_trade.success");
                    this.Self.rpcSuccess(o);
                    //force get the new availabe list after accepting so we get a new captcha
                    this.Self.getAvailableTrades({newValue:true});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        AvailableReport : function() {
            Lacuna.Pulser.Show();
            this.Self.service.report_abuse({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.Trade.id
            }, {
                success : function(o){
                    var btn = Sel.query(".reportAbuse",this.Line, true);
                    if(btn) {
                        Event.purgeElement(btn);
                        btn.parentNode.removeChild(btn);
                    }
                    this.Self.rpcSuccess(o);
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        EmpireProfile : function(e, empire) {
            Lacuna.Info.Empire.Load(empire.id);
        },
        
        
        //View Mine
        getMyTrades : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                this.service.view_my_market({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.view_my_trades.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.mineTrades = o.result; //store: trades=[], trade_count = 1, page_number=1
                        
                        this.minePage = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeMinePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.minePage.subscribe('changeRequest',this.MineHandlePagination, this, true);
                        this.minePage.render();
                        
                        this.MinePopulate();
                    },
                    scope:this
                });
            }
        },
        MinePopulate : function() {
            var details = Dom.get("tradeMineDetails");
            
            if(details) {
                var trades = this.mineTrades.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";

                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Trade = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatServerDateTimeShort(trade.date_offered);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Withdraw";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.MineWithdraw, {Self:this,Trade:trade,Line:nUl}, true);

                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }

                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 185;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        MineHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_my_market({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.view_available_trades.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.mineTrades = o.result; //store: trades=[], trade_count = 1, page_number=1
                    
                    this.MinePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.minePage.setState(newState);
        },
        MineWithdraw : function() {
            if(confirm(['Are you sure you want to withdraw the trade asking for ', this.Trade.ask, ' essentia and offering ', this.Trade.offer.join(', '),'?'].join(''))) {
                Lacuna.Pulser.Show();
                this.Self.service.withdraw_from_market({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    trade_id:this.Trade.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.withdraw_trade.success");
                        this.Self.rpcSuccess(o);
                        var trades = this.Self.mineTrades.trades;
                        for(var i=0; i<trades.length; i++) {
                            if(trades[i].id == this.Trade.id) {
                                trades.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        Lacuna.Pulser.Hide();
                        
                        this.Self.getStoredResources(true);
                        this.Self.getPlanSummary(true);
                        this.Self.getGlyphSummary(true);
                        this.Self.getPrisoners(true);
                        this.Self.getShipSummary(true);
                    },
                    scope:this
                });
            }
        },
        
        //Add trade
        populateAddResourceName : function() {
            var elm = Dom.get("tradeAddResourceName"),
                li = document.createElement("li"), nLi, x, r, name, resource;
                
            if(elm) {
                elm.innerHTML = "";
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(this.resources[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Resource = {type:name,quantity:this.resources[name]*1};
                                    nLi.innerHTML = ['<span class="tradeResourceName">',name.titleCaps(), ' (<label class="quantity">', this.resources[name], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                                    elm.appendChild(nLi);
                                }
                            }
                        }
                        else if(this.resources[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Resource = {type:r,quantity:this.resources[r]*1};
                            nLi.innerHTML = ['<span class="tradeResourceName">',r.titleCaps(), ' (<label class="quantity">', this.resources[r], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                            elm.appendChild(nLi);
                        }
                    }
                }
            }
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 180;
                if(Ht > 300) { Ht = 300; }
                var aHt = Dom.get('aHt');
                Dom.setStyle(aHt,"height",Ht + "px");
                Dom.setStyle(aHt,"overflow-y","auto");
            },10);
        },
        populateAddGlyphSummaryName : function() {
            var elm = Dom.get("tradeAddGlyphSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.glyph_summary.length > 0) {
                    for(var x=0; x < this.glyph_summary.length; x++) {
                        var obj = this.glyph_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.GlyphSummary = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">',obj.name.titleCaps(), ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Glyphs Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddPlanSummaryName : function() {
            var elm = Dom.get("tradeAddPlanSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.plan_summary.length > 0) {
                    for(var x=0; x < this.plan_summary.length; x++) {
                        var obj = this.plan_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.PlanSummary = obj;
                        if (obj.extra_build_level > 0) {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,'+',obj.extra_build_level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        else {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Plans Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddShipSummaryName : function() {
            var elm = Dom.get("tradeAddShipSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.ship_summary.length > 0) {
                    for(var x=0; x < this.ship_summary.length; x++) {
                        var obj = this.ship_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.ShipSummary = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">', obj.name,' - ',obj.type.titleCaps('_',' '),
                                         ' - Hold:',obj.hold_size,
                                         ' - Berth:',obj.berth_level,
                                         ' - Speed:',obj.speed,
                                         ' (<label class="quantity">', obj.quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Ships Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddPrisonerName : function() {
            var elm = Dom.get("tradeAddPrisonerName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.prisoners.length > 0) {
                    for(var x=0; x < this.prisoners.length; x++) {
                        var obj = this.prisoners[x];
                        nLi = li.cloneNode(false);
                        nLi.Prisoner = obj;
                        nLi.innerHTML = ['<span class="tradeName">',obj.name, ' ', obj.level, '</span> <button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Prisoners Available";
                    elm.appendChild(nLi);
                }
            }
        },
        getAddShips : function() {
            Lacuna.Pulser.Show();
            
            this.service.get_trade_ships({
                session_id: Game.GetSession(""),
                building_id: this.building.id
            },{
                success : function(o){
                    this.rpcSuccess(o);
                    
                    var elm = Dom.get("tradeAddShip"),
                        opt = document.createElement("option"),
                        ships = o.result.ships,
                        nOpt;
                        
                    if(elm && ships) {
                        var selectedVal = Lib.getSelectedOptionValue(elm);
                        elm.options.length = 0;    
                        for(var x=0; x < ships.length; x++) {
                            var obj = ships[x];
                            nOpt = opt.cloneNode(false);
                            nOpt.value = obj.id;
                            nOpt.innerHTML = [obj.name, ' (', obj.type_human, ' - Hold:', obj.hold_size,
                                                                          ' - Berth:', obj.berth_level,
                                                                          ' - Speed:', obj.speed, ')'
                                                                         ].join('');
                            nOpt.selected = selectedVal == obj.id;
                            elm.appendChild(nOpt);
                        }
                    }
                    
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        updateAddCargo : function(byVal) {
            var c = Dom.get("tradeAddCargo"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        AddResource : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(quantity && c) {
                var id = "addResource-" + li.Resource.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Resource.quantity) {
                        quantity = li.Resource.quantity;
                    }
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Resource.type, quantity:quantity, size:1};
                    content.innerHTML = ['<span class="tradeResourceName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateAddCargo(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true),
                        inp = Sel.query("input", found, true);
                    if(newTotal > li.Resource.quantity) {
                        newTotal = li.Resource.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(diff);
                    
                    var a = new Util.ColorAnim(lq, {color:{from:'#0f0',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        AddGlyphSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var gName = li.GlyphSummary.name,
                    id = "addGlyphSummary-" + gName,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.glyphSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {name:gName, quantity:quantity, type:"glyph", size:this.glyphSize};
                    content.innerHTML = ['<span class="tradeResourceName">',gName.titleCaps(),' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateAddCargo(this.glyphSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.GlyphSummary.quantity) {
                        newTotal = li.GlyphSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.glyphSize * diff);
                }
            }
        },
        AddPlanSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var pName = li.PlanSummary.name,
                    pType = li.PlanSummary.plan_type,
                    pLevel = li.PlanSummary.level,
                    pExtra = li.PlanSummary.extra_build_level,
                    id = ['addPlanSummary-', pType, '-', pLevel, '-', pExtra].join('').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.planSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {plan_type:pType, quantity:quantity, type:"plan", level:pLevel, extra_build_level:pExtra, size:this.planSize};
                    if(pExtra > 0) {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel, '+', pExtra,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }
                    else {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }

                    c.appendChild(item);
                    this.updateAddCargo(this.planSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.PlanSummary.quantity) {
                        newTotal = li.PlanSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.planSize * diff);
                }
            }
        },
        AddShipSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var sName = li.ShipSummary.name,
                    sType = li.ShipSummary.type,
                    sSize = li.ShipSummary.hold_size,
                    sBerth = li.ShipSummary.berth_level,
                    sSpeed = li.ShipSummary.speed,
                    id = ['addShipSummary', sName, sType, sSize, sBerth, sSpeed].join('-').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.shipSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {quantity:quantity, type:"ship", name:sName, ship_type:sType, hold_size:sSize, berth_level:sBerth, speed:sSpeed, size:this.shipSize};
                    content.innerHTML = ['<span class="tradeResourceName">', sName, ' - ', sType.titleCaps('_',' '),
                                         ' - Hold:', sSize,
                                         ' - Berth:', sBerth,
                                         ' - Speed:', sSpeed,
                                         ' (<label class="quantity">',quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" value="',
                                         quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateAddCargo(this.shipSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.ShipSummary.quantity) {
                        newTotal = li.ShipSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.shipSize * diff);
                }
            }
        },

        AddPrisoner : function(e, matchedEl, container){
            var li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var obj = li.Prisoner,
                    gId = obj.id,
                    id = "addPrisoner-" + gId;
                if(Sel.query("#"+id, c).length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        this.updateAddCargo(this.spySize*-1);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {prisoner_id:gId, type:"prisoner", size:this.spySize};
                    content.innerHTML = [obj.name, ' ', obj.level].join('');
                    c.appendChild(item);
                    this.updateAddCargo(this.spySize);
                }
            }
        },
        AddRemove : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.updateAddCargo(li.Object.quantity * -1 * li.Object.size);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updateAddCargo(diff * li.Object.size);
                    var a = new Util.ColorAnim(lq, {color:{from:'#f00',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        AddTrade : function() {
            var qVal = Dom.get("tradeAddAskingQuantity").value*1;
            if(!Lang.isNumber(qVal) || qVal <= 0) {
                Dom.get("tradeAddMessage").innerHTML = "Quantity of asking essentia must be a number and greater than 0";
                return;
            }
            else {
                Dom.get("tradeAddMessage").innerHTML = "";
            }
                
            var data = {
                    session_id:Game.GetSession(""),
                    building_id:this.building.id,
                    offer: [],
                    ask: qVal,
                    options: {
                        ship_id:Lib.getSelectedOptionValue("tradeAddShip")
                    }
                },
                hasResources, hasPlans, hasGlyphs, hasShips, hasPrisoners,
                lis = Sel.query("li","tradeAddItems");
                
            for(n=0; n<lis.length; n++) {
                obj = lis[n].Object;
                if(obj) {
                    data.offer[data.offer.length] = obj;
                    switch(obj.type) {
                        case "plan":
                            hasPlanes = true;
                            break;
                        case "glyph":
                            hasGlyphs = true;
                            break;
                        case "prisoner":
                            hasPrisoners = true;
                            break;
                        case "ship":
                            hasShips = true;
                            break;
                        default:
                            hasResources = true;
                            break;
                    }
                }
            }
            
            Lacuna.Pulser.Show();
            this.service.add_to_market(data, {
                success : function(o){
                    this.rpcSuccess(o);
                    if(hasResources) {
                        this.getStoredResources(true);
                    }
                    if(hasPlans) {
                        this.getPlanSummary(true);
                    }
                    if(hasGlyphs) {
                        this.getGlyphSummary(true);
                    }
                    if(hasPrisoners) {
                        this.getPrisoners(true);
                    }
                    if(hasShips) {
                        this.getShipSummary(true);
                    }
                    for(var i=0; i<lis.length; i++) {
                        if(lis[i].Object) {
                            Event.purgeElement(lis[i]);
                            lis[i].parentNode.removeChild(lis[i]);
                        }
                    }
                    Dom.get("tradeAddAskingQuantity").value = "";
                    Dom.get("tradeAddCargo").innerHTML = "0";
                    this.fireEvent("onSelectTab", this.mineTabIndex);
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        
        //Push Resources
        populatePushResourceName : function() {
            var elm = Dom.get("tradePushResourceName"),
                li = document.createElement("li"), nLi, x, r, name, resource;
                
            if(elm) {
                elm.innerHTML = "";
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(this.resources[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Resource = {type:name,quantity:this.resources[name]*1};
                                    nLi.innerHTML = ['<span class="tradeResourceName">',name.titleCaps(), ' (<label class="quantity">', this.resources[name], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                                    elm.appendChild(nLi);
                                }
                            }
                        }
                        else if(this.resources[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Resource = {type:r,quantity:this.resources[r]*1};
                            nLi.innerHTML = ['<span class="tradeResourceName">',r.titleCaps(), ' (<label class="quantity">', this.resources[r], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                            elm.appendChild(nLi);
                        }
                    }
                }
            }
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 180;
                if(Ht > 320) { Ht = 320; }
                var pHt = Dom.get('pHt');
                Dom.setStyle(pHt,"height",Ht + "px");
                Dom.setStyle(pHt,"overflow-y","auto");
            },10);
        },
        populatePushGlyphSummaryName : function() {
            var elm = Dom.get("tradePushGlyphSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.glyph_summary.length > 0) {
                    for(var x=0; x < this.glyph_summary.length; x++) {
                        var obj = this.glyph_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.GlyphSummary = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">',obj.name.titleCaps(), ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Glyphs Available";
                    elm.appendChild(nLi);
                }
            }
        },

        populatePushPlanSummaryName : function() {
            var elm = Dom.get("tradePushPlanSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.plan_summary.length > 0) {
                    for(var x=0; x < this.plan_summary.length; x++) {
                        var obj = this.plan_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.PlanSummary = obj;
                        if(obj.extra_build_level > 0) {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,'+',obj.extra_build_level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        else {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Plans Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populatePushShipSummaryName : function() {
            var elm = Dom.get("tradePushShipSummaryName"),
                li = document.createElement("li"), nLi;

            if(elm) {
                elm.innerHTML = "";
                if(this.ship_summary.length > 0) {
                    for(var x=0; x < this.ship_summary.length; x++) {
                        var obj = this.ship_summary[x];
                        nLi = li.cloneNode(false);
                        nLi.ShipSummary = obj;
                        nLi.innerHTML = ['<span class="tradeName">',obj.name,
                                         ' - ', obj.type.titleCaps('_',' '),
                                         ' - Hold:', obj.hold_size,
                                         ' - Berth:', obj.berth_level,
                                         ' - Speed:', obj.speed,
                                         ' (<label class="quantity">', obj.quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Ships Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populatePushPrisonerName : function() {
            var elm = Dom.get("tradePushPrisonerName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.prisoners.length > 0) {
                    for(var x=0; x < this.prisoners.length; x++) {
                        var obj = this.prisoners[x];
                        nLi = li.cloneNode(false);
                        nLi.Prisoner = obj;
                        nLi.innerHTML = ['<span class="tradeName">',obj.name, ' ', obj.level, '</span> <button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Prisoners Available";
                    elm.appendChild(nLi);
                }
            }
        },
        getPushShips : function() {
            var targetId = Lib.getSelectedOptionValue("tradePushColony");
            if(targetId) {
                Lacuna.Pulser.Show();
                this.service.get_trade_ships({
                    session_id: Game.GetSession(""),
                    building_id: this.building.id,
                    target_body_id: targetId
                },{
                    success : function(o){
                        this.rpcSuccess(o);
                        
                        var elm = Dom.get("tradePushShip"),
                            opt = document.createElement("option"),
                            ships = o.result.ships,
                            nOpt;
                            
                        if(elm && ships) {
                            var selectedVal = Lib.getSelectedOptionValue(elm);
                            elm.options.length = 0;    
                            for(var x=0; x < ships.length; x++) {
                                var obj = ships[x];
                                nOpt = opt.cloneNode(false);
                                nOpt.value = obj.id;
                                nOpt.innerHTML = [obj.name, ' (', obj.type_human, ' - Hold:', obj.hold_size, ' - Estimated Travel Time:', Lib.formatTime(obj.estimated_travel_time), ')'].join('');
                                nOpt.selected = selectedVal == obj.id;
                                elm.appendChild(nOpt);
                            }
                        }
                        
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
            else {
                Dom.get("tradePushShip").options.length = 0;
            }
        },
        updatePushCargo : function(byVal) {
            var c = Dom.get("tradePushCargo"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        PushAddResource : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(quantity && c) {
                var id = "pushResource-" + li.Resource.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Resource.quantity) {
                        quantity = li.Resource.quantity;
                    }
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Resource.type, quantity:quantity, size:1};
                    content.innerHTML = ['<span class="tradeResourceName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updatePushCargo(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true),
                        inp = Sel.query("input", found, true);
                    if(newTotal > li.Resource.quantity) {
                        newTotal = li.Resource.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(diff);

                    var a = new Util.ColorAnim(lq, {color:{from:'#0f0',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        PushAddGlyphSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var gName = li.GlyphSummary.name,
                    id = "pushGlyphSummary-" + gName,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.glyphSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {name:gName, quantity:quantity, type:"glyph", size:this.glyphSize};
                    content.innerHTML = ['<span class="tradeResourceName">',gName.titleCaps(),' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updatePushCargo(this.glyphSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.GlyphSummary.quantity) {
                        newTotal = li.GlyphSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.glyphSize * diff);
                }
            }
        },
        PushAddPlanSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(quantity && li && c) {
                var pName = li.PlanSummary.name,
                    pType = li.PlanSummary.plan_type,
                    pLevel = li.PlanSummary.level,
                    pExtra = li.PlanSummary.extra_build_level,
                    id = ['pushPlanSummary-', pType, '-', pLevel, '-', pExtra].join('').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);

                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.planSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {plan_type:pType, quantity:quantity, type:"plan", level:pLevel, extra_build_level:pExtra, size:this.planSize};
                    if(pExtra > 0) {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel, '+', pExtra,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }
                    else {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }

                    c.appendChild(item);
                    this.updatePushCargo(this.planSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.PlanSummary.quantity) {
                        newTotal = li.PlanSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.planSize * diff);
                }
            }
        },

        PushAddShipSummary : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var sName = li.ShipSummary.name,
                    sType = li.ShipSummary.type,
                    sSize = li.ShipSummary.hold_size,
                    sBerth = li.ShipSummary.berth_level,
                    sSpeed = li.ShipSummary.speed,
                    id = ['pushShipSummary-', sName, sType, sSize, sBerth, sSpeed].join('-').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.shipSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {quantity:quantity,
                                   type:"ship",
                                   name:sName,
                                   ship_type:sType,
                                   hold_size:sSize,
                                   berth_level:sBerth,
                                   speed:sSpeed,
                                   size:this.shipSize};
                    content.innerHTML = ['<span class="tradeResourceName">',sName, ' - ',
                                         sType.titleCaps('_',' '),
                                         ' - Hold:', sSize,
                                         ' - Berth:', sBerth,
                                         ' - Speed:', sSpeed,
                                         ' (<label class="quantity">',quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');

                    c.appendChild(item);
                    this.updatePushCargo(this.shipSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.ShipSummary.quantity) {
                        newTotal = li.ShipSummary.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.shipSize * diff);
                }
            }
        },
        PushAddPrisoner : function(e, matchedEl, container){
            var li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var obj = li.Prisoner,
                    gId = obj.id,
                    id = "pushPrisoner-" + gId;
                if(Sel.query("#"+id, c).length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        this.updatePushCargo(this.spySize*-1);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {prisoner_id:gId, type:"prisoner", size:this.spySize};
                    content.innerHTML = [obj.name, ' ', obj.level].join('');
                    c.appendChild(item);
                    this.updatePushCargo(this.spySize);
                }
            }
        },
        PushRemove : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.updatePushCargo(li.Object.quantity * -1 * li.Object.size);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updatePushCargo(diff * li.Object.size);
                    var a = new Util.ColorAnim(lq, {color:{from:'#f00',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        Push : function() {
            var data = {
                    session_id: Game.GetSession(""),
                    building_id: this.building.id,
                    target_id: Lib.getSelectedOptionValue(Dom.get("tradePushColony")),
                    options: {
                        ship_id: Lib.getSelectedOptionValue(Dom.get("tradePushShip")),
                        stay: Dom.get("tradePushStay").checked ? 1 : 0
                    }
                },
                lis = Sel.query("li","tradePushItems"),
                items = [],
                hasResources, hasPlans, hasGlyphs, hasShips, hasPrisoners;
                
            for(var n=0; n<lis.length; n++) {
                if(lis[n].Object) {
                    items[n] = lis[n].Object;
                    switch(items[n].type) {
                        case "plan":
                            hasPlanes = true;
                            break;
                        case "glyph":
                            hasGlyphs = true;
                            break;
                        case "prisoner":
                            hasPrisoners = true;
                            break;
                        case "ship":
                            hasShips = true;
                            break;
                        default:
                            hasResources = true;
                            break;
                    }
                }
            }
            data.items = items;
            
            if(data.items.length == 0) {
                Dom.get("tradePushMessage").innerHTML = "Must add items to send to colony.";
            }
            else {
                Dom.get("tradePushMessage").innerHTML = "";
                Lacuna.Pulser.Show();
                this.service.push_items(data, {
                    success : function(o){
                        this.rpcSuccess(o);
                        
                        for(var i=0; i<lis.length; i++) {
                            if(lis[i].Object) {
                                Event.purgeElement(lis[i]);
                                lis[i].parentNode.removeChild(lis[i]);
                            }
                        }

                        Dom.get("tradePushCargo").innerHTML = "0";
                        
                        if(hasResources) {
                            this.getStoredResources(true);
                        }
                        if(hasPlans) {
                            this.getPlanSummary(true);
                        }
                        if(hasGlyphs) {
                            this.getGlyphSummary(true);
                        }
                        if(hasPrisoners) {
                            this.getPrisoners(true);
                        }
                        if(hasShips) {
                            this.getShipSummary(true);
                        }
                    
                        var msg = Dom.get("tradePushMessage");
                        msg.innerHTML = ["Successfully pushed to ", Lib.getSelectedOption(Dom.get("tradePushColony")).innerHTML, '.'].join('');
                        Lib.fadeOutElm("tradePushMessage");
                        Lacuna.Pulser.Hide();
                        //get new ships since we just sent one
                        this.getPushShips();
                    },
                    scope:this
                });
            }
        },
        addResourceOptions : function(selectElement, selected) {
            for(r in Lib.ResourceTypes) {
                if(Lib.ResourceTypes.hasOwnProperty(r)) {
                    resource = Lib.ResourceTypes[r];
                    if(Lang.isArray(resource)) {
                        var optGroup = document.createElement("optgroup");
                        optGroup.setAttribute("label", r.titleCaps());
                        
                        for(x=0; x < resource.length; x++) {
                            name = resource[x];
                            option = document.createElement("option");
                            option.setAttribute("value", name);
                            option.innerHTML = name.titleCaps();
                            
                            if ( selected && name == selected ) {
                                option.setAttribute("selected", "selected");
                            }
                            optGroup.appendChild(option);
                        }
                        selectElement.appendChild(optGroup);
                    }
                    else if(resource) {
                        option = document.createElement("option");
                        option.setAttribute("value", r);
                        option.innerHTML = r.titleCaps();
                        
                        if ( selected && r == selected ) {
                            option.setAttribute("selected", "selected");
                        }
                        
                        selectElement.appendChild(option);
                    }
                }
            }
        },
        resourceOptionsHTML : function(selected) {
            var resource_options = "";
    
            for(r in Lib.ResourceTypes) {
                if(Lib.ResourceTypes.hasOwnProperty(r)) {
                    resource = Lib.ResourceTypes[r];
                    if(Lang.isArray(resource)) {
                        resource_options += [
                            '<optgroup label="', r.titleCaps(), '">'
                        ].join('');
                        
                        for(x=0; x < resource.length; x++) {
                            name = resource[x];
                            resource_options += [
                                '<option value="', name, '"'
                            ].join('');
                            
                            if ( selected && name == selected ) {
                                resource_options += ' selected="selected"';
                            }
                            
                            resource_options += [
                            '>', name.titleCaps(), '</option>'
                        ].join('');
                        }
                        resource_options += '</optgroup>';
                    }
                    else if(resource) {
                        resource_options += [
                            '<option value="', r, '"'
                        ].join('');
                        
                        if ( selected && r == selected ) {
                            resource_options += ' selected="selected"';
                        }
                        
                        resource_options += [
                            '>', r.titleCaps(), '</option>'
                        ].join('');
                    }
                }
            }
            
            return resource_options;
        },
        viewSupplyChainInfo : function(e) {
            Dom.setStyle("supplyChainList", "display", "none");
            Dom.setStyle("supplyChainListNone", "display", "none");
            
            if ( !this.supply_chains ) {
                Lacuna.Pulser.Show();
                this.service.view_supply_chains({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.viewSupplyChainList.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        this.max_supply_chains = o.result.max_supply_chains;
                        this.supply_chains = o.result.supply_chains;
                        
                        this.SupplyChainMaxCount();
                        this.SupplyChainList();
                    },
                    scope:this
                });
            }
            else {
                this.supplyChainMaxCount();
                this.SupplyChainList();
            }
        },
        SupplyChainMaxCount : function() {
            var max_container = Dom.get("supplyChainMaxCount");
            
            max_container.innerHTML = [
                "<b>Total of",
                this.supply_chains.length,
                "supply chains in use. This ministry can control a maximum of",
                this.max_supply_chains,
                "supply chains.</b>"
            ].join( " ");
        },
        SupplyChainList : function() {
          var supply_chains = this.supply_chains;
          
          if ( supply_chains.length == 0 ) {
            Dom.setStyle("supplyChainList", "display", "none");
            Dom.setStyle("supplyChainListNone", "display", "");
            return;
          }
          else {
            Dom.setStyle("supplyChainList", "display", "");
            Dom.setStyle("supplyChainListNone", "display", "none");
          }
          
          var metric = Dom.get("supplyChainMetric"),
              details = Dom.get("supplyChainListDetails"),
              detailsParent = details.parentNode,
              ul = document.createElement("ul"),
              li = document.createElement("li"),
              supply_chains = this.supply_chains;
          
          // chains metric text
          metric.innerHTML =
            this.SupplyMetricDescription( supply_chains[0].percent_transferred );
          
          // chains list
          Event.purgeElement(details, true); //clear any events before we remove
          details = detailsParent.removeChild(details); //remove from DOM to make this faster
          details.innerHTML = "";
          
          //Dom.setStyle(detailsParent, "display", "");
          detailsParent.appendChild(details); //add back as child
          
          for (var i=0; i<supply_chains.length; i++) {
            var chain = supply_chains[i],
                nUl = ul.cloneNode(false);
            
            Dom.addClass(nUl, "supplyChainInfo");
            Dom.addClass(nUl, "clearafter");
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "supplyChainBody");
            if (chain.stalled == 1) {
                Dom.addClass(nUl, "supplyChainStalled");
                nLi.innerHTML = chain.body.name + " (Stalled)";
            }
            else {
                nLi.innerHTML = chain.body.name;
            }
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "supplyChainResource");
            nSel = document.createElement("select");
            this.addResourceOptions(nSel, chain.resource_type);
            nLi.appendChild(nSel);
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi, "supplyChainHour");
            nText = document.createElement("input");
            nText.type = "text";
            nText.size = 10;
            nText.value = chain.resource_hour;
            nLi.appendChild(nText);
            nUl.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            Dom.addClass(nLi,"supplyChainAction");
            var editBtn = document.createElement("button");
            editBtn.setAttribute("type", "button");
            editBtn.innerHTML = "Update Chain";
            nLi.appendChild(editBtn);
            var delBtn = document.createElement("button");
            delBtn.setAttribute("type", "button");
            delBtn.innerHTML = "Delete Chain";
            nLi.appendChild(delBtn);
            nUl.appendChild(nLi);
            
            Event.on(editBtn, "click", this.SupplyChainUpdate, {Self:this,Chain:chain,Type:nSel,Hour:nText,Line:nUl}, true);
            Event.on(delBtn, "click", this.SupplyChainRemove, {Self:this,Chain:chain,Line:nUl}, true);
            
            details.appendChild(nUl);
          }
          
          //wait for tab to display first
          setTimeout(function() {
            var Ht = Game.GetSize().h - 250;
            if(Ht > 250) { Ht = 250; }
            Dom.setStyle(detailsParent,"height",Ht + "px");
            Dom.setStyle(detailsParent,"overflow-y","auto");
          },10);
        },
        SupplyMetricDescription : function(percent_transferred) {
            var output = ['Current supply capacity is ', percent_transferred, '&#37;. '];
            if(percent_transferred == 0) {
                output.push('You have no ships servicing your supply chains.');
            }
            else if(percent_transferred > 100) {
                output.push('You have excess ships servicing your supply chains. You can increase your chain hourly rate, or you may be able to remove some ships to get closer to 100&#37;.');
            }
            else if(percent_transferred < 100) {
                output.push('You have insufficient ships servicing your supply chains. You should reduce your chain hourly rate or add more supply ships.');
            }
            else if(percent_transferred == 100) {
                output.push('Your shipping capacity and supply chains requirements are exactly in sync.');
            }
            return output.join('');
        },
        SupplyChainAddNew : function() {
            var target_id = Lib.getSelectedOptionValue("supplyChainAddTargetId"),
                resource_type = Lib.getSelectedOptionValue("supplyChainAddResourceType"),
                resource_hour = Dom.get("supplyChainAddResourceHour").value;
            
            Lacuna.Pulser.Show();
            this.Self.service.create_supply_chain({
                session_id: Game.GetSession(),
                building_id: this.Self.building.id,
                target_id: target_id,
                resource_type: resource_type,
                resource_hour: resource_hour
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.SupplyChainAddNew.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    
                    delete this.Self.supply_chains;
                    this.Self.viewSupplyChainInfo();
                },
                scope:this
            });
        },
        SupplyChainUpdate : function() {
            Lacuna.Pulser.Show();
            this.Self.service.update_supply_chain({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                supply_chain_id:this.Chain.id,
                resource_type: Lib.getSelectedOptionValueFromSelectElement(this.Type),
                resource_hour:this.Hour.value
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.SupplyChainUpdate.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    
                    delete this.Self.supply_chains;
                    this.Self.viewSupplyChainInfo();
                },
                scope:this
            });
        },
        SupplyChainRemove : function() {
            var chain = this.Chain;
            
            if (!confirm(['Are you sure you want to delete the supply chain of', chain.resource_hour, chain.resource_type.titleCaps(), 'to', chain.body.name].join(' ')))
                return;
            
            Lacuna.Pulser.Show();
            this.Self.service.delete_supply_chain({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                supply_chain_id:this.Chain.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.SupplyChainRemove.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    
                    delete this.Self.supply_chains;
                    this.Self.viewSupplyChainInfo();
                },
                scope:this
            });
        },
        viewSupplyShips : function(e) {
            // we have 2 asynchronous functions below both wanting to hide
            // the pulsar - keep a count of requests so it only gets hidden
            // once they've both completed
            var request_count = 0;
            
            if ( !this.supply_chains ) {
                Lacuna.Pulser.Show();
                request_count++;
                
                this.service.view_supply_chains({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.viewSupplyChainList.success");
                        request_count--;
                        if ( request_count == 0 ) {
                            Lacuna.Pulser.Hide();
                        }
                        this.rpcSuccess(o);
                        this.supply_chains = o.result.supply_chains;
                        
                        this.SupplyChainShipsInfo();
                    },
                    scope:this
                });
            }
            else {
                this.SupplyChainShipsInfo();
            }
            
            if ( !this.supply_chain_ships ) {
                Lacuna.Pulser.Show();
                request_count++;
                
                this.service.get_supply_ships({session_id:Game.GetSession(),building_id:this.building.id}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.viewSupplyShipsInfo.success");
                        request_count--;
                        if ( request_count == 0 ) {
                            Lacuna.Pulser.Hide();
                        }
                        this.rpcSuccess(o);
                        this.supply_chain_ships = o.result.ships;
                        
                        this.SupplyChainShipsPopulate();
                    },
                    scope:this
                });
            }
            else {
                this.SupplyChainShipsPopulate();
            }
        },
        SupplyChainShipsInfo : function() {
            var metric = Dom.get("supplyChainShipsInfo");
            
            metric.innerHTML =
                this.SupplyMetricDescription( this.supply_chains[0].percent_transferred );
        },
        SupplyChainShipsPopulate : function() {
            var ships = this.supply_chain_ships,
                no_ships = Dom.get("supplyChainShipsNone"),
                details = Dom.get("supplyChainShipsDetails"),
                detailsParent = details.parentNode;
            
            if ( ships.length == 0 ) {
                Dom.setStyle(details, "display", "none");
                Dom.setStyle(no_ships, "display", "");
                return;
            }
            else {
                Dom.setStyle(details, "display", "");
                Dom.setStyle(no_ships, "display", "none");
            }
            
            Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            Dom.setStyle(detailsParent, "display", "");
            detailsParent.appendChild(details); //add back as child
            
            if(details) {
                var ul = document.createElement("ul"),
                    li = document.createElement("li"),
                    availShips = [],
                    workingShips = [];
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    if(ship.task == "Docked") {
                        availShips.push(ship);
                    }
                    else {
                        workingShips.push(ship);
                    }
                        
                    nUl.Ship = ship;
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = ship.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = ship.task;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipSpeed");
                    nLi.innerHTML = ship.speed;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipHold");
                    nLi.innerHTML = ship.hold_size;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = ship.task == "Docked" ? "Add to Chain" : "Remove from Chain";
                    bbtn = nLi.appendChild(bbtn);
                    nUl.appendChild(nLi);
                    
                    if(ship.task == "Docked") {
                        Event.on(bbtn, "click", this.SupplyChainShipAdd, {Self:this,Ship:ship,Line:nUl}, true);
                    }
                    else {
                        Event.on(bbtn, "click", this.SupplyChainShipRemove, {Self:this,Ship:ship,Line:nUl}, true);
                    }
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 175;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        SupplyChainShipAdd : function() {
            Lacuna.Pulser.Show();
            
            this.Self.service.add_supply_ship_to_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.SupplyChainShipAdd.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    var ships = this.Self.supply_chain_ships;
                    for(var i=0; i<ships.length; i++) {
                        if(ships[i].id == this.Ship.id) {
                            ships.splice(i,1);
                            break;
                        }
                    }
                    
                    delete this.Self.supply_chains;
                    this.Self.viewSupplyShips();
                },
                scope:this
            });
        },
        SupplyChainShipRemove : function() {
            Lacuna.Pulser.Show();
            
            this.Self.service.remove_supply_ship_from_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.SupplyChainShipRemove.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    var ships = this.Self.supply_chain_ships;
                    for(var i=0; i<ships.length; i++) {
                        if(ships[i].id == this.Ship.id) {
                            ships.splice(i,1);
                            break;
                        }
                    }
                    
                    delete this.Self.supply_chains;
                    this.Self.viewSupplyShips();
                },
                scope:this
            });
        },
        viewWasteChainInfo : function(e) {
            if(e.newValue) {
                this.WasteChainDetails();
                
                if(!this.waste_chain_ships) {
                    this.WasteChainShipsView();
                }
                else {
                    this.WasteChainShipsPopulate();
                }
            }
        },
        WasteChainDetails : function() {
            Lacuna.Pulser.Show();
            this.service.view_waste_chains({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.WasteChainDetails.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.waste_chain = o.result.waste_chain[0];
                    
                    this.WasteChainDetailsPopulate();
                },
                scope:this
            });
        },
        WasteChainDetailsPopulate : function() {
            var waste_chain = this.waste_chain,
                details = Dom.get("wasteChainDetails");
            
            if (details) {
                var show_equalize_button;
                
                if ( Game.GetCurrentPlanet().waste_hour > 0
                    && this.waste_chain.percent_transferred >= 100 )
                {
                    show_equalize_button = 1;
                }
                
                details.innerHTML = [
                    '<b>Local Star Waste Chain</b><br/>',
                    'Waste/hr: ',
                    '<input id="chainWasteHourInput" type="text" value="', waste_chain.waste_hour, '"/> ',
                    '<button id="chainWasteHourButton">Update</button>',
                    show_equalize_button
                      ? '<button id="chainWasteEqualizeButton">Equalize Body Waste Production</button><br/>'
                      : '<br/>',
                    'Percent Transferred: ', waste_chain.percent_transferred, '&#37;',
                    '<hr>'
                ].join('');
                
                Event.on("chainWasteHourButton", "click", this.WasteChainUpdateWasteHour, {Self:this}, true);
                Event.on("chainWasteEqualizeButton", "click", this.WasteChainEqualize, {Self:this}, true);
            }
        },
        WasteChainUpdateWasteHour : function() {
            var waste_chain_id = this.Self.waste_chain.id,
                waste_hour = Dom.get("chainWasteHourInput").value;
            
            Lacuna.Pulser.Show();
            this.Self.service.update_waste_chain({
                session_id: Game.GetSession(),
                building_id: this.Self.building.id,
                waste_chain_id: waste_chain_id,
                waste_hour: waste_hour
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.WasteChainUpdateWasteHour.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    
                    this.Self.WasteChainDetails();
                },
                scope:this
            });
        },
        WasteChainEqualize : function() {
            var waste_chain_id = this.Self.waste_chain.id,
                waste_hour = Dom.get("chainWasteHourInput").value,
                body_waste_hour = Game.GetCurrentPlanet().waste_hour;
            
            if ( body_waste_hour <= 0 )
                return;
            
            waste_hour = parseInt(waste_hour) + parseInt(body_waste_hour);
            
            Dom.get("chainWasteHourInput").value = waste_hour;
        },
        WasteChainShipsView : function() {
            Lacuna.Pulser.Show();
            this.service.get_waste_ships({session_id:Game.GetSession(),building_id:this.building.id}, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.WasteChainShipsView.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    this.waste_chain_ships = o.result.ships;
                    
                    this.WasteChainShipsPopulate();
                },
                scope:this
            });
        },
        WasteChainShipsPopulate : function() {
            var ships = this.waste_chain_ships,
                no_ships = Dom.get("wasteChainShipsNone"),
                details = Dom.get("wasteChainShipsDetails");
            
            if ( ships.length == 0 ) {
                Dom.setStyle(details, "display", "none");
                Dom.setStyle(no_ships, "display", "");
                return;
            }
            else {
                Dom.setStyle(details, "display", "");
                Dom.setStyle(no_ships, "display", "none");
            }
            
            if(details) {
                var ul = document.createElement("ul"),
                    li = document.createElement("li"),
                    availShips = [],
                    workingShips = [];
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    if(ship.task == "Docked") {
                        availShips.push(ship);
                    }
                    else {
                        workingShips.push(ship);
                    }
                        
                    nUl.Ship = ship;
                    Dom.addClass(nUl, "shipInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipName");
                    nLi.innerHTML = ship.name;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipTask");
                    nLi.innerHTML = ship.task;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipSpeed");
                    nLi.innerHTML = ship.speed;
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipHold");
                    nLi.innerHTML = ship.hold_size;
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"shipAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = ship.task == "Docked" ? "Add to Chain" : "Remove from Chain";
                    bbtn = nLi.appendChild(bbtn);
                    nUl.appendChild(nLi);
                    
                    if(ship.task == "Docked") {
                        Event.on(bbtn, "click", this.WasteChainShipAdd, {Self:this,Ship:ship,Line:nUl}, true);
                    }
                    else {
                        Event.on(bbtn, "click", this.WasteChainShipRemove, {Self:this,Ship:ship,Line:nUl}, true);
                    }
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 175;
                    if(Ht > 300) { Ht = 300; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        WasteChainShipAdd : function() {
            Lacuna.Pulser.Show();
            
            this.Self.service.add_waste_ship_to_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.WasteChainShipAdd.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    var ships = this.Self.waste_chain_ships;
                    for(var i=0; i<ships.length; i++) {
                        if(ships[i].id == this.Ship.id) {
                            ships.splice(i,1);
                            break;
                        }
                    }
                    this.Line.parentNode.removeChild(this.Line);
                    
                    this.Self.WasteChainDetails();
                },
                scope:this
            });
        },
        WasteChainShipRemove : function() {
            Lacuna.Pulser.Show();
            
            this.Self.service.remove_waste_ship_from_fleet({
                session_id:Game.GetSession(),
                building_id:this.Self.building.id,
                ship_id:this.Ship.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.WasteChainShipRemove.success");
                    Lacuna.Pulser.Hide();
                    this.Self.rpcSuccess(o);
                    var ships = this.Self.waste_chain_ships;
                    for(var i=0; i<ships.length; i++) {
                        if(ships[i].id == this.Ship.id) {
                            ships.splice(i,1);
                            break;
                        }
                    }
                    this.Line.parentNode.removeChild(this.Line);
                    
                    this.Self.WasteChainDetails();
                },
                scope:this
            });
        }
    
    });
    
    Lacuna.buildings.Trade = Trade;

})();
YAHOO.register("trade", YAHOO.lacuna.buildings.Trade, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/tradeMinistry.js","/building")
},{"buffer":71,"oMfpAn":75}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.Transporter == "undefined" || !YAHOO.lacuna.buildings.Transporter) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Pager = YAHOO.widget.Paginator,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Transporter = function(result){
        Transporter.superclass.constructor.call(this, result);

        this.transport = result.transport;
        this.service = Game.Services.Buildings.Transporter;
        
        this.availableAcceptText = "Accept For 1 Essentia";
        this.addTradeText = "Add Trade For 1 Essentia";
        this.pushTradeText = "Send For 2 Essentia";
        
        
        // defaults.  Values are updated to server numbers during get_* calls
        this.shipSize = 50000;
        this.planSize = 10000;
        this.spySize = 350;
        this.glyphSize = 100;
        
        this.createEvent("onLoadResources");
        this.createEvent("onLoadGlyphs");
        this.createEvent("onLoadPlans");
        this.createEvent("onLoadShips");
        this.createEvent("onLoadPrisoners");
        
        if(this.building.level > 0) {
            var p = document.createElement("p");
            p.innerHTML = "Transporter has a maximum capacity of " + this.transport.max + " at this level.";
            Dom.setStyle(p, "margin-top", "5px");
            Dom.setStyle(p, "font-style", "italic");
            Dom.get("buildingDetailsDesc").appendChild(p);
        
            this.subscribe("onLoad", function() {
                this.getStoredResources();
                this.mine.subscribe("activeChange", this.getMine, this, true);
                this.avail.subscribe("activeChange", this.getAvailable, this, true);
                this.push.subscribe("activeChange", function(e) {
                    if(e.newValue) {
                        if(!this.tradePushSubbed) {
                            Event.on("tradePushResources", "click", function(){
                                if(Dom.getStyle("tradePushResourceName", "display") == "none") {
                                    Dom.setStyle("tradePushResourceName", "display", "block");
                                    this.getStoredResources();
                                }
                                else {
                                    Dom.setStyle("tradePushResourceName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushGlyphs", "click", function(){
                                if(Dom.getStyle("tradePushGlyphName", "display") == "none") {
                                    Dom.setStyle("tradePushGlyphName", "display", "block");
                                    this.getGlyphs();
                                }
                                else {
                                    Dom.setStyle("tradePushGlyphName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushPlans", "click", function(){
                                if(Dom.getStyle("tradePushPlanName", "display") == "none") {
                                    Dom.setStyle("tradePushPlanName", "display", "block");
                                    this.getPlans();
                                }
                                else {
                                    Dom.setStyle("tradePushPlanName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushShips", "click", function(){
                                if(Dom.getStyle("tradePushShipName", "display") == "none") {
                                    Dom.setStyle("tradePushShipName", "display", "block");
                                    this.getShips();
                                }
                                else {
                                    Dom.setStyle("tradePushShipName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradePushPrisoners", "click", function(){
                                if(Dom.getStyle("tradePushPrisonerName", "display") == "none") {
                                    Dom.setStyle("tradePushPrisonerName", "display", "block");
                                    this.getPrisoners();
                                }
                                else {
                                    Dom.setStyle("tradePushPrisonerName", "display", "none");
                                }
                            }, this, true);
                        }
                        
                        this.tradePushSubbed = 1;
                    }
                },this,true);
                this.add.subscribe("activeChange", function(e) {
                    if(e.newValue) {
                        if(!this.tradeAddSubbed) {
                            Event.on("tradeAddResources", "click", function(){
                                if(Dom.getStyle("tradeAddResourceName", "display") == "none") {
                                    Dom.setStyle("tradeAddResourceName", "display", "block");
                                    this.getStoredResources();
                                }
                                else {
                                    Dom.setStyle("tradeAddResourceName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddGlyphs", "click", function(){
                                if(Dom.getStyle("tradeAddGlyphName", "display") == "none") {
                                    Dom.setStyle("tradeAddGlyphName", "display", "block");
                                    this.getGlyphs();
                                }
                                else {
                                    Dom.setStyle("tradeAddGlyphName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddPlans", "click", function(){
                                if(Dom.getStyle("tradeAddPlanName", "display") == "none") {
                                    Dom.setStyle("tradeAddPlanName", "display", "block");
                                    this.getPlans();
                                }
                                else {
                                    Dom.setStyle("tradeAddPlanName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddShips", "click", function(){
                                if(Dom.getStyle("tradeAddShipName", "display") == "none") {
                                    Dom.setStyle("tradeAddShipName", "display", "block");
                                    this.getShips();
                                }
                                else {
                                    Dom.setStyle("tradeAddShipName", "display", "none");
                                }
                            }, this, true);
                            Event.on("tradeAddPrisoners", "click", function(){
                                if(Dom.getStyle("tradeAddPrisonerName", "display") == "none") {
                                    Dom.setStyle("tradeAddPrisonerName", "display", "block");
                                    this.getPrisoners();
                                }
                                else {
                                    Dom.setStyle("tradeAddPrisonerName", "display", "none");
                                }
                            }, this, true);
                        }
                        
                        this.tradeAddSubbed = 1;
                    }
                },this,true);
            }, this, true);
        }
    };
    
    Lang.extend(Transporter, Lacuna.buildings.Building, {
        destroy : function() {
            if(this.availablePager) {
                this.availablePager.destroy();
            }
            if(this.minePage) {
                this.minePage.destroy();
            }
            Transporter.superclass.destroy.call(this);
        },
        getChildTabs : function() {
            this.mineTabIndex = 4; //array location plus 1 since Production tab is always first
            return [this._getOneForOneTab(),this._getPushTab(), this._getAvailTab(), this._getMineTab(), this._getAddTab()];
        },
        _getOneForOneTab : function() {
            this.oneForOne = new YAHOO.widget.Tab({ label: "One For One", content: ['<div class="transporterOneForOne">',
                '<div>You may trade one-for-one with Lacuna Corp for 3<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia smallImg" /> per transaction.</div>',
                '<ul>',
                '    <li><label>Want:</label><select id="transporterOneForOneWant"></select></li>',
                '    <li><label>Have:</label><select id="transporterOneForOneHave"></select></li>',
                '    <li><label>Quantity:</label><input type="text" id="transporterOneForOneQuantity" /></li>',
                '    <li id="transporterOneForOneMessage" class="alert"></li>',
                '    <li><button id="transporterOneForOneTrade">Submit Trade for 3 Essentia</button></li>',
                '</ul>',
            '</div>'].join('')});
            
            this.subscribe("onLoadResources", this.populateOneForOneHave, this, true);
            
            Event.onAvailable("transporterOneForOneWant", function(e){
                var elm = Dom.get("transporterOneForOneWant"),
                    opt = document.createElement("option"),
                    nOpt, optGroup;
                for(var r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        var resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            optGroup = document.createElement("optgroup");
                            optGroup.label = r.titleCaps();
                            
                            for(var x=0; x < resource.length; x++) {
                                nOpt = opt.cloneNode(false);
                                nOpt.value = resource[x];
                                nOpt.innerHTML = resource[x].titleCaps();
                                optGroup.appendChild(nOpt);
                            }
                            
                            elm.appendChild(optGroup);
                        }
                        else if(resource) {
                            nOpt = opt.cloneNode(false);
                            nOpt.value = r;
                            nOpt.innerHTML = r.titleCaps();
                            elm.appendChild(nOpt);
                        }
                    }
                }
            }, this, true);
            Event.on("transporterOneForOneTrade", "click", this.Trade, this, true);
            
            return this.oneForOne;
        },
        _getPushTab : function() {
            this.push = new YAHOO.widget.Tab({ label: "Push", content: [
            '<div id="pHt"><div class="tradeStash yui-g">',
            '    <div class="yui-u first">',
            '        <legend>On Planet</legend>',
            '        <div class="tradeContainers">',
            '            <div><div id="tradePushResources" class="accordian">Resources</div><ul id="tradePushResourceName"></ul></div>',
            '            <div><div id="tradePushGlyphs" class="accordian">Glyphs</div><ul id="tradePushGlyphName" style="display:none;"></ul></div>',
            '            <div><div id="tradePushPlans" class="accordian">Plans</div><ul id="tradePushPlanName" style="display:none;"></ul></div>',
            '            <div><div id="tradePushShips" class="accordian">Ships</div><ul id="tradePushShipName" style="display:none;"></ul></div>',
            '            <div><div id="tradePushPrisoners" class="accordian">Prisoners</div><ul id="tradePushPrisonerName" style="display:none;"></ul></div>',
            '        </div>',
            '    </div>',
            '    <div class="yui-u">',
            '        <legend>To Push</legend>',
            '        <div class="tradeContainers"><ul id="tradePushItems"></ul></div>',
            '    </div>',
            '</div>',
            '<ul style="margin-top:5px;">',
            '    <li style=""><label>Total Cargo:</label><span id="tradePushCargo">0</span></li>',
            '    <li style="margin-bottom:5px;"><label>To Colony:</label><select id="tradePushColony"><option value="" selected></option></select></li>',
            '    <li id="tradePushMessage" class="alert"></li>',
            '</ul></div><button id="tradePushSend">',this.pushTradeText,'</button>'].join('')});

            this.subscribe("onLoadResources", this.populatePushResourceName, this, true);
            this.subscribe("onLoadGlyphs", this.populatePushGlyphName, this, true);
            this.subscribe("onLoadPlans", this.populatePushPlanName, this, true);
            this.subscribe("onLoadShips", this.populatePushShipName, this, true);
            this.subscribe("onLoadPrisoners", this.populatePushPrisonerName, this, true);
            
            Event.onAvailable("tradePushColony", function(){
                var opt = document.createElement("option"),
                    planets = Lib.planetarySort(Game.EmpireData.planets),
                    cp = Game.GetCurrentPlanet(),
                    nOpt;

                for(var p=0; p<planets.length; p++) {
                    if(planets[p].id != cp.id){
                        nOpt = opt.cloneNode(false);
                        nOpt.value = planets[p].id;
                        nOpt.innerHTML = planets[p].name;
                        this.appendChild(nOpt);
                    }
                }
            });
            
            Event.delegate("tradePushResourceName", "click", this.PushAddResource, "button", this, true);
            Event.delegate("tradePushGlyphName", "click", this.PushAddGlyph, "button", this, true);
            Event.delegate("tradePushPlanName", "click", this.PushAddPlan, "button", this, true);
            Event.delegate("tradePushShipName", "click", this.PushAddShip, "button", this, true);
            Event.delegate("tradePushPrisonerName", "click", this.PushAddPrisoner, "button", this, true);
            
            Event.delegate("tradePushItems", "click", this.PushRemove, "button", this, true);
            
            Event.on("tradePushSend", "click", this.Push, this, true);
            
            return this.push;
        },
        _getAvailTab : function() {
            this.avail = new YAHOO.widget.Tab({ label: "Available Trades", content: [
                '<div>',
                '    <div style="border-bottom: 1px solid #52ACFF; padding-bottom: 5px; margin-bottom: 5px;"><label>Filter:</label><select id="tradeFilter"><option value="">All</option><option value="energy">Energy</option><option value="food">Food</option><option value="ore">Ore</option>',
                '    <option value="water">Water</option><option value="waste">Waste</option><option value="glyph">Glyph</option><option value="prisoner">Prisoner</option>',
                '    <option value="ship">Ship</option><option value="plan">Plan</option></select></div>',
                '    <ul class="tradeHeader tradeInfo clearafter">',
                '        <li class="tradeEmpire">Empire</li>',
                '        <li class="tradeOfferedDate">Offered Date</li>',
                '        <li class="tradeAsking">Cost</li>',
                '        <li class="tradeOffer">Offering</li>',
                '        <li class="tradeAction"></li>',
                '        <li class="tradeAction"></li>',
                '    </ul>',
                '    <div><div id="tradeAvailableDetails"></div></div>',
                '    <div id="tradeAvailablePaginator"></div>',
                '</div>'].join('')});
                
            Event.on("tradeFilter", "change", function(e) { this.getAvailable({newValue:true}); }, this, true);
            
            return this.avail;
        },
        _getMineTab : function() {
            this.mine = new YAHOO.widget.Tab({ label: "My Trades", content: ['<div class="myTrades">',
                '    <ul class="tradeHeader tradeInfo clearafter">',
                '        <li class="tradeOfferedDate">Offered Date</li>',
                '        <li class="tradeAsking">Cost</li>',
                '        <li class="tradeOffer">Offering</li>',
                '        <li class="tradeAction"></li>',
                '    </ul>',
                '    <div><div id="tradeMineDetails"></div></div>',
                '    <div id="tradeMinePaginator"></div>',
                '</div>'].join('')});
            
            return this.mine;
        },
        _getAddTab : function() {
            this.add = new YAHOO.widget.Tab({ label: "Add Trade", content: [
            '<div id="aHt"><div class="tradeStash yui-g">',
            '    <div class="yui-u first">',
            '        <legend>On Planet</legend>',
            '        <div class="tradeContainers">',
            '            <div><div id="tradeAddResources" class="accordian">Resources</div><ul id="tradeAddResourceName"></ul></div>',
            '            <div><div id="tradeAddGlyphs" class="accordian">Glyphs</div><ul id="tradeAddGlyphName" style="display:none;"></ul></div>',
            '            <div><div id="tradeAddPlans" class="accordian">Plans</div><ul id="tradeAddPlanName" style="display:none;"></ul></div>',
            '            <div><div id="tradeAddShips" class="accordian">Ships</div><ul id="tradeAddShipName" style="display:none;"></ul></div>',
            '            <div><div id="tradeAddPrisoners" class="accordian">Prisoners</div><ul id="tradeAddPrisonerName" style="display:none;"></ul></div>',
            '        </div>',
            '    </div>',
            '    <div class="yui-u">',
            '        <legend>To Offer</legend>',
            '        <div class="tradeContainers"><ul id="tradeAddItems"></ul></div>',
            '    </div>',
            '</div>',
            '<ul style="margin-top:5px;">',
            '    <li style=""><label>Total Cargo:</label><span id="tradeAddCargo">0</span></li>',
            '    <li style="margin: 5px 0;"><label style="font-weight:bold">Asking Essentia:</label><input type="text" id="tradeAddAskingQuantity" /></li>',
            '    <li id="tradeAddMessage" class="alert"></li>',
            '</ul></div><button id="tradeAdd">',this.addTradeText,'</button>'].join('')});
            
            this.subscribe("onLoadResources", this.populateAddResourceName, this, true);
            this.subscribe("onLoadGlyphs", this.populateAddGlyphName, this, true);
            this.subscribe("onLoadPlans", this.populateAddPlanName, this, true);
            this.subscribe("onLoadPrisoners", this.populateAddPrisonerName, this, true);
            this.subscribe("onLoadShips", this.populateAddShipName, this, true);
            
            Event.delegate("tradeAddResourceName", "click", this.AddResource, "button", this, true);
            Event.delegate("tradeAddGlyphName", "click", this.AddGlyph, "button", this, true);
            Event.delegate("tradeAddPlanName", "click", this.AddPlan, "button", this, true);
            Event.delegate("tradeAddShipName", "click", this.AddShip, "button", this, true);
            Event.delegate("tradeAddPrisonerName", "click", this.AddPrisoner, "button", this, true);
            
            Event.delegate("tradeAddItems", "click", this.AddRemove, "button", this, true);
            
            Event.on("tradeAdd", "click", this.AddTrade, this, true);
            return this.add;
        },
        
        populateOneForOneHave : function() {
            var elm = Dom.get("transporterOneForOneHave"),
                opt = document.createElement("option"),
                nOpt, optGroup;
                
            if(elm) {
                elm.innerHTML = '';
                for(var r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        var resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            optGroup = document.createElement("optgroup");
                            optGroup.label = r.titleCaps();
                            
                            for(var x=0; x < resource.length; x++) {
                                var name = resource[x];
                                if(this.resources[name]) {
                                    nOpt = opt.cloneNode(false);
                                    nOpt.value = name;
                                    nOpt.innerHTML = [name.titleCaps(), ' (', this.resources[name], ')'].join('');
                                    optGroup.appendChild(nOpt);
                                }
                            }
                            
                            elm.appendChild(optGroup);
                        }
                        else if(this.resources[r] && resource) {
                            nOpt = opt.cloneNode(false);
                            nOpt.value = r;
                            nOpt.innerHTML = [r.titleCaps(), ' (', this.resources[r], ')'].join('');
                            elm.appendChild(nOpt);
                        }
                    }
                }
            }
        },
        Trade : function() {
            var data = {
                session_id: Game.GetSession(""),
                building_id: this.building.id,
                have: Lib.getSelectedOptionValue(Dom.get("transporterOneForOneHave")),
                want: Lib.getSelectedOptionValue(Dom.get("transporterOneForOneWant")),
                quantity: Dom.get("transporterOneForOneQuantity").value*1
            };
            
            if(data.quantity > this.transport.max) {
                Dom.get("transporterOneForOneMessage").innerHTML = ["Quantity must be less than ", this.transport.max, ", which is the maximum for this level transporter."].join('');
                Lib.fadeOutElm("transporterOneForOneMessage");
            }
            else if(data.quantity < 0 || data.quantity > this.resources[data.have]*1) {
                Dom.get("transporterOneForOneMessage").innerHTML = "Quantity must be greater than 0 and less than or equal to the resources you have on hand.";
                Lib.fadeOutElm("transporterOneForOneMessage");
            }
            else {
                this.service.trade_one_for_one(data, {
                    success : function(o){
                        YAHOO.log(o, "info", "Transporter.Trade.success");
                        this.rpcSuccess(o);
                        Dom.get("transporterOneForOneHave").selectedIndex = -1;
                        Dom.get("transporterOneForOneWant").selectedIndex = -1;
                        Dom.get("transporterOneForOneQuantity").value = "";
                        this.getStoredResources(true);
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
    
        getGlyphs : function(force) {
            if(force || !this.glyphs) {
                Lacuna.Pulser.Show();
                this.service.get_glyph_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.glyphs = o.result.glyphs;
                        this.glyphSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadGlyphs");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getPlans : function(force) {
            if(force || !this.plans) {
                Lacuna.Pulser.Show();
                this.service.get_plan_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.plans = o.result.plans;
                        this.planSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadPlans");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getPrisoners : function(force) {
            if(force || !this.prisoners) {
                Lacuna.Pulser.Show();
                this.service.get_prisoners({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.prisoners = o.result.prisoners;
                        this.spySize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadPrisoners");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getShips : function(force) {
            if(force || !this.ships) {
                Lacuna.Pulser.Show();
                this.service.get_ship_summary({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.ships = o.result.ships;
                        this.shipSize = o.result.cargo_space_used_each;
                        this.fireEvent("onLoadShips");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        getStoredResources : function(force) {
            if(force || !this.resources) {
                Lacuna.Pulser.Show();
                this.service.get_stored_resources({
                        session_id: Game.GetSession(""),
                        building_id: this.building.id
                    },{
                    success : function(o){
                        this.rpcSuccess(o);
                        this.resources = o.result.resources;
                        this.fireEvent("onLoadResources");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        
        getAvailable : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:1},
                    selVal = Lib.getSelectedOptionValue("tradeFilter");
                if(selVal) {
                    data.filter = selVal;
                }
                this.service.view_market(data, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.view_available_trades.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.availableTrades = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                        
                        this.availablePager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeAvailablePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.availablePager.subscribe('changeRequest',this.AvailableHandlePagination, this, true);
                        this.availablePager.render();
                        
                        this.AvailablePopulate();
                    },
                    scope:this
                });
            }
        },
        AvailablePopulate : function() {
            var details = Dom.get("tradeAvailableDetails");
            
            if(details) {
                var trades = this.availableTrades.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        bbtn,
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Trade = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeEmpire");
                    nLi.innerHTML = trade.empire.name;
                    Event.on(nLi, "click", this.EmpireProfile, trade.empire);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatServerDateTimeShort(trade.date_offered);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = this.availableAcceptText;
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableAccept, {Self:this,Trade:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    Dom.addClass(bbtn, "reportAbuse");
                    bbtn.innerHTML = "Spam";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.AvailableReport, {Self:this,Trade:trade,Line:nUl}, true);
                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 240;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        AvailableHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            var data = {session_id:Game.GetSession(),building_id:this.building.id,page_number:newState.page},
                selVal = Lib.getSelectedOptionValue("tradeFilter");
            if(selVal) {
                data.filter = selVal;
            }
            this.service.view_market(data, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.view_available_trades.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.availableTrades = o.result; //store: trades=[], trade_count = 1, page_number=1,  captcha = {guid, url}
                    
                    this.AvailablePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.availablePager.setState(newState);
        },
        AvailableAccept : function() {
            Lacuna.Pulser.Show();
            this.Self.service.accept_from_market({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.Trade.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.accept_trade.success");
                    this.Self.rpcSuccess(o);
                    //force get the new availabe list after accepting so we get a new captcha
                    this.Self.getAvailable({newValue:true});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        AvailableReport : function() {
            Lacuna.Pulser.Show();
            this.Self.service.report_abuse({
                session_id:Game.GetSession(""),
                building_id:this.Self.building.id,
                trade_id:this.Trade.id
            }, {
                success : function(o){
                    var btn = Sel.query(".reportAbuse",this.Line, true);
                    if(btn) {
                        Event.purgeElement(btn);
                        btn.parentNode.removeChild(btn);
                    }
                    this.Self.rpcSuccess(o);
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        EmpireProfile : function(e, empire) {
            Lacuna.Info.Empire.Load(empire.id);
        },
        
        
        //View Mine
        getMine : function(e) {
            if(e.newValue) {
                Lacuna.Pulser.Show();
                this.service.view_my_market({session_id:Game.GetSession(),building_id:this.building.id,page_number:1}, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.view_my_trades.success");
                        Lacuna.Pulser.Hide();
                        this.rpcSuccess(o);
                        
                        delete o.result.status; //get rid of status after we process it, since it's big
                        this.mineTrades = o.result; //store: trades=[], trade_count = 1, page_number=1
                        
                        this.minePage = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.trade_count,
                            containers  : 'tradeMinePaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.minePage.subscribe('changeRequest',this.MineHandlePagination, this, true);
                        this.minePage.render();
                        
                        this.MinePopulate();
                    },
                    scope:this
                });
            }
        },
        MinePopulate : function() {
            var details = Dom.get("tradeMineDetails");
            
            if(details) {
                var trades = this.mineTrades.trades,
                    ul = document.createElement("ul"),
                    li = document.createElement("li");
                    
                Event.purgeElement(details);
                details.innerHTML = "";
                                
                for(var i=0; i<trades.length; i++) {
                    var trade = trades[i],
                        nUl = ul.cloneNode(false),
                        nLi = li.cloneNode(false);
                        
                    nUl.Trade = trade;
                    Dom.addClass(nUl, "tradeInfo");
                    Dom.addClass(nUl, "clearafter");

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOfferedDate");
                    nLi.innerHTML = Lib.formatServerDateTimeShort(trade.date_offered);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAsking");
                    nLi.innerHTML = [trade.ask,'<img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" />'].join('');
                    nUl.appendChild(nLi);
                    
                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeOffer");
                    nLi.innerHTML = Lib.formatInlineList(trade.offer);
                    nUl.appendChild(nLi);

                    nLi = li.cloneNode(false);
                    Dom.addClass(nLi,"tradeAction");
                    var bbtn = document.createElement("button");
                    bbtn.setAttribute("type", "button");
                    bbtn.innerHTML = "Withdraw";
                    bbtn = nLi.appendChild(bbtn);
                    Event.on(bbtn, "click", this.MineWithdraw, {Self:this,Trade:trade,Line:nUl}, true);

                    nUl.appendChild(nLi);
                                
                    details.appendChild(nUl);
                    
                }
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 185;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        MineHandlePagination : function(newState) {
            Lacuna.Pulser.Show();
            this.service.view_my_market({
                session_id:Game.GetSession(),
                building_id:this.building.id,
                page_number:newState.page
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "Trade.view_available_trades.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    delete o.result.status; //get rid of status after we process it, since it's big
                    this.mineTrades = o.result; //store: trades=[], trade_count = 1, page_number=1
                    
                    this.MinePopulate();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.minePage.setState(newState);
        },
        MineWithdraw : function() {
            if(confirm(['Are you sure you want to withdraw the trade asking for ', this.Trade.ask, ' essentia and offering ', this.Trade.offer.join(', '),'?'].join(''))) {
                Lacuna.Pulser.Show();
                this.Self.service.withdraw_from_market({
                    session_id:Game.GetSession(""),
                    building_id:this.Self.building.id,
                    trade_id:this.Trade.id
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "Trade.withdraw_trade.success");
                        this.Self.rpcSuccess(o);
                        var trades = this.Self.mineTrades.trades;
                        for(var i=0; i<trades.length; i++) {
                            if(trades[i].id == this.Trade.id) {
                                trades.splice(i,1);
                                break;
                            }
                        }
                        this.Line.parentNode.removeChild(this.Line);
                        Lacuna.Pulser.Hide();
                        
                        this.Self.getStoredResources(true);
                        this.Self.getPlans(true);
                        this.Self.getGlyphs(true);
                        this.Self.getPrisoners(true);
                        this.Self.getShips(true);
                    },
                    scope:this
                });
            }
        },
        
        //Add trade
        populateAddResourceName : function() {
            var elm = Dom.get("tradeAddResourceName"),
                li = document.createElement("li"), nLi, x, r, name, resource;
                
            if(elm) {
                elm.innerHTML = "";
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(this.resources[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Resource = {type:name,quantity:this.resources[name]*1};
                                    nLi.innerHTML = ['<span class="tradeResourceName">',name.titleCaps(), ' (<label class="quantity">', this.resources[name], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                                    elm.appendChild(nLi);
                                }
                            }
                        }
                        else if(this.resources[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Resource = {type:r,quantity:this.resources[r]*1};
                            nLi.innerHTML = ['<span class="tradeResourceName">',r.titleCaps(), ' (<label class="quantity">', this.resources[r], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                            elm.appendChild(nLi);
                        }
                    }
                }
            }
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 180;
                if(Ht > 300) { Ht = 300; }
                var aHt = Dom.get('aHt');
                Dom.setStyle(aHt,"height",Ht + "px");
                Dom.setStyle(aHt,"overflow-y","auto");
            },10);
        },
        populateAddGlyphName : function() {
            var elm = Dom.get("tradeAddGlyphName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.glyphs.length > 0) {
                    for(var x=0; x < this.glyphs.length; x++) {
                        var obj = this.glyphs[x];
                        nLi = li.cloneNode(false);
                        nLi.Glyph = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">',obj.name.titleCaps(), ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Glyphs Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddPlanName : function() {
            var elm = Dom.get("tradeAddPlanName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.plans.length > 0) {
                    for(var x=0; x < this.plans.length; x++) {
                        var obj = this.plans[x];
                        nLi = li.cloneNode(false);
                        nLi.Plan = obj;
                        if (obj.extra_build_level > 0) {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,'+',obj.extra_build_level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        else {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Plans Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddShipName : function() {
            var elm = Dom.get("tradeAddShipName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.ships.length > 0) {
                    for(var x=0; x < this.ships.length; x++) {
                        var obj = this.ships[x];
                        nLi = li.cloneNode(false);
                        nLi.Ship = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">',
                                         obj.name,' - ',
                                         obj.type.titleCaps('_',' '),
                                         ' - Hold:',obj.hold_size,
                                         ' - Berth:',obj.berth_level,
                                         ' - Speed:',obj.speed,
                                          ' (<label class="quantity">',
                                          obj.quantity,
                                          '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Ships Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populateAddPrisonerName : function() {
            var elm = Dom.get("tradeAddPrisonerName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.prisoners.length > 0) {
                    for(var x=0; x < this.prisoners.length; x++) {
                        var obj = this.prisoners[x];
                        nLi = li.cloneNode(false);
                        nLi.Prisoner = obj;
                        nLi.innerHTML = ['<span class="tradeName">',obj.name, ' ', obj.level, '</span> <button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Prisoners Available";
                    elm.appendChild(nLi);
                }
            }
        },
        updateAddCargo : function(byVal) {
            var c = Dom.get("tradeAddCargo"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        AddResource : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(quantity && c) {
                var id = "addResource-" + li.Resource.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Resource.quantity) {
                        quantity = li.Resource.quantity;
                    }
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Resource.type, quantity:quantity, size:1};
                    content.innerHTML = ['<span class="tradeResourceName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateAddCargo(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true),
                        inp = Sel.query("input", found, true);
                    if(newTotal > li.Resource.quantity) {
                        newTotal = li.Resource.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(diff);
                    
                    var a = new Util.ColorAnim(lq, {color:{from:'#0f0',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        AddGlyph : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var gName = li.Glyph.name,
                    id = "addGlyph-" + gName,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.glyphSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {name:gName, quantity:quantity, type:"glyph", size:this.glyphSize};
                    content.innerHTML = ['<span class="tradeResourceName">',gName.titleCaps(),' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updateAddCargo(this.glyphSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Glyph.quantity) {
                        newTotal = li.Glyph.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.glyphSize * diff);
                }
            }
        },
        AddPlan : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var pName = li.Plan.name,
                    pType = li.Plan.plan_type,
                    pLevel = li.Plan.level,
                    pExtra = li.Plan.extra_build_level,
                    id = ['addPlan-', pType, '-', pLevel, '-', pExtra].join('').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.planSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {plan_type:pType, quantity:quantity, type:"plan", level:pLevel, extra_build_level:pExtra, size:this.planSize};
                    if(pExtra > 0) {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel, '+', pExtra,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }
                    else {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }

                    c.appendChild(item);
                    this.updateAddCargo(this.planSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Plan.quantity) {
                        newTotal = li.Plan.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.planSize * diff);
                }
            }
        },
        AddShip : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var sName = li.Ship.name,
                    sType = li.Ship.type,
                    sSize = li.Ship.hold_size,
                    sBerth = li.Ship.berth_level,
                    sSpeed = li.Ship.speed,
                    id = ['addShip', sName, sType, sSize, sBerth, sSpeed].join('-').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updateAddCargo(ep.Object.quantity * -this.shipSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {quantity:quantity,
                                   type:"ship",
                                   name:sName,
                                   ship_type:sType,
                                   hold_size:sSize,
                                   berth_level:sBerth,
                                   speed:sSpeed,
                                   size:this.shipSize};
                    content.innerHTML = ['<span class="tradeResourceName">',
                                         sName, ' - ',
                                         sType.titleCaps('_',' '),
                                         ' - Hold:', sSize,
                                         ' - Berth:', sBerth,
                                         ' - Speed:', sSpeed,
                                         ' (<label class="quantity">',
                                         quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" value="',
                                         quantity,
                                         '" /><button type="button">-</button>'].join('');

                    c.appendChild(item);
                    this.updateAddCargo(this.shipSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Ship.quantity) {
                        newTotal = li.Ship.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updateAddCargo(this.shipSize * diff);
                }
            }
        },
        AddPrisoner : function(e, matchedEl, container){
            var li = matchedEl.parentNode,
                c = Dom.get("tradeAddItems");
            if(li && c) {
                var obj = li.Prisoner,
                    gId = obj.id,
                    id = "addPrisoner-" + gId;
                if(Sel.query("#"+id, c).length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        this.updateAddCargo(this.spySize*-1);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {prisoner_id:gId, type:"prisoner"};
                    content.innerHTML = [obj.name, ' ', obj.level].join('');
                    c.appendChild(item);
                    this.updateAddCargo(this.spySize);
                }
            }
        },
        AddRemove : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.updateAddCargo(li.Object.quantity * -1);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updateAddCargo(diff);
                    var a = new Util.ColorAnim(lq, {color:{from:'#f00',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        AddTrade : function() {
            var qVal = Dom.get("tradeAddAskingQuantity").value*1;
            if(!Lang.isNumber(qVal) || qVal <= 0) {
                Dom.get("tradeAddMessage").innerHTML = "Quantity of asking essentia must be a number and greater than 0";
                return;
            }
            else {
                Dom.get("tradeAddMessage").innerHTML = "";
            }
                
            var data = {
                    session_id:Game.GetSession(""),
                    building_id:this.building.id,
                    offer: [],
                    ask: qVal
                },
                hasResources, hasPlans, hasGlyphs, hasShips, hasPrisoners,
                lis = Sel.query("li","tradeAddItems");
                
            for(n=0; n<lis.length; n++) {
                obj = lis[n].Object;
                if(obj) {
                    data.offer[data.offer.length] = obj;
                    switch(obj.type) {
                        case "plan":
                            hasPlans = true;
                            break;
                        case "glyph":
                            hasGlyphs = true;
                            break;
                        case "prisoner":
                            hasPrisoners = true;
                            break;
                        case "ship":
                            hasShips = true;
                            break;
                        default:
                            hasResources = true;
                            break;
                    }
                }
            }
            
            Lacuna.Pulser.Show();
            this.service.add_to_market(data, {
                success : function(o){
                    this.rpcSuccess(o);
                    if(hasResources) {
                        this.getStoredResources(true);
                    }
                    if(hasPlans) {
                        this.getPlans(true);
                    }
                    if(hasGlyphs) {
                        this.getGlyphs(true);
                    }
                    if(hasPrisoners) {
                        this.getPrisoners(true);
                    }
                    if(hasShips) {
                        this.getShips(true);
                    }
                    for(var i=0; i<lis.length; i++) {
                        if(lis[i].Object) {
                            Event.purgeElement(lis[i]);
                            lis[i].parentNode.removeChild(lis[i]);
                        }
                    }
                    Dom.get("tradeAddAskingQuantity").value = "";
                    Dom.get("tradeAddCargo").innerHTML = "0";
                    this.fireEvent("onSelectTab", this.mineTabIndex);
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        
        //Push Resources
        populatePushResourceName : function() {
            var elm = Dom.get("tradePushResourceName"),
                li = document.createElement("li"), nLi, x, r, name, resource;
                
            if(elm) {
                elm.innerHTML = "";
                for(r in Lib.ResourceTypes) {
                    if(Lib.ResourceTypes.hasOwnProperty(r)) {
                        resource = Lib.ResourceTypes[r];
                        if(Lang.isArray(resource)) {
                            for(x=0; x < resource.length; x++) {
                                name = resource[x];
                                if(this.resources[name]) {
                                    nLi = li.cloneNode(false);
                                    nLi.Resource = {type:name,quantity:this.resources[name]*1};
                                    nLi.innerHTML = ['<span class="tradeResourceName">',name.titleCaps(), ' (<label class="quantity">', this.resources[name], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                                    elm.appendChild(nLi);
                                }
                            }
                        }
                        else if(this.resources[r] && resource) {
                            nLi = li.cloneNode(false);
                            nLi.Resource = {type:r,quantity:this.resources[r]*1};
                            nLi.innerHTML = ['<span class="tradeResourceName">',r.titleCaps(), ' (<label class="quantity">', this.resources[r], '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                            elm.appendChild(nLi);
                        }
                    }
                }
            }
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 180;
                if(Ht > 270) { Ht = 270; }
                var pHt = Dom.get('pHt');
                Dom.setStyle(pHt,"height",Ht + "px");
                Dom.setStyle(pHt,"overflow-y","auto");
            },10);
        },
        populatePushGlyphName : function() {
            var elm = Dom.get("tradePushGlyphName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.glyphs.length > 0) {
                    for(var x=0; x < this.glyphs.length; x++) {
                        var obj = this.glyphs[x];
                        nLi = li.cloneNode(false);
                        nLi.Glyph = obj;
                        nLi.innerHTML = ['<span class="tradeResourceName">',obj.name.titleCaps(), ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Glyphs Available";
                    elm.appendChild(nLi);
                }
            }
        },

        populatePushPlanName : function() {
            var elm = Dom.get("tradePushPlanName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.plans.length > 0) {
                    for(var x=0; x < this.plans.length; x++) {
                        var obj = this.plans[x];
                        nLi = li.cloneNode(false);
                        nLi.Plan = obj;
                        if(obj.extra_build_level > 0) {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level,'+',obj.extra_build_level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        else {
                            nLi.innerHTML = ['<span class="tradeResourceName">',obj.name,' ',obj.level, ' (<label class="quantity">', obj.quantity, '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        }
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Plans Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populatePushShipName : function() {
            var elm = Dom.get("tradePushShipName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.ships.length > 0) {
                    for(var x=0; x < this.ships.length; x++) {
                        var obj = this.ships[x];
                        nLi = li.cloneNode(false);
                        nLi.Ship = obj;
                        nLi.innerHTML = ['<span class="tradeName">',
                                         obj.name, ' - ',
                                         obj.type.titleCaps('_',' '),
                                         ' - Hold:', obj.hold_size,
                                         ' - Berth:', obj.berth_level,
                                         ' - Speed:', obj.speed,
                                         ' (<label class="quantity">',
                                         obj.quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" /><button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Ships Available";
                    elm.appendChild(nLi);
                }
            }
        },
        populatePushPrisonerName : function() {
            var elm = Dom.get("tradePushPrisonerName"),
                li = document.createElement("li"), nLi;
                
            if(elm) {
                elm.innerHTML = "";
                if(this.prisoners.length > 0) {
                    for(var x=0; x < this.prisoners.length; x++) {
                        var obj = this.prisoners[x];
                        nLi = li.cloneNode(false);
                        nLi.Prisoner = obj;
                        nLi.innerHTML = ['<span class="tradeName">',obj.name, ' ', obj.level, '</span> <button type="button">+</button>'].join('');
                        elm.appendChild(nLi);
                    }
                }
                else {
                    nLi = li.cloneNode(false);
                    nLi.innerHTML = "No Prisoners Available";
                    elm.appendChild(nLi);
                }
            }
        },
        updatePushCargo : function(byVal) {
            var c = Dom.get("tradePushCargo"),
                cv = c.innerHTML*1;
            c.innerHTML = cv + byVal;
        },
        PushAddResource : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(quantity && c) {
                var id = "pushResource-" + li.Resource.type,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    if(quantity > li.Resource.quantity) {
                        quantity = li.Resource.quantity;
                    }
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -1);
                        Event.purgeElement(ep);
                        ep.parentNode.removeChild(ep);
                    }, this, true);
                    item.Object = {type:li.Resource.type, quantity:quantity};
                    content.innerHTML = ['<span class="tradeResourceName">',item.Object.type.titleCaps(), ' (<label class="quantity">', quantity, '</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updatePushCargo(quantity);
                }
                else {
                    var found = exists[0],
                        newTotal = found.Object.quantity + quantity,
                        diff = quantity,
                        lq = Sel.query(".quantity", found, true),
                        inp = Sel.query("input", found, true);
                    if(newTotal > li.Resource.quantity) {
                        newTotal = li.Resource.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(diff);
                    
                    var a = new Util.ColorAnim(lq, {color:{from:'#0f0',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        PushAddGlyph : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var gName = li.Glyph.name,
                    id = "pushGlyph-" + gName,
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.glyphSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {name:gName, quantity:quantity, type:"glyph", size:this.glyphSize};
                    content.innerHTML = ['<span class="tradeResourceName">',gName.titleCaps(),' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updatePushCargo(this.glyphSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Glyph.quantity) {
                        newTotal = li.Glyph.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.glyphSize * diff);
                }
            }
        },
        PushAddPlan : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(quantity && li && c) {
                var pName = li.Plan.name,
                    pType = li.Plan.plan_type,
                    pLevel = li.Plan.level,
                    pExtra = li.Plan.extra_build_level,
                    id = ['pushPlan-', pType, '-', pLevel, '-', pExtra].join('').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);

                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.planSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {plan_type:pType, quantity:quantity, type:"plan", level:pLevel, extra_build_level:pExtra, size:this.planSize};
                    if(pExtra > 0) {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel, '+', pExtra,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }
                    else {
                        content.innerHTML = ['<span class="tradeResourceName">',pName, ' ', pLevel,' (<label class="quantity">',quantity,'</label>)</span> <input type="text" style="width:75px;" value="',quantity,'" /><button type="button">-</button>'].join('');
                    }

                    c.appendChild(item);
                    this.updatePushCargo(this.planSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Plan.quantity) {
                        newTotal = li.Plan.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.planSize * diff);
                }
            }
        },
        PushAddShip : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var sName = li.Ship.name,
                    sType = li.Ship.type,
                    sSize = li.Ship.hold_size,
                    sBerth = li.Ship.berth_level,
                    sSpeed = li.Ship.speed,
                    id = ['pushShip-', sName, sType, sSize, sBerth, sSpeed].join('-').titleCaps(' ','_'),
                    exists = Sel.query("#"+id, c);
                if(exists.length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(e){ 
                        var ed = Event.getTarget(e),
                            ep = ed.parentNode;
                        this.updatePushCargo(ep.Object.quantity * -this.shipSize);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item);
                    }, this, true);
                    item.Object = {quantity:quantity,
                                   type:"ship",
                                   name:sName,
                                   ship_type:sType,
                                   hold_size:sSize,
                                   berth_level:sBerth,
                                   speed:sSpeed,
                                   size:this.shipSize};
                    content.innerHTML = ['<span class="tradeResourceName">',
                                         sName, ' - ', sType.titleCaps('_',' '),
                                         ' - Hold:', sSize,
                                         ' - Berth:', sBerth,
                                         ' - Speed:', sSpeed,
                                         ' (<label class="quantity">',quantity,
                                         '</label>)</span> <input type="text" style="width:75px;" value="',
                                         quantity,'" /><button type="button">-</button>'].join('');
                    c.appendChild(item);
                    this.updatePushCargo(this.shipSize * quantity);
                }
                else {
                    var found = exists[0],
                    newTotal = found.Object.quantity + quantity,
                    diff = quantity,
                    lq = Sel.query(".quantity", found, true),
                    inp = Sel.query("input", found, true);
                    if(newTotal > li.Ship.quantity) {
                        newTotal = li.Ship.quantity;
                        diff = newTotal - found.Object.quantity;
                    }
                    if(inp) {
                        inp.value = diff;
                    }
                    lq.innerHTML = newTotal;
                    found.Object.quantity = newTotal;
                    this.updatePushCargo(this.shipSize * diff);
                }
            }
        },
        PushAddPrisoner : function(e, matchedEl, container){
            var li = matchedEl.parentNode,
                c = Dom.get("tradePushItems");
            if(li && c) {
                var obj = li.Prisoner,
                    gId = obj.id,
                    id = "pushPrisoner-" + gId;
                if(Sel.query("#"+id, c).length == 0) {
                    var item = document.createElement("li"),
                        del = item.appendChild(document.createElement("div")),
                        content = item.appendChild(document.createElement("div"));
                    item.id = id;
                    Dom.addClass(item, "tradeItem");
                    Dom.addClass(del, "tradeDelete");
                    Event.on(del, "click", function(){ 
                        this.updatePushCargo(this.spySize*-1);
                        Event.purgeElement(item);
                        item.parentNode.removeChild(item); 
                    }, this, true);
                    item.Object = {prisoner_id:gId, type:"prisoner"};
                    content.innerHTML = [obj.name, ' ', obj.level].join('');
                    c.appendChild(item);
                    this.updatePushCargo(this.spySize);
                }
            }
        },
        PushRemove : function(e, matchedEl, container){
            var quantity = matchedEl.previousSibling.value*1,
                li = matchedEl.parentNode.parentNode;
            if(quantity) {
                var newTotal = li.Object.quantity - quantity,
                    diff = quantity*-1,
                    lq = Sel.query(".quantity", li, true);
                if(newTotal < 0) {
                    newTotal = 0;
                    diff = li.Object.quantity*-1;
                }
                
                if(newTotal == 0) {
                    this.updatePushCargo(li.Object.quantity * -1);
                    Event.purgeElement(li);
                    li.parentNode.removeChild(li);
                }
                else {
                    lq.innerHTML = newTotal;
                    li.Object.quantity = newTotal;
                    this.updatePushCargo(diff);
                    var a = new Util.ColorAnim(lq, {color:{from:'#f00',to:'#fff'}}, 1.5);
                    a.animate();
                }
            }
        },
        Push : function() {
            var data = {
                    session_id: Game.GetSession(""),
                    building_id: this.building.id,
                    target_id: Lib.getSelectedOptionValue(Dom.get("tradePushColony"))
                },
                lis = Sel.query("li","tradePushItems"),
                items = [],
                hasResources, hasPlans, hasGlyphs, hasShips, hasPrisoners;
                
            for(var n=0; n<lis.length; n++) {
                if(lis[n].Object) {
                    items[n] = lis[n].Object;
                    switch(items[n].type) {
                        case "plan":
                            hasPlans = true;
                            break;
                        case "glyph":
                            hasGlyphs = true;
                            break;
                        case "prisoner":
                            hasPrisoners = true;
                            break;
                        case "ship":
                            hasShips = true;
                            break;
                        default:
                            hasResources = true;
                            break;
                    }
                }
            }
            data.items = items;
            
            if(data.items.length == 0) {
                Dom.get("tradePushMessage").innerHTML = "Must add items to send to colony.";
            }
            else {
                Dom.get("tradePushMessage").innerHTML = "";
                Lacuna.Pulser.Show();
                this.service.push_items(data, {
                    success : function(o){
                        this.rpcSuccess(o);
                        
                        for(var i=0; i<lis.length; i++) {
                            if(lis[i].Object) {
                                Event.purgeElement(lis[i]);
                                lis[i].parentNode.removeChild(lis[i]);
                            }
                        }

                        Dom.get("tradePushCargo").innerHTML = "0";
                        
                        if(hasResources) {
                            this.getStoredResources(true);
                        }
                        if(hasPlans) {
                            this.getPlans(true);
                        }
                        if(hasGlyphs) {
                            this.getGlyphs(true);
                        }
                        if(hasPrisoners) {
                            this.getPrisoners(true);
                        }
                        if(hasShips) {
                            this.getShips(true);
                        }
                        
                        var msg = Dom.get("tradePushMessage");
                        msg.innerHTML = ["Successfully pushed to ", Lib.getSelectedOption(Dom.get("tradePushColony")).innerHTML, '.'].join('');
                        Lib.fadeOutElm("tradePushMessage");
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        }
    
    });
    
    Lacuna.buildings.Transporter = Transporter;

})();
YAHOO.register("transporter", YAHOO.lacuna.buildings.Transporter, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/transporter.js","/building")
},{"buffer":71,"oMfpAn":75}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.WasteExchanger == "undefined" || !YAHOO.lacuna.buildings.WasteExchanger) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var WasteExchanger = function(result){
        WasteExchanger.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Exchanger;
    };
    
    Lang.extend(WasteExchanger, Lacuna.buildings.Building, {
        getChildTabs : function() {
            if(this.building.level > 0) {
                var t = this._getRecycleTab();
                if(t) {
                    return [t];
                }
            }
        },
        _getRecycleTab : function() {
            if(this.result.recycle.can) {
                this.recycleTab = new YAHOO.widget.Tab({ label: "Recycle", contentEl: this.RecycleGetDisplay(this.result.recycle)});
            }
            else if(this.result.recycle.seconds_remaining) {
                this.recycleTab = new YAHOO.widget.Tab({label: "Recycle", contentEl: this.RecycleGetTimeDisplay(this.result.recycle)});
                this.addQueue(this.result.recycle.seconds_remaining, this.RecycleQueue, "recycleTime", this);
            }
                    
            return this.recycleTab;
        },
        
        Recycle : function(e, options) {
            var planet = Game.GetCurrentPlanet();
            if(planet) {
                var ore = this.recycleOreEl.value*1,
                    water = this.recycleWaterEl.value*1,
                    energy = this.recycleEnergyEl.value*1,
                    total = ore + water + energy,
                    useE = options ? options.instant : 0;
                if(total > planet.waste_stored) {
                    this.recycleMessageEl.innerHTML = "Can only recycle waste you have stored.";
                }
                else {
                    Lacuna.Pulser.Show();
                    
                    this.service.recycle({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        water:water,
                        ore:ore,
                        energy:energy,
                        use_essentia:useE
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "WasteExchanger.Recycle.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.work = o.result.building.work;
                            //this.updateBuildingTile(o.result.building);
                            if(this.recycleTab){
                                var ce = this.recycleTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                if(this.work && this.work.seconds_remaining && this.work.seconds_remaining*1 > 0) {
                                    ce.appendChild(this.RecycleGetTimeDisplay(o.result.recycle, water, ore, energy));
                                    this.addQueue(this.work.seconds_remaining, this.RecycleQueue, "recycleTime", this);
                                }
                                else {
                                    ce.appendChild(this.RecycleGetDisplay(o.result.recycle));
                                    this.recycleMessageEl.innerHTML = "Successfully recycled " + total + " waste.";
                                }
                            }
                        },
                        scope:this
                    });
                }
            }
        },
        RecycleGetDisplay : function(recycle) {
            var planet = Game.GetCurrentPlanet(),
                ul = document.createElement("ul"),
                li = document.createElement("li"),
                nLi = li.cloneNode(false),
                input,
                btn;
                
            if(recycle) {
                this.recycle = recycle;
            }
            
            if(this.recycle) {
                nLi.innerHTML = ['Can recycle a maximum of ',Lib.formatNumber(this.recycle.max_recycle),' waste at ', Lib.formatNumber(Math.floor(3600 / this.recycle.seconds_per_resource)),'/hour.'].join(''); 
                ul.appendChild(nLi);
                
                nLi = li.cloneNode(false);
            }
            
            nLi.innerHTML = '<label>Recycle into:</label>';
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/ore.png" class="smallOre" /></span>';
            input = document.createElement("input");
            input.id = "recycleOreAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleOreEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "ore";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/water.png" class="smallWater" /></span>';
            input = document.createElement("input");
            input.id = "recycleWaterAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleWaterEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "water";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Distribute Evenly";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.Distribute, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/energy.png" class="smallEnergy" /></span>';
            input = document.createElement("input");
            input.id = "recycleEnergyAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleEnergyEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "energy";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<label>Total:</label>';
            var span = nLi.appendChild(document.createElement("span"));
            span.innerHTML = 0;
            ul.appendChild(nLi);
            this.totalWasteToRecycle = 0;
            this.totalWasteToRecycleEl = span;
            
            var div = document.createElement("div");
            Dom.addClass(div, 'recycleTab');
            div.appendChild(ul);
            
            var fieldset;
            var form = document.createElement('form');
            fieldset = document.createElement('fieldset');
            fieldset.innerHTML = '<legend>Recycle</legend>';
            var label = fieldset.appendChild(document.createElement('label'));
            label.innerHTML = 'Time to Recycle:<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/time.png" class="smallTime" title="Time" /></span>';
            span = label.appendChild(document.createElement("span"));
            span.innerHTML = 0;
            this.totalTimeToRecycle = span;
            btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Recycle";
            btn = fieldset.appendChild(btn);
            Event.on(btn, "click", this.Recycle, undefined, this, true);
            form.appendChild(fieldset);

            if(Game.EmpireData.essentia*1 >= 2) {
                fieldset = document.createElement('fieldset');
                fieldset.innerHTML = '<legend>Instant Recycle</legend><label>Cost to recycle:<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/essentia.png" class="smallEssentia" title="Essentia" /></span>2</label>';
                btn = document.createElement("button");
                btn.setAttribute("type", "button");
                btn.innerHTML = "Recycle Instantly";
                btn = fieldset.appendChild(btn);
                Event.on(btn, "click", this.Recycle, {instant : true}, this, true);
                form.appendChild(fieldset);
            }
            
            div.appendChild(form);
            
            this.recycleMessageEl = div.appendChild(document.createElement('div'));
            
            return div;
        },
        Distribute : function(e) {
            var btn = Event.getTarget(e),
                cp = Game.GetCurrentPlanet(),
                maxVal = cp.waste_stored <= this.recycle.max_recycle ? cp.waste_stored : this.recycle.max_recycle;
                third = Math.round(maxVal / 3);
                
            this.recycleOreEl.value = third;
            
            third = Math.round( (maxVal - third) / 2 );
            this.recycleWaterEl.value = third;
            
            third = Math.floor(maxVal - third - this.recycleOreEl.value);
            this.recycleEnergyEl.value = third;
            
            this.totalWasteToRecycle = maxVal;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        MaxValue : function(e) {
            var btn = Event.getTarget(e),
                input = btn.input,
                cp = Game.GetCurrentPlanet(),
                origVal, newVal;
                
            switch(btn.resourceType) {
                case "ore":
                    origVal = this.recycleOreEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored); 
                    this.recycleOreEl.value = newVal;
                    this.recycleWaterEl.value = 0;
                    this.recycleEnergyEl.value = 0;
                    break;
                case "water":
                    origVal = this.recycleWaterEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored);  
                    this.recycleWaterEl.value = newVal;
                    this.recycleOreEl.value = 0;
                    this.recycleEnergyEl.value = 0;
                    break;
                case "energy":
                    origVal = this.recycleEnergyEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored); 
                    this.recycleEnergyEl.value = newVal;
                    this.recycleOreEl.value = 0;
                    this.recycleWaterEl.value = 0;
                    break;
            }
            
            this.totalWasteToRecycle = newVal;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        SetTime : function() {
            var seconds = this.totalWasteToRecycle * this.recycle.seconds_per_resource;
            
            this.totalTimeToRecycle.innerHTML = Lib.formatTime(seconds);
        },
        RecycleGetTimeDisplay : function(recycle, water, ore, energy) {
            var div = document.createElement("div"),
                btnDiv = div.cloneNode(false);
            div.innerHTML = ['<p>Current recycling job:</p>',
                '<ul><li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" class="smallOre" /></span>',recycle.ore || ore || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" class="smallWater" /></span>',recycle.water || water || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" class="smallEnergy" /></span>',recycle.energy || energy || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/time.png" class="smallTime" /></span><span id="recycleTime">',Lib.formatTime(recycle.seconds_remaining),'</span></li></ul>'
            ].join('');
            
            btnDiv.appendChild(document.createTextNode("You may subsidize the recycle job for 2 essentia and finish it immediately. "));
            
            var bbtn = document.createElement("button");
            bbtn.setAttribute("type", "button");
            bbtn.innerHTML = "Subsidize";
            bbtn = btnDiv.appendChild(bbtn);
            Event.on(bbtn, "click", this.RecycleSubsidize, this, true);
            
            div.appendChild(btnDiv);
            return div;
        },
        RecycleQueue : function(remaining, el){
            el = Dom.get(el);
            if (! el) {
                return;
            }
            if (remaining < 0 ) {
                remaining = 0;
            }
            el.innerHTML = Lib.formatTime(Math.round(remaining));
            if(Math.round(remaining) == 0) {
                if(this.recycleTab){
                    var ce = this.recycleTab.get("contentEl");
                    Event.purgeElement(ce);
                    ce.innerHTML = "";
                    ce.appendChild(this.RecycleGetDisplay(this.result.recycle));
                }
            }
        },
        RecycleValueChange : function(e){
            this.totalWasteToRecycle = this.recycleOreEl.value * 1 + this.recycleWaterEl.value*1 + this.recycleEnergyEl.value*1;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        RecycleSubsidize : function() {
            Lacuna.Pulser.Show();
            this.service.subsidize_recycling({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "WasteExchanger.RecycleSubsidize.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    this.resetQueue();

                    if(this.recycleTab){
                        var ce = this.recycleTab.get("contentEl");
                        Event.purgeElement(ce);
                        ce.innerHTML = "";
                        ce.appendChild(this.RecycleGetDisplay(o.result.recycle));
                    }
                },
                scope:this
            });
        }

    });
    
    YAHOO.lacuna.buildings.WasteExchanger = WasteExchanger;

})();
YAHOO.register("wasteexchanger", YAHOO.lacuna.buildings.WasteExchanger, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/wasteExchanger.js","/building")
},{"buffer":71,"oMfpAn":75}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.WasteRecycling == "undefined" || !YAHOO.lacuna.buildings.WasteRecycling) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var WasteRecycling = function(result){
        WasteRecycling.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Buildings.Recycler;
    };
    
    Lang.extend(WasteRecycling, Lacuna.buildings.Building, {
        getChildTabs : function() {
            if(this.building.level > 0) {
                var t = this._getRecycleTab();
                if(t) {
                    return [t];
                }
            }
        },
        _getRecycleTab : function() {
            if(this.result.recycle.can) {
                this.recycleTab = new YAHOO.widget.Tab({ label: "Recycle", contentEl: this.RecycleGetDisplay(this.result.recycle)});
            }
            else if(this.result.recycle.seconds_remaining) {
                this.recycleTab = new YAHOO.widget.Tab({label: "Recycle", contentEl: this.RecycleGetTimeDisplay(this.result.recycle)});
                this.addQueue(this.result.recycle.seconds_remaining, this.RecycleQueue, "recycleTime", this);
            }
                    
            return this.recycleTab;
        },
        
        Recycle : function(e, options) {
            var planet = Game.GetCurrentPlanet();
            if(planet) {
                var ore = this.recycleOreEl.value*1,
                    water = this.recycleWaterEl.value*1,
                    energy = this.recycleEnergyEl.value*1,
                    total = ore + water + energy,
                    useE = options ? options.instant : 0;
                if(total > planet.waste_stored) {
                    this.recycleMessageEl.innerHTML = "Can only recycle waste you have stored.";
                }
                else {
                    Lacuna.Pulser.Show();
                    
                    this.service.recycle({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        water:water,
                        ore:ore,
                        energy:energy,
                        use_essentia:useE
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "WasteRecycling.Recycle.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            this.work = o.result.building.work;
                            //this.updateBuildingTile(o.result.building);
                            if(this.recycleTab){
                                var ce = this.recycleTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                if(this.work && this.work.seconds_remaining && this.work.seconds_remaining*1 > 0) {
                                    ce.appendChild(this.RecycleGetTimeDisplay(o.result.recycle, water, ore, energy));
                                    this.addQueue(this.work.seconds_remaining, this.RecycleQueue, "recycleTime", this);
                                }
                                else {
                                    ce.appendChild(this.RecycleGetDisplay(o.result.recycle));
                                    this.recycleMessageEl.innerHTML = "Successfully recycled " + total + " waste.";
                                }
                            }
                        },
                        scope:this
                    });
                }
            }
        },
        RecycleGetDisplay : function(recycle) {
            var planet = Game.GetCurrentPlanet(),
                ul = document.createElement("ul"),
                li = document.createElement("li"),
                nLi = li.cloneNode(false),
                input,
                btn;
                
            if(recycle) {
                this.recycle = recycle;
            }
            
            if(this.recycle) {
                nLi.innerHTML = ['Can recycle a maximum of ',Lib.formatNumber(this.recycle.max_recycle),' waste at ', Lib.formatNumber(Math.floor(3600 / this.recycle.seconds_per_resource)),'/hour.'].join(''); 
                ul.appendChild(nLi);
                
                nLi = li.cloneNode(false);
            }
            
            nLi.innerHTML = '<label>Recycle into:</label>';
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/ore.png" class="smallOre" /></span>';
            input = document.createElement("input");
            input.id = "recycleOreAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleOreEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "ore";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/water.png" class="smallWater" /></span>';
            input = document.createElement("input");
            input.id = "recycleWaterAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleWaterEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "water";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Distribute Evenly";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.Distribute, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/energy.png" class="smallEnergy" /></span>';
            input = document.createElement("input");
            input.id = "recycleEnergyAmount";
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.RecycleValueChange, this, true);
            this.recycleEnergyEl = input;
            btn = document.createElement("button");
            btn.setAttribute("type","button");
            btn.innerHTML = "Max";
            btn.resourceType = "energy";
            btn = nLi.appendChild(btn);
            Event.on(btn, "click", this.MaxValue, this, true);
            ul.appendChild(nLi);
            
            nLi = li.cloneNode(false);
            nLi.innerHTML = '<label>Total:</label>';
            var span = nLi.appendChild(document.createElement("span"));
            span.innerHTML = 0;
            ul.appendChild(nLi);
            this.totalWasteToRecycle = 0;
            this.totalWasteToRecycleEl = span;
            
            var div = document.createElement("div");
            Dom.addClass(div, 'recycleTab');
            div.appendChild(ul);
            
            var fieldset;
            var form = document.createElement('form');
            fieldset = document.createElement('fieldset');
            fieldset.innerHTML = '<legend>Recycle</legend>';
            var label = fieldset.appendChild(document.createElement('label'));
            label.innerHTML = 'Time to Recycle:<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/time.png" class="smallTime" title="Time" /></span>';
            span = label.appendChild(document.createElement("span"));
            span.innerHTML = 0;
            this.totalTimeToRecycle = span;
            btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Recycle";
            btn = fieldset.appendChild(btn);
            Event.on(btn, "click", this.Recycle, undefined, this, true);
            form.appendChild(fieldset);

            if(Game.EmpireData.essentia*1 >= 2) {
                fieldset = document.createElement('fieldset');
                fieldset.innerHTML = '<legend>Instant Recycle</legend><label>Cost to recycle:<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/essentia.png" class="smallEssentia" title="Essentia" /></span>2</label>';
                btn = document.createElement("button");
                btn.setAttribute("type", "button");
                btn.innerHTML = "Recycle Instantly";
                btn = fieldset.appendChild(btn);
                Event.on(btn, "click", this.Recycle, {instant : true}, this, true);
                form.appendChild(fieldset);
            }
            
            div.appendChild(form);
            
            this.recycleMessageEl = div.appendChild(document.createElement('div'));
            
            return div;
        },
        Distribute : function(e) {
            var btn = Event.getTarget(e),
                cp = Game.GetCurrentPlanet(),
                maxVal = cp.waste_stored <= this.recycle.max_recycle ? cp.waste_stored : this.recycle.max_recycle;
                third = Math.round(maxVal / 3);
                
            this.recycleOreEl.value = third;
            
            third = Math.round( (maxVal - third) / 2 );
            this.recycleWaterEl.value = third;
            
            third = Math.floor(maxVal - third - this.recycleOreEl.value);
            this.recycleEnergyEl.value = third;
            
            this.totalWasteToRecycle = maxVal;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        MaxValue : function(e) {
            var btn = Event.getTarget(e),
                input = btn.input,
                cp = Game.GetCurrentPlanet(),
                origVal, newVal;
                
            switch(btn.resourceType) {
                case "ore":
                    origVal = this.recycleOreEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored); 
                    this.recycleOreEl.value = newVal;
                    this.recycleWaterEl.value = 0;
                    this.recycleEnergyEl.value = 0;
                    break;
                case "water":
                    origVal = this.recycleWaterEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored);  
                    this.recycleWaterEl.value = newVal;
                    this.recycleOreEl.value = 0;
                    this.recycleEnergyEl.value = 0;
                    break;
                case "energy":
                    origVal = this.recycleEnergyEl.value*1;
                    newVal = Math.round(cp.waste_stored > this.recycle.max_recycle ? this.recycle.max_recycle : cp.waste_stored); 
                    this.recycleEnergyEl.value = newVal;
                    this.recycleOreEl.value = 0;
                    this.recycleWaterEl.value = 0;
                    break;
            }
            
            this.totalWasteToRecycle = newVal;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        SetTime : function() {
            var seconds = this.totalWasteToRecycle * this.recycle.seconds_per_resource;
            
            this.totalTimeToRecycle.innerHTML = Lib.formatTime(seconds);
        },
        RecycleGetTimeDisplay : function(recycle, water, ore, energy) {
            var div = document.createElement("div"),
                btnDiv = div.cloneNode(false);
            div.innerHTML = ['<p>Current recycling job:</p>',
                '<ul><li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/ore.png" class="smallOre" /></span>',recycle.ore || ore || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/water.png" class="smallWater" /></span>',recycle.water || water || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/energy.png" class="smallEnergy" /></span>',recycle.energy || energy || '','</li>',
                '<li><span class="smallImg"><img src="',Lib.AssetUrl,'ui/s/time.png" class="smallTime" /></span><span id="recycleTime">',Lib.formatTime(recycle.seconds_remaining),'</span></li></ul>'
            ].join('');
            
            btnDiv.appendChild(document.createTextNode("You may subsidize the recycle job for 2 essentia and finish it immediately. "));
            
            var bbtn = document.createElement("button");
            bbtn.setAttribute("type", "button");
            bbtn.innerHTML = "Subsidize";
            bbtn = btnDiv.appendChild(bbtn);
            Event.on(bbtn, "click", this.RecycleSubsidize, this, true);
            
            div.appendChild(btnDiv);
            return div;
        },
        RecycleQueue : function(remaining, el){
            el = Dom.get(el);
            if (! el) {
                return;
            }
            if (remaining < 0 ) {
                remaining = 0;
            }
            el.innerHTML = Lib.formatTime(Math.round(remaining));
            if(Math.round(remaining) == 0) {
                if(this.recycleTab){
                    var ce = this.recycleTab.get("contentEl");
                    Event.purgeElement(ce);
                    ce.innerHTML = "";
                    ce.appendChild(this.RecycleGetDisplay(this.result.recycle));
                }
            }
        },
        RecycleValueChange : function(e){
            this.totalWasteToRecycle = this.recycleOreEl.value * 1 + this.recycleWaterEl.value*1 + this.recycleEnergyEl.value*1;
            this.totalWasteToRecycleEl.innerHTML = Lib.formatNumber(this.totalWasteToRecycle);
            this.SetTime();
        },
        RecycleSubsidize : function() {
            Lacuna.Pulser.Show();
            this.service.subsidize_recycling({
                session_id:Game.GetSession(),
                building_id:this.building.id
            }, {
                success : function(o){
                    YAHOO.log(o, "info", "WasteRecycling.RecycleSubsidize.success");
                    Lacuna.Pulser.Hide();
                    this.rpcSuccess(o);
                    
                    this.resetQueue();

                    if(this.recycleTab){
                        var ce = this.recycleTab.get("contentEl");
                        Event.purgeElement(ce);
                        ce.innerHTML = "";
                        ce.appendChild(this.RecycleGetDisplay(o.result.recycle));
                    }
                },
                scope:this
            });
        }

    });
    
    YAHOO.lacuna.buildings.WasteRecycling = WasteRecycling;

})();
YAHOO.register("wasterecycling", YAHOO.lacuna.buildings.WasteRecycling, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/wasteRecycling.js","/building")
},{"buffer":71,"oMfpAn":75}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.buildings");

if (typeof YAHOO.lacuna.buildings.WaterStorage == "undefined" || !YAHOO.lacuna.buildings.WaterStorage) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var WaterStorage = function(result){
        WaterStorage.superclass.constructor.call(this, result);

        this.service = Game.Services.Buildings.WaterStorage;
    };

    YAHOO.lang.extend(WaterStorage, YAHOO.lacuna.buildings.Building, {
        getChildTabs : function() {
            return [this._getDumpTab()];
        },
        _getDumpTab : function() {
            this.dumpTab = new YAHOO.widget.Tab({ label: "Dump", contentEl: this.DumpGetDisplay(this.result.dump)});
            return this.dumpTab;
        },
        DumpGetDisplay : function() {
            var ul = document.createElement('ul'),
                li = document.createElement('li'),
                nLi = li.cloneNode(false);
            nLi.innerHTML = 'Convert water into waste.';
            ul.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = '<span class="smallImg"><img src="'+Lib.AssetUrl+'ui/s/water.png" class="smallWater" /></span>';
            input = document.createElement("input");
            input.id = 'dumpAmount';
            input.type = "text";
            input.value = 0;
            input = nLi.appendChild(input);
            Event.on(input, "change", this.DumpValueChange, this, true);
            this.dumpAmountEl = input;
            ul.appendChild(nLi);

        var div = document.createElement("div");
            Dom.addClass(div, 'dumpTab');
            div.appendChild(ul);

            var form = document.createElement('form');
            btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.innerHTML = "Dump";
            btn = form.appendChild(btn);
            Event.on(btn, "click", this.Dump, this, true);

            div.appendChild(form);

            var msg = document.createElement('div');
            msg.id = "dumpMessage";
            div.appendChild(msg);

            return div;
        },
        Dump : function(e) {
            var planet = Game.GetCurrentPlanet();
            var building = this.building;
            var type = "water";
            if(building) {
                var amount = this.dumpAmountEl.value*1;
                if(amount > planet.water_stored) {
                    Dom.get("dumpMessage").innerHTML = "Can only convert " + type + " you have stored.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else if(amount <= 0) {
                    Dom.get("dumpMessage").innerHTML = "You must specify an amount greater than zero.";
                    Lib.fadeOutElm("dumpMessage");
                }
                else {
                    Lacuna.Pulser.Show();
                    this.service.dump({
                        session_id:Game.GetSession(),
                        building_id:this.building.id,
                        amount:amount
                    }, {
                        success : function(o){
                            YAHOO.log(o, "info", "WaterStorage.Dump.success");
                            Lacuna.Pulser.Hide();
                            this.rpcSuccess(o);
                            if(this.dumpTab){
                                var ce = this.dumpTab.get("contentEl");
                                Event.purgeElement(ce);
                                ce.innerHTML = "";
                                ce.appendChild(this.DumpGetDisplay(o.result.dump));
                                Dom.get("dumpMessage").innerHTML = "Successfully converted " + amount + " " + type + " to waste.";
                                Lib.fadeOutElm("dumpMessage");
                            }
                        },
                        scope:this
                    });
                }
            }
        }

    });

    YAHOO.lacuna.buildings.WaterStorage = WaterStorage;

})();
YAHOO.register("waterstorage", YAHOO.lacuna.buildings.WaterStorage, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/building/waterStorage.js","/building")
},{"buffer":71,"oMfpAn":75}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Captcha == "undefined" || !YAHOO.lacuna.Captcha) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Captcha = function() {
    //    this.createEvent("onRpc");
        
        this.id = "captcha";
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Dialog = new YAHOO.widget.Dialog(this.id, {
            constraintoviewport:true,
            postmethod:"none",
            hideaftersubmit:false,
            buttons:[
                { text:"Solve", handler:{fn:function(){ this.submit(); } }, isDefault:true },
                { text:"Cancel", handler:{fn:function(){ this.hide(); } } }
            ],
            fixedcenter:true,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"390px",
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            this.captchaImage = Dom.get("captchaImage");
            this.captchaSolution = Dom.get("captchaSolution");
            this.captchaMessage = Dom.get("captchaMessage");
            Event.on('captchaRefresh', 'click', this.refreshCaptcha, this, true);
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Dialog.hideEvent.subscribe(function(){
            this._fail();
        }, this, true);
        this.Dialog.submitEvent.subscribe(function(){
            this.solveCaptcha();
        }, this, true);
        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
    };
    Captcha.prototype = {
        _getHtml : function() {
            return [
                '<div class="hd">Verify Your Humanity</div>',
                '<div class="bd">',
                '    <form>',
                '        <ul id="captchaList">',
                '            <li>Solve this problem to continue:</li>',
                '            <li>',
                '                <img width="300" height="80" id="captchaImage" />',
                '                <button id="captchaRefresh" type="button"><img alt="Refresh" src="'+Lib.AssetUrl+'ui/s/refresh.png" width="20" height="22" /></button>',
                '            </li>',
                '            <li><label for="captchaSolution">Answer:</label><input type="text" id="captchaSolution" /></li>',
                '        </ul>',
                '        <div id="captchaMessage" class="alert">&nbsp;</div>',
                '    </form>',
                '</div>'
            ].join('');
        },
        show : function(retry, fail) {
            this._retry = retry;
            this._fail = fail;
            this.refreshCaptcha();
        },
        solveCaptcha : function() {
            Lacuna.Pulser.Show();
            Game.Services.Captcha.solve({
                session_id : Game.GetSession(),
                captcha_guid : this._captcha_guid,
                captcha_solution : this.captchaSolution.value
            },{
                success : function(o) {
                    Lacuna.Pulser.Hide();
                    this.Dialog.hide();
                    this._retry();
                },
                failure : function(o) {
                    this.setError(o.error.message);
                    return true;
                },
                scope : this
            });
        },
        refreshCaptcha: function() {
            Lacuna.Pulser.Show();
            Game.Services.Captcha.fetch({session_id:Game.GetSession()},{
                success : function(o) {
                    var t = this;
                    var image = new Image();
                    image.onload = function() {
                        t._captcha_guid = o.result.guid;
                        t.captchaImage.src = o.result.url;
                        t.captchaSolution.value = '';
                        Lacuna.Pulser.Hide();
                        t.Dialog.show();
                    };
                    image.src = o.result.url;
                },
                scope : this
            });
        },
        cancel : function() {
            this.Dialog.hide();
        },
        setError : function(msg) {
            this.captchaSolution.value = "";
            this.captchaSolution.focus();
            this.captchaMessage.innerHTML = msg;
            var a = new Util.Anim(this.captchaMessage, {opacity:{from:1,to:0}}, 4);
            a.onComplete.subscribe(function(){
                this.captchaMessage.innerHTML = "&nbsp;";
            }, this, true);
            a.animate();
        }
    };

    Lacuna.Captcha = new Captcha();
})();
YAHOO.register("captcha", YAHOO.lacuna.Captcha, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/captcha.js","/")
},{"buffer":71,"oMfpAn":75}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.CreateEmpire == "undefined" || !YAHOO.lacuna.CreateEmpire) {
    
(function(){
    var Util = YAHOO.util,
        Cookie = Util.Cookie,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var CreateEmpire = function(Login) {
        this.id = "createEmpire";
        this._login = Login;
        this.createEvent("onCreateSuccessful");
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, "hidden");
        container.innerHTML = [
        '    <div class="hd">Create Empire</div>',
        '    <div class="bd">',
        '        <form name="empireForm" autocomplete="no">',
        '            <div style="overflow: hidden">',
        '                <ul style="float:left">',
        '                    <li><label for="empireName" title="Empire name must be between 3 and 30 characters and cannot contain the characters @, &amp;, <, >, or ;"><span class="requiredField">* </span>Empire Name</label><input type="text" id="empireName" maxlength="30" /></li>',
        '                    <li class="empirePassword"><label for="empirePass" title="Password must be between 6 and 30 characters long."><span class="requiredField">* </span>Password</label><input type="password" id="empirePass" maxlength="30"/></li>',
        '                    <li class="empirePassword"><label for="empirePassConfirm" title="Must be the same as the password"><span class="requiredField">* </span>Password Confirm</label><input type="password" id="empirePassConfirm" /></li>',
        '                    <li class="empireEmail"><label for="empireEmail" title="Used for password recovery and otifications.">EMail</label><input type="text" id="empireEmail" /></li>',
        '                    <li class="empireDesc"><label for="empireDesc" title="Description of your empire to show to other players.">Description</label><textarea id="empireDesc"></textarea></li>',
        '                    <li class="empireFriendCode"><label for="empireFriendCode" title="If you don\'t have a friend invite code, this can be ignored.">Friend Invite Code</label><input type="text" id="empireFriendCode" /></li>',
        '                </ul>',
        '                <ul style="float:right">',
        '                    <li class="empireCaptcha"><span id="empireCaptchaBorder"><img alt="" width="300" height="80" src="" id="empireCaptchaImage" /></span><button id="empireRefreshCaptcha" type="button"><img alt="Refresh" src="'+Lib.AssetUrl+'ui/s/refresh.png" /></button></li>',
        '                    <li class="empireCaptcha"><span class="requiredField">* </span><label for="empireCaptcha">Answer: </label><input type="text" id="empireCaptcha" /></li>',
        '                    <li class="empireAgreeCheck"><span class="requiredField">* </span><input type="checkbox" id="empireAgreeTOS" /><label for="empireAgreeTOS">I agree to the <a href="http://www.lacunaexpanse.com/terms/" target="_blank">Terms of Service</a>.</label></li>',
        '                    <li class="empireAgreeCheck"><span class="requiredField">* </span><input type="checkbox" id="empireAgreeRules" /><label for="empireAgreeRules">I agree to abide by <a href="http://www.lacunaexpanse.com/rules/" target="_blank">the rules</a>.</label></li>',
        '                    <li class="requiredField">* Required field</li>',
        '                </ul>',
        '            </div>',
        '            <div id="empireMessage" class="hidden"></div>',
        '        </form>',
        '    </div>',
        '    <div class="ft"></div>'
        ].join('');
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Dialog = new YAHOO.widget.Dialog(this.id, {
            constraintoviewport:true,
            fixedcenter:true,
            postmethod:"none",
            visible:false,
            buttons:[ { text:"Create", handler:{fn:this.handleCreate, scope:this}, isDefault:true },
                { text:"Cancel", handler:{fn:this.handleCancel, scope:this}}],
            draggable:false,
            effect:Game.GetContainerEffect(),
            modal:false,
            close:false,
            width:"750px",
            underlay:false,
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            //get el's after rendered
            this.elName = Dom.get("empireName");
            this.elDesc = Dom.get("empireDesc");
            this.elEmail = Dom.get("empireEmail");
            this.elFriendCode = Dom.get("empireFriendCode");
            this.elPass = Dom.get("empirePass");
            this.elPassConfirm = Dom.get("empirePassConfirm");
            this.elAgreeTOS = Dom.get("empireAgreeTOS");
            this.elAgreeRules = Dom.get("empireAgreeRules");
            this.elMessage = Dom.get("empireMessage");
            this.elCaptchaImage = Dom.get("empireCaptchaImage");
            this.elCaptcha = Dom.get("empireCaptcha");
            Event.on(this.elCaptchaImage, 'load', function(){Dom.setStyle(this, 'visibility', 'inherit');} );
            Event.on('empireRefreshCaptcha', 'click', function(e){Event.stopEvent(e);this.refreshCaptcha();}, this, true);
            
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Dialog.cfg.queueProperty("keylisteners", new YAHOO.util.KeyListener("empirePassConfirm", { keys:13 }, { fn:this.handleCreate, scope:this, correctScope:true } )); 
        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
        
        this.initSpecies();
    };
    CreateEmpire.prototype = {
        refreshCaptcha : function() {
            Dom.setStyle(this.elCaptchaImage, 'visibility' , 'hidden');
            Game.Services.Empire.fetch_captcha({},{
                success : function(o){
                    YAHOO.log(o, "info", "RefreshCaptcha");
                    this.captchaGUID = o.result.guid;
                    this.elCaptchaImage.src = o.result.url;
                },
                failure : function(o){
                    this.setMessage(o.error.message);
                    return true;
                },
                scope:this
            });
        },
        
        handleCreate : function() {
            if (! this.elAgreeTOS.checked || ! this.elAgreeRules.checked) {
                this.setMessage("You must agree to the Terms of Service and the rules before registering.");
                return;
            }
            this.setMessage("");
            if(this.savedEmpire && this.savedEmpire.name == this.elName.value) {
                Game.SpeciesCreator.show(this.savedEmpire.id);
                this.hide(); //hide empire
            }
            else {
                Lacuna.Pulser.Show();
                var EmpireServ = Game.Services.Empire,
                    data = {
                        name: this.elName.value,
                        description: this.elDesc.value,
                        email: this.elEmail.value
                    };
                if (this.facebook) {
                    data.facebook_uid = this.facebook.uid;
                    data.facebook_token = this.facebook.token;
                }
                else {
                    data.captcha_guid = this.captchaGUID;
                    data.captcha_solution = this.elCaptcha.value;
                }
                if (this.elPass.value.length > 0) {
                    data.password = this.elPass.value;
                    data.password1 = this.elPassConfirm.value;
                }
                if (this.elFriendCode.value.length > 0) {
                    data.invite_code = this.elFriendCode.value;
                }
                EmpireServ.create(data,{
                    success : function(o){
                        YAHOO.log(o, "info", "CreateEmpire");
                        this.savedEmpire = data;
                        this.savedEmpire.id = o.result;
                        Game.SpeciesCreator.show(o.result);
                        Lacuna.Pulser.Hide();
                        this.hide(); //hide empire
                    },
                    failure : function(o){
                        this.setMessage(o.error.message);
                        if (o.error.code == 1014) {
                            this.captchaGUID = o.error.data.guid;
                            this.elCaptchaImage.src = o.error.data.url;
                            this.elCaptcha.value = '';
                            this.elCaptcha.focus();
                        }
                        else if (o.error.code == 1100) {
                            this.savedEmpire = data;
                            this.savedEmpire.id = o.error.data;
                            Game.SpeciesCreator.show(o.error.data.empire_id);
                            this.hide(); //hide empire
                        }
                        return true;
                    },
                    scope:this
                });
            }
        },
        handleCancel : function() {
            this.hide();
            this._login.show();
        },
        setMessage : function(str) {
            Dom.replaceClass(this.elMessage, Lib.Styles.HIDDEN, Lib.Styles.ALERT);
            this.elMessage.innerHTML = str;
        },
        facebookReturn : function(uid, token, name) {
            this.savedEmpire = undefined;
            this.elName.value = name + "'s Empire";
            this.elAgreeTOS.checked = false;
            this.elAgreeRules.checked = false;
            
            this.facebook = {
                uid: uid,
                token: token
            };
            
            Dom.addClass(this.id, 'facebookLogin');
            Game.OverlayManager.hideAll();
            this.Dialog.show();
        },
        show : function(doNotClear) {
            Game.OverlayManager.hideAll();
            Dom.removeClass(this.id, 'facebookLogin');
            delete this.facebook;
            if(!doNotClear) {
                this.savedEmpire = undefined;
                this.elName.value = "";
                this.elDesc.value = "";
                this.elEmail.value = "";
                this.elFriendCode.value = Cookie.get("lacunaReferral") || "";
                this.elPass.value = "";
                this.elPassConfirm.value = "";
                this.elAgreeTOS.checked = false;
                this.elAgreeRules.checked = false;
                this.elCaptcha.value = '';
            }
            this.refreshCaptcha();
            this.Dialog.show();
        },
        hide : function() {
            Dom.replaceClass(this.elMessage, Lib.Styles.ALERT, Lib.Styles.HIDDEN);
            this.Dialog.hide();
        },
        initSpecies : function() {
            if(!Game.SpeciesCreator) {
                Game.SpeciesCreator = new Lacuna.CreateSpecies(this);
                Game.SpeciesCreator.subscribe("onCreateSuccessful",function(oArgs) {
                    this.fireEvent("onCreateSuccessful",oArgs);
                }, this, true);
            }
        }
    };
    YAHOO.lang.augmentProto(CreateEmpire, Util.EventProvider);

    Lacuna.CreateEmpire = CreateEmpire;
})();
YAHOO.register("createEmpire", YAHOO.lacuna.CreateEmpire, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/createEmpire.js","/")
},{"buffer":71,"oMfpAn":75}],45:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.CreateSpecies == "undefined" || !YAHOO.lacuna.CreateSpecies) {
    
(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var CreateSpecies = function(Empire) {
        this.id = "createSpecies";
        this._empire = Empire;
        this.createEvent("onCreateSuccessful");
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Dialog = new YAHOO.widget.Dialog(this.id, {
            constraintoviewport:false,
            //fixedcenter:true,
            postmethod:"none",
            visible:false,
            buttons:[ { text:"Found Empire", handler:{fn:this.handleCreate, scope:this}, isDefault:true },
                { text:"Cancel", handler:{fn:this.handleCancel, scope:this} } ],
            draggable:true,
            effect:Game.GetContainerEffect(),
            modal:false,
            close:false,
            width:"735px",
            underlay:false,
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            this.elMessage = Dom.get('speciesMessage');
            this.designer = new Lacuna.SpeciesDesigner();
            this.designer.render("speciesCreateDesign");
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
    };
    CreateSpecies.prototype = {
        handleCreate : function() {
            this.setMessage("");
            var EmpireServ = Game.Services.Empire,
                data = this.designer.getSpeciesData();
            try {
                if ( ! this.designer.validateSpecies(data) ) {
                    return;
                }
            }
            catch (e) {
                this.setMessage(e);
                return;
            }
            delete data.affinity_total;
            EmpireServ.update_species({empire_id: this.empireId, params: data}, {
                success : function(o) {
                    YAHOO.log(o, "info", "CreateSpecies");
                    this._found();
                },
                failure : function(o){
                    this.setMessage(o.error.message);
                    return true;
                },
                scope:this
            });
        },
        handleCancel : function() {
            this.hide();
            this._empire.handleCancel();
        },

        _found : function() {
            Lacuna.Pulser.Show();
            var EmpireServ = Game.Services.Empire;
            EmpireServ.found({empire_id: this.empireId, api_key:Lib.ApiKey}, {
                success : function(o) {
                    YAHOO.log(o, "info", "CreateSpecies._found.success");
                    Lacuna.Pulser.Hide();
                    this.hide(); //hide species
                    this.fireEvent("onCreateSuccessful", o);
                },
                failure : function(o) {
                    this.setMessage(o.error.message);
                    return true;
                },
                scope:this
            });
        },
        _getHtml : function() {
            return [
                '    <div class="hd">Create Species</div>',
                '    <div class="bd">',
                '        <form name="speciesForm">',
                '            <div id="speciesCreateDesign"></div>',
                '            <div id="speciesMessage" class="hidden"></div>',
                '        </form>',
                '    </div>',
                '    <div class="ft"></div>'
            ].join('');
        },
        setMessage : function(str) {
            Dom.replaceClass(this.elMessage, Lib.Styles.HIDDEN, Lib.Styles.ALERT);
            this.elMessage.innerHTML = str;
        },
        show : function(empire) {
            this.empireId = empire;
            Game.OverlayManager.hideAll();
            this.Dialog.show();
            this.Dialog.center();
        },
        hide : function() {
            Dom.replaceClass(this.elMessage, Lib.Styles.ALERT, Lib.Styles.HIDDEN);
            this.Dialog.hide();
        }
    };
    YAHOO.lang.augmentProto(CreateSpecies, Util.EventProvider);

    Lacuna.CreateSpecies = CreateSpecies;
})();
YAHOO.register("createSpecies", YAHOO.lacuna.CreateSpecies, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/createSpecies.js","/")
},{"buffer":71,"oMfpAn":75}],46:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Essentia == "undefined" || !YAHOO.lacuna.Essentia) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Essentia = function() {
        this.createEvent("onRpc");
        
        this.id = "essentia";
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        Dom.addClass(container, "nofooter");
        
        this.Dialog = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"500px",
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            this.timeFood = Dom.get("essentialDetailsTimeFood");
            this.timeOre = Dom.get("essentialDetailsTimeOre");
            this.timeWater = Dom.get("essentialDetailsTimeWater");
            this.timeEnergy = Dom.get("essentialDetailsTimeEnergy");
            this.timeHappiness = Dom.get("essentialDetailsTimeHappiness");
            this.timeStorage = Dom.get("essentialDetailsTimeStorage");
            this.timeBuilding = Dom.get("essentialDetailsTimeBuilding");
            this.timeSpyTraining = Dom.get("essentialDetailsTimeSpyTraining");
            this.elCode = Dom.get("essentiaRedeemCode");
            this.elEssentiaAmount = Dom.get("essentiaAmount");
            this.tabView = new YAHOO.widget.TabView('essentiaTabs');
            Event.on(["essentiaBoostFood","essentiaBoostOre","essentiaBoostWater","essentiaBoostEnergy","essentiaBoostHappiness","essentiaBoostStorage","essentiaBoostBuilding","essentiaBoostSpyTraining"], "click", this.boost, this, true);
            Event.on('essentiaRedeemButton', 'click', this.redeemClick, this, true);
            Event.on('essentiaInvite', 'click', Lacuna.Invite.show, this, true);
            Event.on("essentiaPurchaseButton", "click", function(e){
                Event.stopEvent(e);
                window.open("/pay?session_id=" + Game.GetSession(), "essentiaPayment", "status=0,toolbar=0,location=0,menubar=0,resizable=1,scrollbars=1,height=550,width=600,directories=0");
            });
            Game.onTick.subscribe(function(){
                this.elEssentiaAmount.innerHTML = Game.EmpireData.essentia;
            }, this, true);
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);

        this.Dialog.hideEvent.subscribe(function(){
            if (this._interval) {
                window.clearInterval(this._interval);
                delete this._interval;
                this.timers = {};
            }
        }, this, true);
        this.timers = {};

        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
    };
    Essentia.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">Essentia</div>',
            '    <div class="bd">',
            '        <div class="essentiaAmount">Current Essentia: <span id="essentiaAmount"></span></div>',
            '        <div id="essentiaTabs" class="yui-navset">',
            '            <ul class="yui-nav">',
            '                <li><a href="#essentiaTabBoost"><em>Boosts</em></a></li>',
            '                <li><a href="#essentiaGetMore"><em>Get More Essentia</em></a></li>',
/*            '                <li><a href="#essentiaGiveEssentia"><em>Give Essentia</em></a></li>', */
            '            </ul>',
            '            <div class="yui-content">',
            '                <div id="essentiaTabBoost">',
            '                    <table>',
            '                        <tr><td colspan="4">&nbsp;</td><th>Expires</th></tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallFood" title="Food" src="',Lib.AssetUrl,'ui/s/food.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% food per hour</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostFood" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeFood"></td>',
            '                        </tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallOre" title="Ore" src="',Lib.AssetUrl,'ui/s/ore.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% ore per hour</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostOre" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeOre"></td>',
            '                        </tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallWater" title="Water" src="',Lib.AssetUrl,'ui/s/water.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% water per hour</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostWater" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeWater"></td>',
            '                        </tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallEnergy" title="Energy" src="',Lib.AssetUrl,'ui/s/energy.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% energy per hour</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostEnergy" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeEnergy"></td>',
            '                        </tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallHappiness" title="Happiness" src="',Lib.AssetUrl,'ui/s/happiness.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% happiness per hour</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostHappiness" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeHappiness"></td>',
            '                        </tr>',
            '                        <tr>',
            '                            <td class="essentiaDetailsImg"><img class="smallStorage" title="Storage" src="',Lib.AssetUrl,'ui/s/storage.png" /></td>',
            '                            <td class="essentiaDetailsText">+25% storage capacity</td>',
            '                            <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                            <td class="essentiaDetailsBoost"><button id="essentiaBoostStorage" type="button">Boost</button></td>',
            '                            <td class="essentiaDetailsTime" id="essentialDetailsTimeStorage"></td>',
            '                        </tr>',
            '                       <tr>',
            '                           <td class="essentiaDetailsImg"><img class="smallBuilding" title="Building" src="',Lib.AssetUrl,'ui/s/build.png" /></td>',
            '                           <td class="essentiaDetailsText">+25% build speed</td>',
            '                           <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                           <td class="essentiaDetailsBoost"><button id="essentiaBoostBuilding" type="button">Boost</button></td>',
            '                           <td class="essentiaDetailsTime" id="essentialDetailsTimeBuilding"></td>',
            '                       </tr>',
            '                       <tr>',
            '                           <td class="essentiaDetailsImg"><img class="smallSpy" title="Spy" src="',Lib.AssetUrl,'ui/s/spy.png" /></td>',
            '                           <td class="essentiaDetailsText">+50% spy training speed</td>',
            '                           <td class="essentiaDetailsCost">5 <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia" /></td>',
            '                           <td class="essentiaDetailsBoost"><button id="essentiaBoostSpyTraining" type="button">Boost</button></td>',
            '                           <td class="essentiaDetailsTime" id="essentialDetailsTimeSpyTraining"></td>',
            '                       </tr>',
            '                    </table>',
            '                </div>',
            '                <div id="essentiaGetMore">',
            '                    <b>Purchase Essentia for yourself.</b><br />',
            '                    <button id="essentiaPurchaseButton" type="button">Purchase Essentia</button>',
            '                    <hr />',
            '                    <div>',
            '                        <label><b>Redeem Essentia Code:</b><br /><input id="essentiaRedeemCode" /></label>',
            '                        <button id="essentiaRedeemButton" type="button">Redeem</button>',
            '                    </div>',
            '                    <hr />',
            '                    <div>',
            '                        <table>',
            '                            <tr><td><b>Invite your friends.</b></td></tr>',
            '                            <tr><td>Invite your friends to the game and you get free essentia. For every university level past 4 that they achieve, you\'ll get 5 essentia.</td></tr>',
            '                            <tr><td>That\'s up to 130 essentia per friend!</td></tr>',
            '                            <tr><td><button id="essentiaInvite" type="button">Invite Friends</button></td></tr>',
            '                        </table>',
            '                    </div>',
            '                </div>',
/*            '                <div id="essentiaGetMore">',
            '                    <p><b>Give the gift of Essentia.</b><br />Simply choose the amount you want, and pay for at it at PayPal with a credit card, or with your PayPal account. You\'ll then receive an email with an essentia code that can be redeemed in the game.</p>',
            '                    <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_blank">',
            '                    <input type="hidden" name="cmd" value="_s-xclick">',
            '                    <input type="hidden" name="hosted_button_id" value="X66S44RDHKKS8">',
            '                    <p style="margin: 10px 0;"><input type="hidden" name="on0" value="Buy an Essentia Code">Buy an Essentia Code: <select name="os0">',
            '                    <option value="30 Essentia">30 Essentia $2.99</option>',
            '                    <option value="100 Essentia">100 Essentia $5.99</option>',
            '                    <option value="200 Essentia">200 Essentia $9.99</option>',
            '                    <option value="600 Essentia">600 Essentia $24.99</option>',
            '                    <option value="1300 Essentia">1300 Essentia $49.99</option>',
            '                    </select></p>',
            '                    <input type="hidden" name="currency_code" value="USD">',
            '                    <input type="image" src="https://www.paypal.com/en_US/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">',
            '                    <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1">',
            '                    </form>',
            '                </div>', */
            '            </div>',
            '        </div>',
            '    </div>'
            ].join('');
        },
        
        show : function() {
            //this is called out of scope so make sure to pass the correct scope in
            Lacuna.Essentia.tabView.selectTab(0);
            Lacuna.Essentia.elCode.value = '';
            Game.Services.Empire.view_boosts({session_id:Game.GetSession("")},{
                success : function(o){
                    YAHOO.log(o, "info", "Essentia.show.success");
                    var Self = this;
                    this._interval = window.setInterval(function(){
                        Self.tick();
                    }, 1000);
                    this.populate(o.result);
                },
                scope:Lacuna.Essentia
            });
            Game.OverlayManager.hideAll();
            Lacuna.Essentia.elEssentiaAmount.innerHTML = Game.EmpireData.essentia;
            Lacuna.Essentia.Dialog.show();
        },
        hide : function() {
            this.Dialog.hide();
        },
        paymentFinished : function(amount) {
        },
        redeemClick : function (e) {
            Event.stopEvent(e);
            var code = this.elCode.value;
            var currentEssentia = Game.EmpireData.essentia;
            Lacuna.Pulser.Show();
            Game.Services.Empire.redeem_essentia_code({
                session_id:Game.GetSession(""),
                essentia_code: code
            },{
                success : function(o){
                    YAHOO.log(o, "info", "EssentiaRedeem.show.success");
                    Lacuna.Pulser.Hide();
                    var addedEssentia = o.result.status.empire.essentia - currentEssentia;
                    alert('Redeemed code for '+addedEssentia+' essentia.');
                    this.elCode.value = '';
                    this.fireEvent('onRpc', o.result);
                },
                scope:this
            });
        },
        boost : function(e) {
            var target = Event.getTarget(e);
            var func;
            switch(target.id) {
                case "essentiaBoostFood":
                    func = Game.Services.Empire.boost_food;
                    break;
                case "essentiaBoostOre":
                    func = Game.Services.Empire.boost_ore;
                    break;
                case "essentiaBoostWater":
                    func = Game.Services.Empire.boost_water;
                    break;
                case "essentiaBoostEnergy":
                    func = Game.Services.Empire.boost_energy;
                    break;
                case "essentiaBoostHappiness":
                    func = Game.Services.Empire.boost_happiness;
                    break;
                case "essentiaBoostStorage":
                    func = Game.Services.Empire.boost_storage;
                    break;
                case "essentiaBoostBuilding":
                    func = Game.Services.Empire.boost_building;
                    break;
                case "essentiaBoostSpyTraining":
                    func = Game.Services.Empire.boost_spy_training;
                    break;
            }
            if(func) {
                func({session_id:Game.GetSession("")},{
                    success : function(o){
                        YAHOO.log(o, "info", "Essentia.boost.success");
                        this.update(o.result);
                        this.fireEvent("onRpc", o.result);
                    },
                    scope:this
                });
            }
        },
        update : function(results) {
            if(results.food_boost) {
                this.updateTime(this.timeFood, results.food_boost);
            }
            else if(results.ore_boost) {
                this.updateTime(this.timeOre, results.ore_boost);
            }
            else if(results.water_boost) {
                this.updateTime(this.timeWater, results.water_boost);
            }
            else if(results.energy_boost) {
                this.updateTime(this.timeEnergy, results.energy_boost);
            }
            else if(results.happiness_boost) {
                this.updateTime(this.timeHappiness, results.happiness_boost);
            }
            else if(results.storage_boost) {
                this.updateTime(this.timeStorage, results.storage_boost);
            }
            else if(results.building_boost) {
                this.updateTime(this.timeBuilding, results.building_boost);
            }
            else if(results.spy_training_boost) {
                this.updateTime(this.timeSpyTraining, results.spy_training_boost);
            }
        },
        populate : function(results) {
            var boosts = results.boosts;
            
            this.updateTime(this.timeFood, boosts.food);
            this.updateTime(this.timeOre, boosts.ore);
            this.updateTime(this.timeWater, boosts.water);
            this.updateTime(this.timeEnergy, boosts.energy);
            this.updateTime(this.timeHappiness, boosts.happiness);
            this.updateTime(this.timeStorage, boosts.storage);
            this.updateTime(this.timeBuilding, boosts.building);
            this.updateTime(this.timeSpyTraining, boosts.spy_training);
        },
        updateTime : function(el, sDate) {
            var timers = this.timers;
            timers[el.id] = function() {
                if(sDate) {
                    var tTime = Lib.getTime(Lib.parseServerDate(sDate)),
                        cTime = Lib.getTime(Game.ServerData.time),
                        diffTime = tTime - cTime;
                    if(diffTime > 0) {
                        el.innerHTML = Lib.formatMillisecondTime(diffTime);
                        return;
                    }
                }
                delete timers[el.id];
                el.innerHTML = "&nbsp;";
            };
            timers[el.id]();
        },
        tick : function() {
            for (var key in this.timers){
                if (this.timers.hasOwnProperty(key)) {
                    this.timers[key]();
                }
            }
        }
    };

    Lang.augmentProto(Essentia, Util.EventProvider);
            
    Lacuna.Essentia = new Essentia();

})();
YAHOO.register("essentia", YAHOO.lacuna.Essentia, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/essentia.js","/")
},{"buffer":71,"oMfpAn":75}],47:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
(function() {
    // This converts url parameters into a usable object. I think it's only used
    // in the registration process when someone clicks a referral link (which
    // has a code in the url as a parameter.)
    var l = window.location;
    var query = {};
    var vars = l.hash.substring(1).split('&');
    if (vars.length > 0) {
        for (var i=0; i<vars.length; i++) {
            var pair = vars[i].split("=");
            query[pair[0]] = decodeURIComponent(pair[1]);
        }
    }
    if (window.history.replaceState) {
        window.history.replaceState({}, document.title, l.protocol+'//'+l.host+l.pathname+l.search);
    }
    else if (l.hash != '') {
        l.hash = '';
    }


    // Make sure the pulser is hidden.
    var p = document.getElementById("pulsing");
    if(p.className.indexOf('hidden') < 0) {
        p.className += ' hidden';
    }

    var loader = new YAHOO.util.YUILoader({
        base: require('path').join(process.cwd(), 'lib', 'yui2', 'build') + '/',
        filter: "RAW",
        allowRollup: false,
        combine: false
    });

    // List of YUI2 components that need to be loaded.
    loader.require([
        "autocomplete",
        "logger",
        "yahoo",
        "dom",
        "connection",
        "get",
        "json",
        "event",
        "container",
        "dragdrop",
        "slider",
        "animation",
        "selector",
        "event-delegate",
        "event-mouseenter",
        "paginator",
        "tabview",
        "menu"
    ]);

    loader.onSuccess = function(o) {
        // Require the new boyz on the street!
        window.$ = require('jquery');
        window._ = require('lodash');

        // RPC and core stuff
        require('js/smd');
        require('js/rpc');
        require('js/library');
        require('js/game');

        // Misc?
        require('js/about');
        require('js/announce');

        // Empire management and star map
        require('js/speciesDesigner');
        require('js/createSpecies');
        require('js/createEmpire');
        require('js/login');
        require('js/mapper');
        require('js/mapStar');

        // Buildings
        require('js/building');
        require('js/building/archaeology');
        require('js/building/blackHoleGenerator');
        require('js/building/capitol');
        require('js/building/development');
        require('js/building/distributionCenter');
        require('js/building/embassy');
        require('js/building/energyReserve');
        require('js/building/entertainment');
        require('js/building/foodReserve');
        require('js/building/geneticsLab');
        require('js/building/intelligence');
        require('js/building/intelTraining');
        require('js/building/libraryOfJith');
        require('js/building/mayhemTraining');
        require('js/building/mercenariesGuild');
        require('js/building/miningMinistry');
        require('js/building/missionCommand');
        require('js/building/network19');
        require('js/building/observatory');
        require('js/building/oracleOfAnid');
        require('js/building/oreStorage');
        require('js/building/park');
        require('js/building/planetaryCommand');
        require('js/building/politicsTraining');
        require('js/building/security');
        require('js/building/shipyard');
        require('js/building/spacePort');
        require('js/building/spaceStationLab');
        require('js/building/subspaceSupplyDepot');
        require('js/building/templeOfTheDrajilites');
        require('js/building/theftTraining');
        require('js/building/themePark');
        require('js/building/theDillonForge');
        require('js/building/tradeMinistry');
        require('js/building/transporter');
        require('js/building/wasteExchanger');
        require('js/building/wasteRecycling');
        require('js/building/waterStorage');
        require('js/module/parliament');
        require('js/module/policeStation');
        require('js/module/stationCommand');

        // Planet map
        require('js/mapPlanet');

        // Menu stuff
        require('js/textboxList');
        require('js/messaging');
        require('js/essentia');
        require('js/invite');
        require('js/profile');
        require('js/stats');
        require('js/pulse');
        require('js/info');
        require('js/notify');
        require('js/captcha');
        require('js/menu');


        // Start everything!
        YAHOO.widget.Logger.enableBrowserConsole();
        YAHOO.lacuna.Game.Start(query);
    };

    // Start the loading process.
    loader.insert();
})();

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_7f71a412.js","/")
},{"buffer":71,"jquery":76,"js/about":2,"js/announce":3,"js/building":4,"js/building/archaeology":5,"js/building/blackHoleGenerator":6,"js/building/capitol":7,"js/building/development":8,"js/building/distributionCenter":9,"js/building/embassy":10,"js/building/energyReserve":11,"js/building/entertainment":12,"js/building/foodReserve":13,"js/building/geneticsLab":14,"js/building/intelTraining":15,"js/building/intelligence":16,"js/building/libraryOfJith":17,"js/building/mayhemTraining":18,"js/building/mercenariesGuild":19,"js/building/miningMinistry":20,"js/building/missionCommand":21,"js/building/network19":22,"js/building/observatory":23,"js/building/oracleOfAnid":24,"js/building/oreStorage":25,"js/building/park":26,"js/building/planetaryCommand":27,"js/building/politicsTraining":28,"js/building/security":29,"js/building/shipyard":30,"js/building/spacePort":31,"js/building/spaceStationLab":32,"js/building/subspaceSupplyDepot":33,"js/building/templeOfTheDrajilites":34,"js/building/theDillonForge":35,"js/building/theftTraining":36,"js/building/themePark":37,"js/building/tradeMinistry":38,"js/building/transporter":39,"js/building/wasteExchanger":40,"js/building/wasteRecycling":41,"js/building/waterStorage":42,"js/captcha":43,"js/createEmpire":44,"js/createSpecies":45,"js/essentia":46,"js/game":48,"js/info":49,"js/invite":50,"js/library":51,"js/login":52,"js/mapPlanet":53,"js/mapStar":54,"js/mapper":55,"js/menu":56,"js/messaging":57,"js/module/parliament":58,"js/module/policeStation":59,"js/module/stationCommand":60,"js/notify":61,"js/profile":62,"js/pulse":63,"js/rpc":64,"js/smd":65,"js/speciesDesigner":66,"js/stats":67,"js/textboxList":68,"lodash":77,"oMfpAn":75,"path":74}],48:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");
if (typeof YAHOO.lacuna.Game == "undefined" || !YAHOO.lacuna.Game) {

(function(){
    var Util = YAHOO.util,
        Lang = YAHOO.lang,
        Cookie = Util.Cookie,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Lib = Lacuna.Library;

    var Game = {
        EmpireData : {},
        Resources : {},
        ServerData : {},
        Services : {},
        Timeout : 60000,
        HourMS : 3600000, //(60min * 60sec * 1000ms),
        onTick : new Util.CustomEvent("onTick"),
        OverlayManager : new YAHOO.widget.OverlayManager(),

        Start : function(query) {
            var l = window.location;
            Game.RPCBase = window.lacuna_rpc_base_url || l.protocol + '//' + l.host + '/';
            Game.domain = l.hostname || "lacunaexpanse.com";

            var ie = YAHOO.env.ua.ie, // 7 or later
                opera = YAHOO.env.ua.opera, // 9.65 or later
                firefox = YAHOO.env.ua.gecko, // 1.9 = 3.0
                webkit = YAHOO.env.ua.webkit, // 523 = Safari 3
                oldBrowserOkay = Game.GetCookieSettings("oldBrowserOkay","0");
            if(oldBrowserOkay == 0 && (
                    (ie > 0 && ie < 7) ||
                    (opera > 0 && opera < 9.65) ||
                    (firefox > 0 && firefox < 1.9) ||
                    (webkit > 0 && webkit < 523)
                )) {
                if (confirm("Your browser is quite old and some game functions may not work properly. Are you certain you want to continue?")) {
                    Game.SetCookieSettings("oldBrowserOkay", "1");
                }
                else {
                    window.location = 'http://www.lacunaexpanse.com';
                }
            }

            if(!Lacuna.Pulser) {
                Lacuna.Pulser = new Lacuna.Pulse();
            }
            Lacuna.Pulser.Show();
            if (!query) {
                query = {};
            }

            //add overlay manager functionality
            Game.OverlayManager.hideAllBut = function(id) {
                var overlays = this.overlays,
                    n = overlays.length,
                    i;

                for (i = n - 1; i >= 0; i--) {
                    if(overlays[i].id != id) {
                        overlays[i].hide();
                    }
                }
            };
            Game.escListener = new Util.KeyListener(document, { keys:27 }, { fn:Game.OverlayManager.hideAll, scope:Game.OverlayManager, correctScope:true } );

            //get resources right away since they don't depend on anything
            Game.GetResources();
            Game.PreloadUI();

            Game.Services = Game.InitServices(YAHOO.lacuna.SMD.Services);

            var session = Game.GetSession();
            if (query.referral) {
                //if they came from someelse
                var now = new Date();
                Cookie.set("lacunaReferral", query.referral, {
                    domain: Game.domain,
                    expires: new Date(now.setFullYear(now.getFullYear() + 1))
                });
            }

            if (query.reset_password) {
                Game.InitLogin();
                Game.LoginDialog.resetPassword(query.reset_password);
                return;
            }
            if (query.facebook_uid) {
                Game.InitLogin();
                Game.LoginDialog.initEmpireCreator();
                Game.EmpireCreator.facebookReturn(query.facebook_uid, query.facebook_token, query.facebook_name);
                return;
            }
            else if (query.session_id) {
                Game.SetSession(query.session_id);
            }
            else if (query.empire_id) {
                Game.InitLogin();
                Game.LoginDialog.initEmpireCreator();
                Game.SpeciesCreator.show(query.empire_id);
                return;
            }
            else if (!session) {
                Game.DoLogin();
                return;
            }
            //Run rest of UI since we're logged in
            Game.GetStatus({
                success:Game.Run,
                failure:function(o){
                    Game.Reset();
                    Game.DoLogin(o.error);
                    return true;
                }
            });
        },
        Failure : function(o, retry, fail) {
            // session expired
            if(o.error.code == 1006) {
                Game.Reset();
                Game.DoLogin(o.error);
            }
            // Game over
            else if(o.error.code == 1200) {
                alert(o.error.message);
                Game.Reset();
                window.location = o.error.data;
            }
            else if(o.error.code == 1016) {
                Lacuna.Captcha.show(retry, function(){ fail(true); });
            }
            // Internal error
            else if(o.error.code == -32603) {
                Game.QuickDialog({
                    width: "500px",
                    text: ['<p>An internal error has occurred.  Please report this on <a target="_blank" href="http://community.lacunaexpanse.com/forums/support">the support forums</a>, and include the data below.</p>',
                        '<textarea style="width: 100%; height: 300px;" id="internalErrorMessageText" readonly="readonly" onclick="this.select()"></textarea>'
                        ].join(''),
                    buttons: [
                        { text:"Close", handler:function() { this.hide(); } }
                    ]
                }, function() {
                    Dom.get('internalErrorMessageText').value = o.error.data;
                });
            }
            else {
                fail();
            }
        },
        InitLogin : function(error) {
            if(!Lacuna.Game.LoginDialog) {
                Lacuna.Game.LoginDialog = new Lacuna.Login();
                Lacuna.Game.LoginDialog.subscribe("onLoginSuccessful",function(oArgs) {
                    var result = oArgs.result;
                    //remember session
                    Game.SetSession(result.session_id);

                    Game.RemoveCookie("locationId");
                    Game.RemoveCookie("locationView");

                    //store empire data
                    Lacuna.Game.ProcessStatus(result.status);
                    //Run rest of UI now that we're logged in
                    Lacuna.Game.Run();
                    if (result.welcome_message_id) {
                        Game.QuickDialog({
                            width: "400px",
                            text: ['Welcome to the Lacuna Expanse.  It is recommended that you play through the in game tutorial to familiarize yourself with the game, and to get some free resources to build up your empire.',
                                '<p>If you choose to skip the tutorial now you may find it by clicking <img src="',Lib.AssetUrl,'ui/s/inbox.png" title="Inbox" style="width:19px;height:22px;vertical-align:middle;margin:-5px 0 -4px -2px" /> in the upper left of the interface and find the message with the subject `Welcome`.</p>',
                                '<p>For some extra help, look to the upper right of the interface for the <img src="',Lib.AssetUrl,'ui/s/tutorial.png" title="Interface Tutorial" style="width:19px;height:22px;vertical-align:middle;margin-left:-3px" /> button.</p>',
                                '<p>Thanks for playing!</p>'].join(''),
                            buttons: [
                                { text:"View Tutorial", handler:function() {
                                    this.hide();
                                    Lacuna.Messaging.showMessage(result.welcome_message_id);
                                }, isDefault:true },
                                { text:"Skip Tutorial",  handler:function() {
                                    this.hide();
                                } } ]
                        });
                    }
                });
            }
        },
        DoLogin : function(error) {
            Dom.setStyle(document.body, 'background', 'url("'+Lib.AssetUrl+'star_system/field.png") repeat scroll 0 0 black');
            this.InitLogin();
            //Game.OverlayManager.hideAll(); //don't need this.  the show already hides everything if it needs to
            Lacuna.Game.LoginDialog.show(error);
            Lacuna.Menu.hide();
            Lacuna.Pulser.Hide();
        },
        Run : function() {
            //create menus (or update if already created)
            Lacuna.Menu.create();
            //set our interval going for resource calcs since Logout clears it
            Game.recTime = Date.now();
            Game.isRunning = 1;
            //Game.recInt = setInterval(Game.Tick, 1000);
            /* possible new pattern for game loop*/
            (function GameLoop(){
                if(Game.isRunning) {
                    Game.Tick();
                    setTimeout(GameLoop, 1000);
                }
            })();
            Game.planetRefreshInterval = setInterval(function(){
                var BodyServ = Game.Services.Body,
                    session = Game.GetSession(),
                    body = Game.GetCurrentPlanet();
                BodyServ.get_status({session_id: session, body_id: body.id},{
                    success:Game.onRpc,
                    failure:function(o){return true;}
                });
            }, 10 * 60 * 1000);

            //chat system
            Game.InitChat();
            //init event subscribtions if we need to
            Game.InitEvents();
            //enable esc handler
            Game.escListener.enable();

            document.title = 'Lacuna Expanse - ' + Game.EmpireData.name;

            //load the correct screen
            var locationId = Game.GetCookie("locationId"),
                locationView = Game.GetCookie("locationView");
            if(!locationId) {
                Lacuna.Menu.PlanetVisible();
                Lacuna.MapPlanet.Load(Game.EmpireData.current_planet_id || Game.EmpireData.home_planet_id);
            }
            else if(locationView == "planet") {
                Game.EmpireData.current_planet_id = locationId;
                Lacuna.MapStar.MapVisible(false);
                Lacuna.MapPlanet.MapVisible(true);
                Lacuna.Menu.PlanetVisible();
                Lacuna.MapPlanet.Load(locationId);
            }
            else {
                Lacuna.MapStar.MapVisible(true);
                Lacuna.MapPlanet.MapVisible(false);
                Lacuna.Menu.StarVisible();
                Lacuna.MapStar.Load();
            }
            Lacuna.Pulser.Hide();
        },
        InitChat : function() {
            // One day, this will do something interesting.
        },
        InitEvents : _.once(function() {
            //this will be called on the first load and create menu
            Lacuna.MapStar.subscribe("onMapRpc", Game.onRpc);
            Lacuna.MapStar.subscribe("onChangeToPlanetView", Game.onChangeToPlanetView);

            Lacuna.MapPlanet.subscribe("onMapRpc", Game.onRpc);

            Lacuna.Menu.subscribe("onChangeClick", Game.onChangeClick);
            Lacuna.Menu.subscribe("onInboxClick", function() {
                Game.OverlayManager.hideAll();
                Lacuna.Messaging.show();
            });

            Lacuna.Menu.subscribe("onDestructClick", Game.onDestructClick);
            Lacuna.Messaging.subscribe("onRpc", Game.onRpc);
            Lacuna.Essentia.subscribe("onRpc", Game.onRpc);
            Lacuna.Invite.subscribe("onRpc", Game.onRpc);
            Lacuna.Profile.subscribe("onRpc", Game.onRpc);

            Event.on(window, "resize", function (e) {
                //taken from YUI Overlay
                if (YAHOO.env.ua.ie) {
                    if (!window.resizeEnd) {
                        window.resizeEnd = -1;
                    }

                    clearTimeout(window.resizeEnd);

                    window.resizeEnd = setTimeout(function () {
                        Lacuna.Game.Resize();
                    }, 100);
                } else {
                    Lacuna.Game.Resize();
                }
            });
        }),
        InitServices : function(smd) {
            var serviceOut = {};
            var successFunc = function(){
                for (var methodName in this) {
                    if (this.hasOwnProperty(methodName) && Lang.isFunction(this[methodName])) {
                        var method = this[methodName];
                        this[methodName] = Game.WrappedService(method, sKey+'.'+methodName);
                    }
                }
            };
            for(var sKey in smd) {
                if(smd.hasOwnProperty(sKey)) {
                    var oSmd = smd[sKey];
                    if(oSmd.services) {
                        serviceOut[sKey] = new YAHOO.rpc.Service(oSmd, {success:successFunc }, Game.RPCBase);
                    }
                    else {
                        serviceOut[sKey] = Game.InitServices(oSmd);
                    }
                }
            }
            return serviceOut;
        },
        WrappedService : function(method, name) {
            var logNS = 'Game.RPC.'+name+'.failure';
            var func = function(params, origOpts) {
                var retry = function(){
                    var opts = { retry : 0 };
                    YAHOO.lang.augmentObject(opts, origOpts, true);
                    opts.retry++;
                    func(params, opts);
                };
                var opts = {
                    failure : function(o) {
                        var self = this;
                        var failure = function(silent){
                            if(Lang.isFunction(origOpts.failure)) {
                                if (origOpts.failure.call(self, o)) {
                                    return;
                                }
                            }
                            if (! silent) {
                                alert(o.error.message);
                            }
                        };
                        YAHOO.log(o, "error", logNS);
                        Lacuna.Pulser.Hide();
                        Game.Failure(o, retry, failure);
                    }
                };
                YAHOO.lang.augmentObject(opts, origOpts);
                if (!('timeout' in opts)) {
                    opts.timeout = Game.Timeout;
                }
                method(params, opts);
            };
            return func;
        },
        InitTips : function() {
            if(!Game.Resources.tips && !Game.Resources.complete) {
                setTimeout(Game.InitTips, 10);
                return;
            }

            var showTips = 1 - Game.GetCookieSettings("hideTips", "0") * 1;
            if(showTips == 1) {
                var tipCount = Game.Resources.tips.length,
                    tipNum = Game.GetCookieSettings("tipNum", -1),
                    showTip = function(dialog, change) {
                        tipNum = (tipNum + change + tipCount) % tipCount;
                        var tip = Game.Resources.tips[tipNum];
                        dialog.setBody(tip);
                        Game.SetCookieSettings("tipNum", tipNum);
                    };
                Game.QuickDialog({
                    width: "400px",
                    buttons: [
                        { text:"< Previous", handler:function() { showTip(dialog, -1); } },
                        { text:"Next >", handler:function() { showTip(dialog, 1); } },
                        { text:"Close", handler:function() { this.hide(); }, isDefault:true }
                    ]
                }, function() {
                    this.setHeader('Tips');
                    showTip(this, 1);
                    var label = document.createElement('label');
                    Dom.setStyle(label, 'float', 'left');
                    label.innerHTML = '<input id="showTips" type="checkbox" checked="checked" /> Show tips at login';
                    this.footer.insertBefore(label, this.footer.firstChild);
                }, function() {
                    if(Dom.get('showTips').checked) {
                        Game.RemoveCookieSettings("hideTips");
                    }
                    else {
                        Game.SetCookieSettings("hideTips", "1");
                    }
                });
            }
        },
        PreloadUI : function() {
            var images = Lib.UIImages;
            for (var i = 0; i < images.length; i++) {
                var url = Lib.AssetUrl + images[i];
                var img = new Image();
                img.src = url;
            }
        },
        QuickDialog : function (config, afterRender, afterHide) {
            var container = document.createElement('div');
            if (config.id) {
                container.id = config.id;
                delete config.id;
            }
            YAHOO.lang.augmentObject(config, {
                fixedcenter: true,
                visible: false,
                draggable: false,
                constraintoviewport: true,
                modal: true,
                close: false,
                zindex: 20000
            });
            Dom.addClass(container, 'quick-dialog');
            document.body.insertBefore(container, document.body.firstChild);
            var dialog = new YAHOO.widget.SimpleDialog(container, config);
            dialog.renderEvent.subscribe(function() {
                if (afterRender) { afterRender.call(this); }
                this.show();
            });
            dialog.hideEvent.subscribe(function() {
                if (afterHide) { afterHide.call(this); }
                // let the current process complete before destroying
                setTimeout(function(){
                    dialog.destroy();
                },1);
            });
            dialog.render();
            Game.OverlayManager.register(dialog);
        },

        onChangeToPlanetView : function(planetId) {
            YAHOO.log(planetId, "info", "onChangeToPlanetView");
            Game.PlanetJump(Game.EmpireData.planets[planetId]);
        },
        onRpc : function(oResult){
            Lacuna.Game.ProcessStatus(oResult.status);
        },
        onChangeClick : function() {
            YAHOO.log("onChangeClick", "debug", "Game");
            Game.OverlayManager.hideAll();
            if(Lacuna.MapStar.IsVisible() || Lacuna.Menu.IsStarVisible()) {
                Game.PlanetJump(Game.GetCurrentPlanet());
            }
            else if(Lacuna.MapPlanet.IsVisible() || Lacuna.Menu.IsPlanetVisible()) {
                Lacuna.MapPlanet.MapVisible(false);
                Lacuna.MapStar.MapVisible(true);
                Lacuna.Menu.StarVisible();
                Lacuna.MapStar.Load();
            }
        },
        onDestructClick : function() {
            YAHOO.log("onDestructClick", "debug", "Game");

            var ED = Game.EmpireData,
                EmpireServ = Game.Services.Empire,
                session = Game.GetSession(),
                func;
            if(ED.self_destruct_active*1 === 1) {
                func = EmpireServ.disable_self_destruct;
            }
            else if (confirm("Are you certain you want to enable self destuct?  If enabled, your empire will be deleted after 24 hours.")) {
                func = EmpireServ.enable_self_destruct;
            }
            else {
                return;
            }

            Lacuna.Pulser.Show();
            func({session_id:session},{
                success : function(o){
                    YAHOO.log(o, 'info', 'Game.onDestructClick.success');
                    Game.ProcessStatus(o.result.status);
                    Lacuna.Pulser.Hide();
                }
            });
        },

        ProcessStatus : function(status) {
            if(status) {
                var doMenuUpdate;

                if(status.server) {
                    //add everything from status empire to game empire
                    Lang.augmentObject(Game.ServerData, status.server, true);
                    Game.ServerData.time = Lib.parseServerDate(Game.ServerData.time);

                    if(status.server.announcement) {
                        Lacuna.Announce.show();
                    }
                }
                if(status.empire) {
                    //convert to numbers
                    status.empire.has_new_messages *= 1;
                    if(status.empire.happiness) {
                        status.empire.happiness *= 1;
                        status.empire.happiness_hour *= 1;
                    }

                    if(!Lacuna.Game.EmpireData.planets){
                        Lacuna.Game.EmpireData.planets = {};
                    }
                    if(!Lacuna.Game.EmpireData.planetsByName){
                        Lacuna.Game.EmpireData.planetsByName = {};
                    }
                    for(var pKey in status.empire.planets) {
                        if(status.empire.planets.hasOwnProperty(pKey)){
                            var ePlanet = Lacuna.Game.EmpireData.planets[pKey];
                            if(!ePlanet) {
                                Lacuna.Game.EmpireData.planets[pKey] = {
                                    id: pKey,
                                    name: status.empire.planets[pKey],
                                    star_name: "",
                                    image: undefined,
                                    energy_capacity: 0,
                                    energy_hour: 0,
                                    energy_stored: 0,
                                    food_capacity: 0,
                                    food_hour: 0,
                                    food_stored: 0,
                                    happiness: 0,
                                    happiness_hour: 0,
                                    ore_capacity: 0,
                                    ore_hour: 0,
                                    ore_stored: 0,
                                    waste_capacity: 0,
                                    waste_hour: 0,
                                    waste_stored: 0,
                                    water_capacity: 0,
                                    water_hour: 0,
                                    water_stored: 0
                                };
                            }
                            else {
                                Lacuna.Game.EmpireData.planets[pKey].name = status.empire.planets[pKey];
                            }
                            Lacuna.Game.EmpireData.planetsByName[status.empire.planets[pKey]] = Lacuna.Game.EmpireData.planets[pKey];
                            doMenuUpdate = true;
                        }
                    }
                    delete status.empire.planets; //delete this so it doesn't overwrite the desired structure

                    //add everything from status empire to game empire
                    Lang.augmentObject(Lacuna.Game.EmpireData, status.empire, true);

                    if(!doMenuUpdate) {
                        Lacuna.Menu.updateTick();
                    }

                    /*if(status.empire.full_status_update_required == 1) {
                        Lacuna.Game.GetStatus();
                    }*/
                }
                if(status.body) {
                    var planet = status.body,
                        p = Game.EmpireData.planets[planet.id];

                    if(p) {
                        Lang.augmentObject(p, planet, true);

                        p.energy_capacity *= 1;
                        p.energy_hour *= 1;
                        p.energy_stored *= 1;
                        p.food_capacity *= 1;
                        p.food_hour *= 1;
                        p.food_stored *= 1;
                        p.happiness *= 1;
                        p.happiness_hour *= 1;
                        p.ore_capacity *= 1;
                        p.ore_hour *= 1;
                        p.ore_stored *= 1;
                        p.waste_capacity *= 1;
                        p.waste_hour *= 1;
                        p.waste_stored *= 1;
                        p.water_capacity *= 1;
                        p.water_hour *= 1;
                        p.water_stored *= 1;

                        doMenuUpdate = true;
                    }

                    if(planet.needs_surface_refresh && planet.needs_surface_refresh*1 === 1) {
                        Lacuna.MapPlanet.Refresh();
                    }

                    Lacuna.Notify.Load(planet);
                }
                if(doMenuUpdate) {
                    Lacuna.Menu.update();
                }
            }
        },
        GetStatus : function(callback) {
            var EmpireServ = Game.Services.Empire,
                session = Game.GetSession();
            EmpireServ.get_status({session_id:session}, {
                success : function(o) {
                    YAHOO.log(o, "info", "Game.GetStatus.success");
                    Lacuna.Game.ProcessStatus(o.result);
                    if(callback && callback.success) {
                        return callback.success.call(this);
                    }
                },
                failure : function(o) {
                    if(callback && callback.failure) {
                        return callback.failure.call(this, o);
                    }
                },
                scope:callback && callback.scope || this
            });
        },
        GetSession : function(replace) {
            if (!this._session) {
                this._session = Game.GetCookie('session');
            }
            return this._session || replace;
        },
        SetSession : function(session) {
            if (session) {
                Game.SetCookie('session', session);
                Game._session = session;
                Game.InitTips();
            }
            else {
                Game.RemoveCookie('session');
                delete Game._session;
            }
        },
        GetCurrentPlanet : function() {
            var ED = Game.EmpireData,
                id = ED.current_planet_id || ED.home_planet_id;
            return ED.planets[id];
        },
        GetSize : function() {
            var content = document.getElementById("content"),
                width = content.offsetWidth,
                height = document.documentElement.clientHeight - document.getElementById("header").offsetHeight - document.getElementById("footer").offsetHeight;
            return {w:width,h:height};
        },
        Resize : function() {
            if(Lacuna.MapStar.IsVisible()) {
                Lacuna.MapStar.Resize();
            }
            else if(Lacuna.MapPlanet.IsVisible()) {
                Lacuna.MapPlanet.Resize();
            }
        },
        StarJump : function(star) {
            YAHOO.log(star, "debug", "StarJump");
            Game.OverlayManager.hideAll();
            Lacuna.MapPlanet.MapVisible(false);
            Lacuna.MapStar.MapVisible(true);
            Lacuna.Menu.StarVisible();
            Lacuna.MapStar.Jump(star.x*1, star.y*1);
        },
        PlanetJump : function(planet) {
            if(!planet) {
                //try to find home planet
                planet = Game.EmpireData.planets[Game.EmpireData.home_planet_id];
            }
            //make sure we have found a planet to look at
            if(planet) {
                Game.OverlayManager.hideAll();
                Game.EmpireData.current_planet_id = planet.id;
                Lacuna.Menu.PlanetMenu.update();
                Game.SetLocation(planet.id, Lib.View.PLANET);

                Lacuna.MapStar.MapVisible(false);
                Lacuna.Menu.PlanetVisible();
                Lacuna.MapPlanet.Load(planet.id, true);
            }
        },
        PlanetChange : function(planet) {
            if(!planet) {
                //try to find home planet
                planet = Game.EmpireData.planets[Game.EmpireData.home_planet_id];
            }
            //make sure we have found a planet to look at
            if(planet) {
                Game.OverlayManager.hideAll();
                Game.EmpireData.current_planet_id = planet.id;
                Lacuna.Menu.PlanetMenu.update();
                Game.SetLocation(planet.id, Lib.View.PLANET);

                Lacuna.MapPlanet.Load(planet.id, false, true);
            }
        },

        GetResources : function() {
            var newResources = require('data/resources.json');
            Game.Resources = newResources;
            Game.Resources.complete = 1;
        },
        GetBuildingDesc : function(url) {
            if(Game.Resources && Game.Resources.buildings) {
                var desc = Game.Resources.buildings[url];
                if(desc) {
                    return [desc.description,' <a href="',desc.wiki,'" target="_blank">More Information on Wiki</a>'].join('');
                }
                else {
                    return '';
                }
            }
        },
        GetShipDesc : function(type) {
            if(Game.Resources && Game.Resources.ships) {
                var desc = Game.Resources.ships[type];
                if(desc) {
                    return [desc.description,' <a href="',desc.wiki,'" target="_blank">More Information on Wiki</a>'].join('');
                }
            }
        },
        GetContainerEffect : function(effect) {
            if(Game.GetCookieSettings("disableDialogAnim","0") == "1") {
                return;
            }
            else {
                return effect || {effect:YAHOO.widget.ContainerEffect.FADE,duration:0.5};
            }
        },

        Logout : function() {
            Lacuna.Pulser.Show();

            var EmpireServ = Game.Services.Empire,
                session = Game.GetSession();

            EmpireServ.logout({session_id:session},{
                success : function(o){
                    YAHOO.log(o, 'info', 'Game.Logout.success');
                    Game.Reset();
                    Game.DoLogin();
                    Lacuna.Pulser.Hide();
                }
            });
        },
        Reset : function() {
            delete Game.isRunning;
            clearInterval(Game.planetRefreshInterval);
            delete Game.planetRefreshInterval;
            //disable esc handler
            Game.escListener.disable();

            document.title = 'Lacuna Expanse';

            var logoutCommand = Game.chatLogout;

            Game.RemoveCookie("locationId");
            Game.RemoveCookie("locationView");

            Game.SetSession();
            Game.EmpireData = {};
            Lacuna.Stats.Reset();
            Lacuna.MapStar.Reset();
            Lacuna.MapPlanet.Reset();
            Lacuna.Notify.Hide();

            //do this last since we don't control the code
            if(logoutCommand && window.env_executeCommand) {
                YAHOO.log("Chat logout of session", "debug", "Reset");
                window.env_executeCommand(logoutCommand);
            }
        },

        //Cookie helpers functions
        GetCookie : function(key, defaultValue) {
            var item = Lib.db.getItem(key);
            return item || defaultValue;
        },
        SetCookie : function(key, value) {
            Lib.db.setItem(key, value);
        },
        RemoveCookie : function(key) {
            Lib.db.removeItem(key);
        },
        RemoveAllCookies : function() {
            Lib.db.clear();
        },
        SetLocation : function(id, view) {
            Game.SetCookie("locationId", id);
            Game.SetCookie("locationView", view);
        },

        //using a more permanent cookie
        GetCookieSettings : function(key, defaultValue) {
            var item = Lib.settings.getItem(key);
            return item || defaultValue;
        },
        SetCookieSettings : function(key, value) {
            Lib.settings.setItem(key, value);
        },
        RemoveCookieSettings : function(key) {
            Lib.settings.clear();
        },

        //Tick related
        Tick : function() {
            var ED = Lacuna.Game.EmpireData,
                SD = Lacuna.Game.ServerData,
                dt = (new Date()).getTime(),
                diff = dt - Lacuna.Game.recTime;
            Lacuna.Game.recTime = dt;
            SD.time = new Date(Lib.getTime(SD.time) + diff);

            var ratio = (diff / Lacuna.Game.HourMS),
                updateMenu = true,
                totalWasteOverage = 0;

            for(var pKey in ED.planets) {
                if(ED.planets.hasOwnProperty(pKey)){
                    var planet = ED.planets[pKey],
                        isNotStation = planet.type != "space station";
                    if(planet.energy_stored < planet.energy_capacity){
                        planet.energy_stored += planet.energy_hour * ratio;
                        if(planet.energy_stored > planet.energy_capacity) {
                            planet.energy_stored = planet.energy_capacity;
                        }
                        else if(planet.energy_stored < 0) {
                            if(isNotStation) { planet.happiness += planet.energy_stored; }
                            planet.energy_stored = 0;
                        }
                    }
                    if(planet.food_stored < planet.food_capacity){
                        planet.food_stored += planet.food_hour * ratio;
                        if(planet.food_stored > planet.food_capacity) {
                            planet.food_stored = planet.food_capacity;
                        }
                        else if(planet.food_stored < 0) {
                            if(isNotStation) { planet.happiness += planet.food_stored; }
                            planet.food_stored = 0;
                        }
                    }
                    if(planet.ore_stored < planet.ore_capacity){
                        planet.ore_stored += planet.ore_hour * ratio;
                        if(planet.ore_stored > planet.ore_capacity) {
                            planet.ore_stored = planet.ore_capacity;
                        }
                        else if(planet.ore_stored < 0) {
                            if(isNotStation) { planet.happiness += planet.ore_stored; }
                            planet.ore_stored = 0;
                        }
                    }
                    if(planet.water_stored < planet.water_capacity){
                        planet.water_stored += planet.water_hour * ratio;
                        if(planet.water_stored > planet.water_capacity) {
                            planet.water_stored = planet.water_capacity;
                        }
                        else if(planet.water_stored < 0) {
                            if(isNotStation) { planet.happiness += planet.water_stored; }
                            planet.water_stored = 0;
                        }
                    }

                    var wasteOverage = 0;
                    if(planet.waste_stored < planet.waste_capacity){
                        planet.waste_stored += planet.waste_hour * ratio;
                        if(planet.waste_stored > planet.waste_capacity) {
                            wasteOverage = planet.waste_stored - planet.waste_capacity;
                            planet.waste_stored = planet.waste_capacity;
                        }
                        else if(planet.waste_stored < 0) {
                            if(isNotStation) { planet.happiness += planet.waste_stored; }
                            planet.waste_stored = 0;
                        }
                    }
                    else {
                        wasteOverage = planet.waste_hour * ratio;
                    }

                    if(isNotStation) {
                        planet.happiness += (planet.happiness_hour * ratio) - wasteOverage;
                        if(planet.happiness < 0 && ED.is_isolationist == "1") {
                            planet.happiness = 0;
                        }

                        //totalWasteOverage += wasteOverage;
                    }

                }
            }

            if(updateMenu) {
                Lacuna.Menu.updateTick();
            }

            Game.onTick.fire(diff);
        },
        QueueAdd : function(id, type, ms) {
            if(!id || !type || !ms) {
                return;
            }

            if(!Game.queue) {
                Game.queue = {};
            }
            if(!Game.queue[type]) {
                Game.queue[type] = {};
            }
            Game.queue[type][id] = ms;
        },
        QueueProcess : function(e, oArgs) {
            //only do anything if the queue actually has data
            if(Game.queue) {
                var toFire = {},
                    tickMS = oArgs[0];
                for(var type in Game.queue) {
                    if(Game.queue.hasOwnProperty(type)) {
                        var qt = Game.queue[type];
                        for(var id in qt) {
                            if(qt.hasOwnProperty(id)) {
                                var ms = qt[id] - tickMS;
                                if(ms <= 0) {
                                    toFire[id] = type;
                                }
                                else {
                                    qt[id] = ms;
                                    Game.QueueTick(type, id, ms);
                                }
                            }
                        }
                    }
                }

                var fId;
                for(fId in toFire) {
                    if(toFire.hasOwnProperty(fId)) {
                        delete Game.queue[toFire[fId]][fId];
                        Game.QueueFire(toFire[fId], fId);
                    }
                }

            }
        },
        QueueTick : function(type, id, ms) {
            switch(type) {
                case Lib.QueueTypes.PLANET:
                    Lacuna.MapPlanet.QueueTick(id, ms);
                    break;
                case Lib.QueueTypes.STAR:
                    break;
                case Lib.QueueTypes.SYSTEM:
                    break;
                default:
                    break;
            }
        },
        QueueFire : function(type, id) {
            YAHOO.log(arguments, "debug", "Game.QueueFire");
            switch(type) {
                case Lib.QueueTypes.PLANET:
                    Lacuna.MapPlanet.ReLoadTile(id);
                    break;
                case Lib.QueueTypes.STAR:
                    break;
                case Lib.QueueTypes.SYSTEM:
                    break;
                default:
                    YAHOO.log("type unknown", "debug", "Game.QueueFire");
                    break;
            }
        },
        QueueResetPlanet : function() {
            if(Game.queue && Game.queue[Lib.QueueTypes.PLANET]) {
                var queue = Game.queue[Lib.QueueTypes.PLANET];
                for(var id in queue) {
                    if(queue.hasOwnProperty(id)) {
                        queue[id] = 0;
                    }
                }
            }
        },
        onScroll : (function(){
            var evName;
            var func;
            var pixelsPerLine = 10;
            var ua = navigator.userAgent;
            var safari5 = ua.match(/\bSafari\//) && ua.match(/\bVersion\/5/);
            var isEventSupported = (function() {
                var TAGNAMES = {
                    'select':'input',
                    'change':'input',
                    'submit':'form',
                    'reset':'form',
                    'error':'img',
                    'load':'img',
                    'abort':'img'
                };
                var cache = {};
                function isEventSupported(eventName) {
                    var el = document.createElement(TAGNAMES[eventName] || 'div');
                    eventName = 'on' + eventName;
                    if (eventName in cache) {
                        return cache[eventName];
                    }
                    var isSupported = (eventName in el);
                    if (!isSupported) {
                        el.setAttribute(eventName, 'return;');
                        isSupported = typeof el[eventName] == 'function';
                    }
                    cache[eventName] = isSupported;
                    el = null;
                    return isSupported;
                }
                return isEventSupported;
            })();
            if (isEventSupported('mousewheel')) {
                return function(el, fn, obj, context) {
                    Event.on(el, 'mousewheel', function(e, o) {
                        var xDelta = 'wheelDeltaX' in e ? e.wheelDeltaX : 0;
                        var yDelta = 'wheelDeltaY' in e ? e.wheelDeltaY : e.wheelDelta;
                        // chrome/safari 4 give pixels
                        // safari 5 gives pixels * 120
                        if (safari5) {
                            xDelta /= 120;
                            yDelta /= 120;
                        }
                        fn.call(this, e, xDelta, yDelta, o);
                    }, obj, context);
                };
            }
            // not possible to feature detect this, have to just use the version number
            else if (YAHOO.env.ua.gecko >= 1.9 && ! ua.match(/\brv:1\.9\.0/)) {
                return function(el, fn, obj, context) {
                    Event.on(el, 'MozMousePixelScroll', function(e, o) {
                        var xAxis = e.axis == e.HORIZONTAL_AXIS;
                        var xDelta = xAxis ? -e.detail : 0;
                        var yDelta = xAxis ? 0 : -e.detail;
                        fn.call(this, e, xDelta, yDelta, o);
                    }, obj, context);
                };
            }
            else {
                return function(el, fn, obj, context) {
                    Event.on(el, 'DOMMouseScroll', function(e, o) {
                        var xAxis = 'axis' in e && e.axis == e.HORIZONTAL_AXIS;
                        // this event gets 'lines'
                        var xDelta = xAxis ? -e.detail * pixelsPerLine : 0;
                        var yDelta = xAxis ? 0 : -e.detail * pixelsPerLine;
                        fn.call(this, e, xDelta, yDelta, o);
                    }, obj, context);
                };
            }
        })()
    };

    YAHOO.lacuna.Game = Game;
})();
YAHOO.register("game", YAHOO.lacuna.Game, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/game.js","/")
},{"buffer":71,"data/resources.json":1,"oMfpAn":75}],49:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");


if (typeof YAHOO.lacuna.Info == "undefined" || !YAHOO.lacuna.Info) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Alliance = function(){
        this.id = "infoAlliance";
    };
    Alliance.prototype = {
        _createPanel : function() {
            if(!this.Panel) {
                var container = document.createElement("div");
                container.id = this.id;
                Dom.addClass(container, Lib.Styles.HIDDEN);
                container.innerHTML = this._getHtml();
                document.body.insertBefore(container, document.body.firstChild);
                
                this.Panel = new YAHOO.widget.Panel(this.id, {
                    constraintoviewport:true,
                    visible:false,
                    draggable:true,
                    effect:Game.GetContainerEffect(),
                    underlay:false,
                    modal:false,
                    fixedcenter:true,
                    close:true,
                    width:"450px",
                    zIndex:9999
                });
                this.Panel.renderEvent.subscribe(function(){
                    this.name = Dom.get(this.id+'Name');
                    this.desc = Dom.get(this.id+'Desc');
                    this.founded = Dom.get(this.id+'Founded');
                    this.leader = Dom.get(this.id+'Leader');
                    this.memberList = Dom.get(this.id+'Members');
                    this.memberCount = Dom.get(this.id+'MemberCount');
                    
                    Event.delegate(this.memberList, "click", this.EmpireInfo, "a.profile_link", this, true);
                    
                    Dom.removeClass(this.id, Lib.Styles.HIDDEN);
                }, this, true);
                this.Panel.render();
                Game.OverlayManager.register(this.Panel);
            }
        },
        _getHtml : function() {
            return [
            '    <div class="hd">Alliance</div>',
            '    <div class="bd">',
            '        <ul>',
            '            <li><label>Name:</label><span id="',this.id,'Name"></span></li>',
            '            <li><label>Description:</label><span id="',this.id,'Desc"></span></li>',
            '            <li><label>Founded:</label><span id="',this.id,'Founded"></span></li>',
            '            <li><label>Leader:</label><span id="',this.id,'Leader"></span></li>',
            '        </ul>',
            '        <div style="height:200px;overflow:auto;">',
            '            <p style="border-bottom:1px solid #52ACFF;"><label>Members:</label><span id="',this.id,'MemberCount"></span></p>',
            '            <ul id="',this.id,'Members">',
            '            </ul>',
            '        </div>',
            '    </div>',
            '    <div class="ft"></div>'
            ].join('');
        },
        Load : function(allianceId) {
            this._createPanel();
            
            Lacuna.Pulser.Show();
            Game.Services.Alliance.view_profile({session_id:Game.GetSession(""),alliance_id:allianceId},{
                success:function(o){
                    Lacuna.Pulser.Hide();
                    //show now so there is a bit quicker response
                    this.Panel.show();
                    this.Panel.bringToTop();
                    
                    var profile = o.result.profile;
                    this.name.innerHTML = profile.name;
                    this.desc.innerHTML = profile.description;
                    this.founded.innerHTML = Lib.formatServerDate(profile.date_created);
                    this.memberCount.innerHTML = profile.members.length;
                    
                    var memberArray = ['<li style="border-bottom:1px solid #52ACFF;"><label>Num</label><label>Name</label></li>'];
                    for(var m=0; m<profile.members.length; m++) {
                        var member = profile.members[m];
                        if(member.id == profile.leader_id) {
                            this.leader.innerHTML = member.name;
                        }
                        memberArray = memberArray.concat(['<li><label>',m+1,'</label><a class="profile_link" style="text-decoration:underline;cursor:pointer;" href="#',member.id,'">',member.name,'</a></li>']);
                    }
                    
                    this.memberList.innerHTML = memberArray.join('');
                },
                scope:this
            });
        },
        EmpireInfo : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(\d+)$/);
            Lacuna.Info.Empire.Load(res[1]);
        }
    };
    
    var Empire = function(){
        this.id = "infoEmpire";
    };
    Empire.prototype = {
        _createPanel : function() {
            if(!this.Panel) {
                var container = document.createElement("div");
                container.id = this.id;
                Dom.addClass(container, Lib.Styles.HIDDEN);
                container.innerHTML = this._getHtml();
                document.body.insertBefore(container, document.body.firstChild);
                
                this.Panel = new YAHOO.widget.Dialog(this.id, {
                    constraintoviewport:true,
                    visible:false,
                    draggable:true,
                    postmethod:"none",
                    buttons:[{ text:"Send Message", handler:{fn:this.sendMessage, scope:this}, isDefault:true }],
                    effect:Game.GetContainerEffect(),
                    underlay:false,
                    modal:false,
                    fixedcenter:true,
                    close:true,
                    width:"450px",
                    zIndex:9999
                });
                this.Panel.renderEvent.subscribe(function(){
                    this.empire = Dom.get(this.id+"Empire");
                    this.status = Dom.get(this.id+"Status");
                    this.desc = Dom.get(this.id+"Desc");
                    this.species = Dom.get(this.id+"Species");
                    this.alliance = Dom.get(this.id+"Alliance");
                    this.colonyCount = Dom.get(this.id+"ColonyCount");
                    this.founded = Dom.get(this.id+"Founded");
                    this.login = Dom.get(this.id+"Login");
                    
                    this.coloniesList = Dom.get(this.id+"ColoniesList");
                    
                    this.medalsList = Dom.get(this.id+"MedalsList");
                    
                    this.playerName = Dom.get(this.id+"PlayerName");
                    this.city = Dom.get(this.id+"City");
                    this.country = Dom.get(this.id+"Country");
                    this.skype = Dom.get(this.id+"Skype");

                    this.tabView = new YAHOO.widget.TabView(this.id+"Tabs");
                    this.tabView.set('activeIndex',0);
                    Dom.removeClass(this.id, Lib.Styles.HIDDEN);
                }, this, true);
                this.Panel.hideEvent.subscribe(function(){
                    delete this.currentEmpire;
                }, this, true);
                this.Panel.render();
                Game.OverlayManager.register(this.Panel);
            }
        },
        _getHtml : function() {
            var Ht = Game.GetSize().h - 140;
            if(Ht > 300) { Ht = 300; }
            return [
            '    <div class="hd">Empire</div>',
            '    <div class="bd">',
            '        <div id="',this.id,'Tabs" class="yui-navset">',
            '            <ul class="yui-nav">',
            '                <li><a href="#"><em>Empire</em></a></li>',
            '                <li><a href="#"><em>Known Colonies</em></a></li>',
            '                <li><a href="#"><em>Medals</em></a></li>',
            '                <li><a href="#"><em>Player</em></a></li>',
            '            </ul>',
            '            <div class="yui-content" style="padding:0;">',
            '                <div>',
            '                    <ul>',
            '                        <li><label>Empire:</label><span id="',this.id,'Empire"></span></li>',
            '                        <li><label>Status:</label><span id="',this.id,'Status"></span></li>',
            '                        <li><label>Description:</label><span id="',this.id,'Desc"></span></li>',
            '                        <li><label>Species:</label><span id="',this.id,'Species"></span></li>',
            '                        <li><label>Alliance:</label><span id="',this.id,'Alliance" style="text-decoration:underline;cursor:pointer;"></span></li>',
            '                        <li><label>Colonies:</label><span id="',this.id,'ColonyCount"></span></li>',
            '                        <li><label>Founded:</label><span id="',this.id,'Founded"></span></li>',
            '                        <li><label>Last Login:</label><span id="',this.id,'Login"></span></li>',
            '                </div>',
            '                <div>',
            '                    <ul id="',this.id,'ColoniesList" style="height:',Ht,'px;width:425px;overflow:auto;">',
            '                    </ul>',
            '                </div>',
            '                <div>',
            '                    <ul id="',this.id,'MedalsList" style="height:',Ht,'px;width:425px;overflow:auto;">',
            '                    </ul>',
            '                </div>',
            '                <div>',
            '                    <ul>',
            '                        <li><label>Name:</label><span id="',this.id,'PlayerName"></span></li>',
            '                        <li><label>City:</label><span id="',this.id,'City"></span></li>',
            '                        <li><label>Country:</label><span id="',this.id,'Country"></span></li>',
            '                        <li><label>Skype:</label><span id="',this.id,'Skype"></span></li>',
            '                    </ul>',
            '                </div>',
            '            </div>',
            '        </div>',
            '    </div>',
            '    <div class="ft"></div>'
            ].join('');
        },
        Load : function(empireId) {
            this._createPanel();
            
            Lacuna.Pulser.Show();
            Game.Services.Empire.view_public_profile({session_id:Game.GetSession(""),empire_id:empireId},{
                success:function(o){
                    Lacuna.Pulser.Hide();
                    var profile = o.result.profile;
                    this.currentEmpire = profile;
                    this.empire.innerHTML = profile.name;
                    this.status.innerHTML = profile.status_message;
                    this.desc.innerHTML = profile.description;
                    this.species.innerHTML = profile.species;
                    this.alliance.innerHTML = profile.alliance ? profile.alliance.name : '';
                    this.colonyCount.innerHTML = profile.colony_count;
                    this.founded.innerHTML = Lib.formatServerDate(profile.date_founded);
                    this.login.innerHTML = Lib.formatServerDate(profile.last_login);
                    
                    //show now so there is a bit quicker response
                    this.Panel.show();
                    this.Panel.bringToTop();
                    
                    this.playerName.innerHTML = profile.player_name;
                    this.city.innerHTML = profile.city;
                    this.country.innerHTML = profile.country;
                    this.skype.innerHTML = profile.skype ? ['<a href="callto:',profile.skype,'">',profile.skype,'</a>'].join('') : '';
                    
                    var medalArray = [];
                    for(var medalId in profile.medals) {
                        var medal = profile.medals[medalId];
                        medalArray = medalArray.concat(['<li class="medal">',
                        '    <div class="medalContainer">',
                        '        <img src="',Lib.AssetUrl,'medal/',medal.image,'.png" alt="',medal.name,'" title="',medal.name,' on ',Lib.formatServerDate(medal.date),'" />',
                        '    </div>',
                        '</li>'
                        ]);
                    }
                    this.medalsList.innerHTML = medalArray.join('');
                    
                    var colonyArray = [];
                    for(var colonyId in profile.known_colonies) {
                        var colony = profile.known_colonies[colonyId];
                        colonyArray = colonyArray.concat(['<li>',
                        '    <div class="planetContainer yui-gf">',
                        '        <div class="yui-u first planetImage" style="background-color:black;">',
                        '            <img src="',Lib.AssetUrl,'star_system/',colony.image,'.png" alt="',colony.name,'" style="width:50px;height:50px;" />',
                        '        </div>',
                        '        <div class="yui-u">',
                        '            <div>',colony.name,'</div>',
                        '            <div>',colony.x,' : ',colony.y,'</div>',
                        '        </div>',
                        '    </div>',
                        '</li>'
                        ]);
                    }
                    this.coloniesList.innerHTML = colonyArray.join('');
                    
                    if(profile.alliance) {
                        Event.on(this.id+'Alliance', "click", function(e, id){
                            Lacuna.Info.Alliance.Load(id);
                        }, profile.alliance.id);
                    }
                    else {
                        Event.removeListener(this.id+'Alliance', "click");
                    }
                },
                scope:this
            });
        },
        sendMessage : function(e) {
            Event.stopEvent(e);
            if(this.currentEmpire) {
                Lacuna.Messaging.sendTo(this.currentEmpire.name);
            }
        }
    };
    
    var Clock = function(){
        this.id = "infoClock";
    };
    Clock.prototype = {
        _createDisplay : function() {
            var container = document.createElement("div");
            container.id = "clock";
            Dom.addClass(container, Lib.Styles.HIDDEN);
            Dom.addClass(container, "nofooter");
            container.innerHTML = this._getHtml();
            document.body.insertBefore(container, document.body.firstChild);
            
            this.Display = new YAHOO.widget.Panel("clock", {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                close:true,
                underlay:false,
                modal:false,
                width:"300px",
                context:["footer","bl","tl", ["beforeShow"], [0,-40]]
            });
            this.Display.renderEvent.subscribe(function(){                    
                Dom.removeClass("clock", Lib.Styles.HIDDEN);
                this.clock = Dom.get("clockDisplay");
            });
            this.Display.showEvent.subscribe(function(){
                this.Display.bringToTop();
                Game.onTick.subscribe(this._updating, this.Display, true);
            }, this, true);
            this.Display.hideEvent.subscribe(function(){
                Game.onTick.unsubscribe(this._updating);
            }, this, true);
            this.Display.render();
        },
        _getHtml : function() {
            return [
            '    <div class="hd">Server Time</div>',
            '    <div class="bd">',
            '        <div id="clockDisplay"></div>',
            '    </div>'
            ].join('');
        },
        _updating : function() {
            this.clock.innerHTML = Lacuna.Game.ServerData.time.toUTCString(); //Lib.formatUTC(Lacuna.Game.ServerData.time);
        },
        Show : function() {
            if(!this.Display) {
                this._createDisplay();
            }
            this.Display.show();
        },
        Hide : function() {
            if(this.Display) {
                this.Display.hide();
            }
        }
    };
    
    
    YAHOO.lacuna.Info = {
        Alliance: new Alliance(),
        Empire: new Empire(),
        Clock: new Clock()
    };
        
})();
YAHOO.register("info", YAHOO.lacuna.Info, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/info.js","/")
},{"buffer":71,"oMfpAn":75}],50:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Invite == "undefined" || !YAHOO.lacuna.Invite) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Invite = function() {
        this.createEvent("onRpc");
        
        this.id = "invite";
        
        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        Dom.addClass(container, "nofooter");
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);
        
        this.Dialog = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"450px",
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            this.elFriendEmail = Dom.get("inviteFriendEmail");
            this.elMessage = Dom.get("inviteMessage");
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
            Event.on("inviteButton", "click", this.handleInvite, this, true);
            this.inviteGenerate = Dom.get("inviteGenerate");
            Event.on(this.inviteGenerate, "click", this.handleGenerate, this, true);
            Event.on("inviteGenerateLink", "click", function(){ this.select(); });
        }, this, true);

        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
    };
    Invite.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">Invite a Friend</div>',
            '    <div class="bd">',
            '        <form name="inviteForm">',
            '            <ul>',
            '                <li><label for="inviteFriendEmail">EMail:</label><input type="text" id="inviteFriendEmail"></li>',
            '                <li><label for="inviteMessage">Message:</label></li>',
            '                <li><textarea id="inviteMessage"></textarea></li>',
            '                <li style="text-align:right;"><button id="inviteButton" type="button">Invite</button></li>',
            '            </ul>',
            '        </form>',
            '        <hr />',
            '        <p id="inviteGenerateDesc">You can also generate a URL you can post to your blog or email to your friends.</p>',
            '        <button id="inviteGenerate" type="button">Generate URL</button>',
            '        <input id="inviteGenerateLink" type="text" readonly="readonly" style="display: none" />',
            '    </div>'
            ].join('');
        },
        
        show : function() {
            //this is called out of scope so make sure to pass the correct scope in
            Lacuna.Invite.elFriendEmail.value = '';
            Lacuna.Invite.elMessage.value = "I'm having a great time with this new game called Lacuna Expanse. Come play with me.";
            Lacuna.Invite.Dialog.show();
        },
        hide : function() {
            this.Dialog.hide();
        },
        handleInvite : function (e) {
            Lacuna.Pulser.Show();
            var email = this.elFriendEmail.value;
            email = email.split(/\s*[,;]\s*/).join(',');
            Game.Services.Empire.invite_friend({
                session_id:Game.GetSession(""),
                email: email,
                message: this.elMessage.value
            },{
                success : function(o){
                    YAHOO.log(o, "info", "InviteFriend.success");
                    Lacuna.Pulser.Hide();
                    var not_sent = o.result.not_sent;
                    if (not_sent && not_sent.length > 0) {
                        var errorMessage = [];
                        var errorEmails = [];
                        for (i = 0; i < not_sent.length; i++) {
                            errorMessage.push(not_sent[i].reason[1]);
                            errorEmails.push(not_sent[i].address);
                        }
                        this.elFriendEmail.value = errorEmails.join(', ');
                        alert(errorMessage.join("\n"));
                    }
                    else {
                        this.hide();
                    }
                    this.fireEvent('onRpc', o);
                },
                scope:this
            });
        },
        handleGenerate : function (e) {
            this.inviteGenerate.disabled = true;
            
            Lacuna.Pulser.Show();
            Game.Services.Empire.get_invite_friend_url({
                session_id:Game.GetSession("")
            },{
                success : function(o){
                    YAHOO.log(o, "info", "handleGenerate.success");
                    Lacuna.Pulser.Hide();
                    Dom.setStyle(this.inviteGenerate,"display","none");
                    Dom.get("inviteGenerateDesc").innerHTML = 'Pass this url around to invite your friends, readers, or strangers!';
                    Dom.setStyle("inviteGenerateLink", 'display', 'inline');
                    Dom.get("inviteGenerateLink").value = o.result.referral_url;
                    this.fireEvent('onRpc', o);
                },
                failure : function(o){
                    this.inviteGenerate.disabled = false;
                },
                scope:this
            });
        }
    };

    Lang.augmentProto(Invite, Util.EventProvider);
    
    Lacuna.Invite = new Invite();

})();
YAHOO.register("invite", YAHOO.lacuna.Invite, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/invite.js","/")
},{"buffer":71,"oMfpAn":75}],51:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*
Public Key:
53137d8f-3544-4118-9001-b0acbec70b3d
Private Key:
d07c9bd4-fcb7-427f-9064-218064677fef
*/
YAHOO.namespace("lacuna");
if (!String.prototype.titleCaps) {
    String.small = "(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?)";
    String.punct = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";

    String.prototype.titleCaps = function(replaceVal, withVal){
        var parts = [], split = /[:.;?!] |(?: |^)["�]/g, index = 0, processVal = this;
        var fnUpper = function(all){
                return (/[A-Za-z]\.[A-Za-z]/).test(all) ? all : String.upper(all);
            },
            fnPuntUpper = function(all, punct, word){
                return punct + String.upper(word);
            };

        if(replaceVal) {
            var rg = new RegExp(replaceVal, 'g');
            processVal = processVal.replace(rg, withVal || '');
        }

        while (true) {
            var m = split.exec(processVal);

            parts.push( processVal.substring(index, m ? m.index : processVal.length)
                .replace(/\b([A-Za-z][a-z.'�]*)\b/g, fnUpper)
                .replace(RegExp("\\b" + String.small + "\\b", "ig"), String.lower)
                .replace(RegExp("^" + String.punct + String.small + "\\b", "ig"), fnPuntUpper)
                .replace(RegExp("\\b" + String.small + String.punct + "$", "ig"), String.upper));

            index = split.lastIndex;

            if ( m ) { parts.push( m[0] ); }
            else { break; }
        }

        return parts.join("").replace(/ V(s?)\. /ig, " v$1. ")
            .replace(/(['�])S\b/ig, "$1s")
            .replace(/\b(AT&T|Q&A)\b/ig, function(all){
                return all.toUpperCase();
            });
    };
    String.lower = function(word){
        return word.toLowerCase();
    };
    String.upper = function(word){
      return word.substr(0,1).toUpperCase() + word.substr(1);
    };
}

if (typeof YAHOO.lacuna.Library == "undefined" || !YAHOO.lacuna.Library) {

var Storage = require('dom-storage');

(function(){
    var Util = YAHOO.util,
        Lang = YAHOO.lang,
        Dom = Util.Dom,
        assetUrl = window.lacuna_s3_base_url + 'assets/';

    var xPad=function (x, pad, r) {
        if(typeof r === 'undefined') {
            r=10;
        }
        for( ; parseInt(x, 10)<r && r>1; r/=10) {
            x = pad.toString() + x;
        }
        return x.toString();
    };

    // in-file, doesn't call String(val) on values (default)
    var db       = new Storage('./db.json', { strict: false });
    var settings = new Storage('./settings.json', { strict: false });

    var Library = {
        db : db,
        settings : settings,
        ApiKey : "53137d8f-3544-4118-9001-b0acbec70b3d",
        AssetUrl : settings.getItem('assetsPath') || assetUrl,
        Styles : {
            HIDDEN : "hidden",
            ALERT : "alert"
        },
        ErrorCodes : {
            1000 : "Name not available",
            1001 : "Invalid password",
            1002 : "Object does not exist",
            1003 : "Too much information",
            1004 : "Password incorrect",
            1005 : "Contains invalid characters",
            1006 : "Session expired",
            1007 : "Overspend",
            1008 : "Underspend",
            1009 : "Invalid range",
            1010 : "Insufficient privileges",
            1011 : "Not enough resources in storage",
            1012 : "Not enough resources in production",
            1013 : "Missing prerequisites",
            1014 : "Captcha not valid",
            1015 : "Restricted for sitter logins",
            1100 : "Empire not founded",
            1101 : "Empire not founded, and you tried to create it, but had the wrong password",
            1200 : "Game Over"
        },
        View : {
            STAR : "star",
            SYSTEM : "system",
            PLANET : "planet"
        },
        QueueTypes : {
            PLANET : "1",
            STAR : "2",
            SYSTEM : "3"
        },

        formatInlineList : function(stringArray, start, end) {
            if(Lang.isArray(stringArray)) {
                var offering = ['<ul class="inlineList">'];

                var len = stringArray.length,
                    begin = 0;
                if(start) {
                    begin = start;

                    if(end) {
                        end += 1; //add one so we include the end index
                        len = end > len ? len : end;
                    }
                }

                for(var n=begin; n<len; n++) {
                    offering[offering.length] = '<li>';
                    offering[offering.length] = stringArray[n];
                    offering[offering.length] = '</li>';
                }

                offering[offering.length] = '</ul>';
                return offering.join('');
            }
            else if(Lang.isString(stringArray)){
                return stringArray;
            }
            else {
                return 'Unrecognized stringArray in formatInlineList';
            }
        },
        formatMillisecondTime : function(totalMs) {
            return Library.formatTime(totalMs / 1000);
        },
        formatTime : function(totalSeconds) {
            if(totalSeconds < 0) {
                return "";
            }

            var secondsInDay = 60 * 60 * 24,
                secondsInHour = 60 * 60,
                day = Math.floor(totalSeconds / secondsInDay),
                hleft = totalSeconds % secondsInDay,
                hour = Math.floor(hleft / secondsInHour),
                sleft = hleft % secondsInHour,
                min = Math.floor(sleft / 60),
                seconds = Math.floor(sleft % 60);

            if(day > 0) {
                return [day,xPad(hour,'0'),xPad(min,'0'),xPad(seconds,'0')].join(':');
            }
            else if(hour > 0) {
                return [hour,xPad(min,'0'),xPad(seconds,'0')].join(':');
            }
            else {
                return [min,xPad(seconds,'0')].join(':');
            }
        },
        formatNumber : function(num) {
            return Util.Number.format(num,{thousandsSeparator:","});
        },
        getTime : function(dt) {
            if(dt instanceof Date) {
                return dt.getTime();
            }
            else {
                return Library.parseServerDate(dt).getTime();
            }
        },
        parseServerDate : function(strDate) {
            if(strDate instanceof Date) {
                return strDate;
            }
            //"23 03 2010 01:20:11 +0000"
            var pieces = strDate.split(' '), //[day month year hr:min:sec timez]
                time = pieces[3].split(':');
            var dt = new Date();
            dt.setUTCFullYear(pieces[2]*1);
            dt.setUTCMonth((pieces[1]*1-1), pieces[0]*1);
            dt.setUTCHours(time[0]*1);
            dt.setUTCMinutes(time[1]*1);
            dt.setUTCSeconds(time[2]*1);
            return dt;
        },
        parseReason : function(reason, defReason) {
            var output = "";
            if(reason) {
                if(Lang.isArray(reason)) {
                    switch(reason[0]) {
                        case 1011:
                            output = [reason[1], ' Requires more ', (Lang.isArray(reason[2]) ? reason[2].join(', ') : reason[2])].join('');
                            break;
                        case 1012:
                            if(reason[2]) {
                                output = [reason[1], ' Requires higher production of ', (Lang.isArray(reason[2]) ? reason[2].join(', ') : reason[2])].join('');
                            }
                            else {
                                output = reason[1];
                            }
                            break;
                        case 1013:
                            output = reason[1];
                            break;
                        default:
                            output = defReason || reason[1];
                            break;
                    }
                }
                else {
                    output = defReason || reason;
                }
            }
            return output;
        },
        formatServerDate : function(oDate) {
            var dt = oDate instanceof Date ? oDate : Library.parseServerDate(oDate);
            return Util.Date.format(dt, {format:"%m/%d/%Y %r"}, "en");
        },
        formatServerDateShort : function(oDate) {
            var dt = oDate instanceof Date ? oDate : Library.parseServerDate(oDate);
            return Util.Date.format(dt, {format:"%m/%d %r"}, "en");
        },
        formatServerDateTimeShort : function(oDate) {
            var dt = oDate instanceof Date ? oDate : Library.parseServerDate(oDate);
            return Util.Date.format(dt, {format:"%m/%d %I:%M%p"}, "en");
        },
        formatUTC : function(oDate) {
            var dt = new Date(oDate.getUTCFullYear(), oDate.getUTCMonth(), oDate.getUTCDate(), oDate.getUTCHours(), oDate.getUTCMinutes(), oDate.getUTCSeconds(),0);
            return Util.Date.format(dt, {format:"%m/%d/%Y %r"}, "en");
        },
        convertNumDisplay : function(number, always) {
            if(number >= 100000000000000000 || number <= -100000000000000000) {
                //101Q
                return Math.floor(number/1000000000000000) + 'Q';
            }
            else if(number >= 1000000000000000 || number <= -1000000000000000) {
                //75.3Q
                return (Math.floor(number/100000000000000) / 10) + 'Q';
            }
            else if(number >= 100000000000000 || number <= -100000000000000) {
                //101T
                return Math.floor(number/1000000000000) + 'T';
            }
            else if(number >= 1000000000000 || number <= -1000000000000) {
                //75.3T
                return (Math.floor(number/100000000000) / 10) + 'T';
            }
            else if(number >= 100000000000 || number <= -100000000000) {
                //101B
                return Math.floor(number/1000000000) + 'B';
            }
            else if(number >= 1000000000 || number <= -1000000000) {
                //75.3B
                return (Math.floor(number/100000000) / 10) + 'B';
            }
            else if(number >= 100000000 || number <= -100000000) {
                //101M
                return Math.floor(number/1000000) + 'M';
            }
            else if(number >= 1000000 || number <= -1000000) {
                //75.3M
                return (Math.floor(number/100000) / 10) + 'M';
            }
            else if(number >= 10000 || number <= -10000) {
                //123k
                return Math.floor(number/1000) + 'k';
            }
            else if(always) {
                //8765
                return Math.floor(number);
            }
            else {
                //8765
                return Math.floor(number) || "0";
            }
        },

        getSelectedOption : function(select) {
            //just making sure
            select = Dom.get(select);

            return Library.getSelectedOptionFromSelectElement(select);
        },
        getSelectedOptionFromSelectElement : function(select) {
            var opts = select.options,
                ind = select.selectedIndex;
            return ind >= 0 && opts.length > ind ? opts[ind] : null;
        },
        getSelectedOptionValue : function(select) {
            var opt = Library.getSelectedOption(select);
            return opt ? opt.value : null;
        },
        getSelectedOptionValueFromSelectElement : function(select) {
            var opt = Library.getSelectedOptionFromSelectElement(select);
            return opt ? opt.value : null;
        },

        fadeOutElm : function(id) {
            var a = new Util.Anim(id, {opacity:{from:1,to:0}}, 4);
            a.onComplete.subscribe(function(e, dur, arg){
                Dom.get(arg).innerHTML = "";
                Dom.setStyle(arg, "opacity", 1);
            }, id);
            a.animate();
        },

        ResourceTypes : {
            "energy":1,
            "essentia":0,
            "food":["algae","apple","bean","beetle","burger","bread","cheese","chip","cider","corn","fungus","lapis","meal","milk","pancake","pie","potato","root","shake","soup","syrup","wheat"],
            "ore":["anthracite","bauxite","beryl","chromite","chalcopyrite","fluorite","galena","goethite","gold","gypsum","halite","kerogen","magnetite","methane","monazite","rutile","sulfur","trona","uraninite","zircon"],
            "waste":1,
            "water":1
        },
        UIImages : [
            'ui/bkg.png',
            'ui/button_bkg_200.png',
            'ui/close.png',
            'ui/down.png',
            'ui/l/about.png',
            'ui/l/bookmarks.png',
            'ui/l/build-no.png',
            'ui/l/build.png',
            'ui/l/disable_self_destruct.png',
            'ui/l/enable_self_destruct.png',
            'ui/l/energy.png',
            'ui/l/essentia.png',
            'ui/l/food.png',
            'ui/l/happiness.png',
            'ui/l/inbox.png',
            'ui/l/inbox_new.png',
            'ui/l/invite_friend.png',
            'ui/l/logout.png',
            'ui/l/ore.png',
            'ui/l/planet_side.png',
            'ui/l/plots.png',
            'ui/l/profile.png',
            'ui/l/star_map.png',
            'ui/l/stats.png',
            'ui/l/support.png',
            'ui/l/tutorial.png',
            'ui/l/waste.png',
            'ui/l/water.png',
            'ui/mail-read.png',
            'ui/rss.png',
            'ui/s/build-no.png',
            'ui/s/build.png',
            'ui/s/energy.png',
            'ui/s/essentia.png',
            'ui/s/food.png',
            'ui/s/happiness.png',
            'ui/s/inbox.png',
            'ui/s/ore.png',
            'ui/s/refresh.png',
            'ui/s/star_map.png',
            'ui/s/storage.png',
            'ui/s/time.png',
            'ui/s/tutorial.png',
            'ui/s/waste.png',
            'ui/s/water.png',
            'ui/tab.png',
            'ui/tickbar.png',
            'ui/transparent_black.png',
            'ui/up.png',
            'ui/web/bar_bottom_back.png',
            'ui/web/bar_top_back.png',
            'ui/web/facebook-login-button.png',
            'ui/web/selector_bottom.png',
            'ui/web/selector_bottom_shine.png',
            'ui/web/selector_top.png',
            'ui/web/selector_top_shine.png',
            'ui/web/slider-thumb-half-left.png',
            'ui/web/slider-thumb-half-right.png',
            'ui/web/slider-thumb.png',
            'ui/web/t.png',
            'ui/zoom.png',
            'ui/zoom_slider.png'
        ],
        // planetarySort - Input: Game.EmpireData.planets, Output: A sorted array of planetary objects
        planetarySort : function(planets) {
            var newplanets = [];
            for(var pId in planets) {
                newplanets.push(planets[pId]);
            }
            newplanets.sort(function(a,b) {
                if (a.name > b.name) {
                    return 1;
                }
                else if (a.name < b.name) {
                    return -1;
                }
                else {
                    return 0;
                }
            });
            return newplanets;
        }
    };

    YAHOO.lacuna.Library = Library;
})();
YAHOO.register("library", YAHOO.lacuna.Library, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/library.js","/")
},{"buffer":71,"dom-storage":69,"oMfpAn":75}],52:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Login == "undefined" || !YAHOO.lacuna.Login) {

(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Cookie = Util.Cookie,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Login = function() {
        this.id = "login";
        this.createEvent("onLoginSuccessful");

        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, "hidden");

        // currently have to turn off autocomplete.  Firefox asks to
        // remember login but is unable to fill in the saved values later.
        container.innerHTML = [
        '    <div class="hd">Login</div>',
        '    <div class="bd">',
        '        <div class="loginWrapper">',
        '            <div class="loginMain">',
        '                <form id="loginForm" name="loginForms" autocomplete="off">',
        '                    <ul>',
        '                        <li><label for="loginName">Empire Name</label><input type="text" id="loginName" /></li>',
        '                        <li><label for="loginPass">Password</label><input type="password" id="loginPass"  /></li>',
        '                        <li><label for="loginRemember">Remember Empire?</label><input type="checkbox" id="loginRemember" /> <button type="submit">Login</button></li>',
        '                    </ul>',
        '                    <ul class="loginExtras">',
        '                        <li><a id="loginReset" href="#">Forgotten your password?</a></li>',
        '                    </ul>',
        '                </form>',
        '            </div>',
        '            <div class="loginCreate">',
        '                <ul>',
        '                    <li><strong>Have a Facebook account?</strong></li>',
        '                    <li>Log in or Create Empire</li>',
        '                    <li><a href="/facebook/authorize"><img src="' + Lib.AssetUrl + 'ui/web/facebook-login-button.png" /></a></li>',
        '                </ul>',
        '                <hr />',
        '                <ul>',
        '                    <li><strong>Don\'t have an account?</strong></li>',
        '                    <li><button id="loginCreate" type="button">Create an Empire</button></li>',
        '                </ul>',
        '            </div>',
        '        </div>',
        '        <div style="border-top:1px solid #52ACFF;padding:15px 5px;text-align:center;">',
        '            New to the Lacuna Expanse?  Want to find out more before signing up? <a href="http://www.lacunaexpanse.com" target="_blank">Click here.</a>',
        '        </div>',
        '    </div>'
        ].join('');
        document.body.insertBefore(container, document.body.firstChild);
        Dom.addClass(container, "nofooter");

        this.Dialog = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:false,
            effect:Game.GetContainerEffect(),
            modal:false,
            close:false,
            width:"650px",
            underlay:false,
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            //get el's after rendered
            this.elName = Dom.get("loginName");
            this.elPass = Dom.get("loginPass");
            this.elCreate = Dom.get("loginCreate");
            this.elRemember = Dom.get("loginRemember");
            this.elForm = Dom.get("loginForm");
            this.elCreate = Dom.get("loginCreate");
            this.elReset = Dom.get("loginReset");

            Event.addListener(this.elCreate, "click", function(e){Event.stopEvent(e);this.createEmpire();}, this, true);
            Event.addListener(this.elReset, "click", function(e){Event.stopEvent(e);this.resetPassword();}, this, true);
            Event.addListener(this.elForm, "submit", function(e){Event.stopEvent(e);this.handleLogin();}, this, true);
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);

        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);
    };
    Login.prototype = {
        handleLogin : function() {
            Lacuna.Pulser.Show();
            this.setMessage("");
            var EmpireServ = Game.Services.Empire;
            EmpireServ.login({name:this.elName.value, password:this.elPass.value, api_key:Lib.ApiKey},{
                success : function(o){
                    YAHOO.log(o, "info", "Login.handleLogin.success");
                    //clear the session just in case
                    Game.RemoveCookie("session");

                    if(this.elRemember.checked) {
                        Game.SetCookie('empireName', this.elName.value);
                    }
                    else {
                        Game.RemoveCookie('empireName');
                    }
                    this.elForm.reset();
                    this.fireEvent("onLoginSuccessful",o);
                    this.hide();
                },
                failure : function(o){
                    if(o.error.code == 1100) {
                        //haven't founded empire yet so take them to species
                        this.hide();
                        this.initEmpireCreator();
                        Game.OverlayManager.hideAll();
                        Game.SpeciesCreator.show(o.error.data.empire_id);
                    }
                    else if(o.error.code == 1200) {
                        alert(o.error.message);
                        window.location = o.error.data;
                    }
                    else {
                        this.setMessage(o.error.message || "There was a problem logging in.  Please try again.");
                    }
                    return true;
                },
                scope:this
            });
        },
        show : function(error) {
            if(!this.Dialog.cfg.getProperty("visible")) {
                Game.OverlayManager.hideAll();
                this.elForm.reset();
                this.Dialog.show();
                var str = Game.GetCookie('empireName');
                if(str) {
                    this.elName.value = str;
                    this.elRemember.checked = true;
                    this.elPass.focus();
                }
                else {
                    this.elName.focus();
                }
                if(error) {
                    this.setMessage(error.message);
                }
            }
        },
        hide : function() {
            if(this.elMessage) {
                Dom.replaceClass(this.elMessage, Lib.Styles.ALERT, Lib.Styles.HIDDEN);
            }
            this.Dialog.hide();
        },
        setMessage : function(str) {
            if(!this.elMessage) {
                var d = document.createElement("div");
                d.id = "loginMessage";
                var eUl = this.elName.parentNode.parentNode;
                eUl.parentNode.insertBefore(d, eUl.nextSibling);
                this.elMessage = d;
            }
            if (str && str.length > 0) {
                Dom.replaceClass(this.elMessage, Lib.Styles.HIDDEN, Lib.Styles.ALERT);
                this.elMessage.innerHTML = str;
            }
            else {
                Dom.replaceClass(this.elMessage, Lib.Styles.ALERT, Lib.Styles.HIDDEN);
            }
        },
        initEmpireCreator : function() {
            if(!Game.EmpireCreator) {
                Game.EmpireCreator = new Lacuna.CreateEmpire(this);
                Game.EmpireCreator.subscribe("onCreateSuccessful",function(oArgs) {
                    this.fireEvent("onLoginSuccessful",oArgs);
                }, this, true);
            }
        },
        createEmpire : function() {
            this.hide(); //hide login
            this.initEmpireCreator();
            Game.OverlayManager.hideAll();
            Game.EmpireCreator.show();
        },
        resetPassword : function(reset_key) {
            this.hide(); //hide login
            if(!this.ResetPassword) {
                this.ResetPassword = new ResetPassword(this);
                this.ResetPassword.subscribe("onResetSuccessful",function(oArgs) {
                    this.fireEvent("onLoginSuccessful",oArgs);
                }, this, true);
            }
            Game.OverlayManager.hideAll();
            if (reset_key) {
                this.ResetPassword.showReset(reset_key);
            }
            else {
                this.ResetPassword.show(this.elName.value);
            }
        }
    };
    Lang.augmentProto(Login, Util.EventProvider);

    var ResetPassword = function(Login) {
        this.createEvent("onResetSuccessful");
        this._login = Login;

        this.emailId = "resetPasswordEmail";

        var emailContainer = document.createElement("div");
        emailContainer.id = this.emailId;
        Dom.addClass(emailContainer, "hidden");
        emailContainer.innerHTML = [
        '    <div class="hd">Reset Password</div>',
        '    <div class="bd">',
        '        <form id="resetEmailForm" name="resetEmailForm">',
        '            <p>',
        '                Enter either your empire name, or the email address used on the account.  You will be sent an email with instructions for resetting your password.',
        '            </p>',
        '            <ul>',
        '                <li><label for="resetEmpireName">Empire Name</label><input type="text" id="resetEmpireName" /></li>',
        '                <li><label for="resetEmail">Email</label><input type="text" id="resetEmail" /></li>',
        '                <li><a href="#" id="resetShowKey">Already have a reset key?</a></li>',
        '            </ul>',
        '        </form>',
        '    </div>',
        '    <div class="ft"></div>'
        ].join('');
        document.body.insertBefore(emailContainer, document.body.firstChild);

        this.EmailDialog = new YAHOO.widget.Dialog(this.emailId, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:false,
            effect:Game.GetContainerEffect(),
            modal:true,
            close:true,
            width:"400px",
            underlay:false,
            zIndex:9999,
            buttons:[
                {text:"Send Reset Email", handler:function(){this.submit();}, isDefault: true},
                {text:"Cancel", handler:function(){this.cancel();}}
            ],
            hideaftersubmit: false,
            postmethod: "manual"
        });
        this.EmailDialog.renderEvent.subscribe(function(){
            this.elName = Dom.get("resetEmpireName");
            this.elEmail = Dom.get("resetEmail");

            Event.on('resetShowKey', 'click', function(e){this.showReset();}, this, true);
            Dom.removeClass(this.emailId, Lib.Styles.HIDDEN);
        }, this, true);
        this.EmailDialog.submitEvent.subscribe(this.sendEmail, this, true);
        this.EmailDialog.cancelEvent.subscribe(this.hide, this, true);
        this.EmailDialog.render();
        Game.OverlayManager.register(this.EmailDialog);

        this.resetId = "resetPasswordKey";

        var resetContainer = document.createElement("div");
        resetContainer.id = this.resetId;
        Dom.addClass(resetContainer, "hidden");
        resetContainer.innerHTML = [
        '    <div class="hd">Reset Password</div>',
        '    <div class="bd">',
        '        <form id="resetForm" name="resetForm">',
        '            <p>',
        '                Enter the reset key you have received in your email, along with what you would like your password set to.',
        '            </p>',
        '            <ul>',
        '                <li><label for="resetKey">Reset Key</label><input maxlength="36" type="text" id="resetKey" /></li>',
        '                <li><label for="resetPassword1">Password</label><input type="password" id="resetPassword1" /></li>',
        '                <li><label for="resetPassword2">Confirm Password</label><input type="password" id="resetPassword2" /></li>',
        '            </ul>',
        '        </form>',
        '    </div>',
        '    <div class="ft"></div>'
        ].join('');
        document.body.insertBefore(resetContainer, document.body.firstChild);

        this.ResetDialog = new YAHOO.widget.Dialog(this.resetId, {
            constraintoviewport:true,
            fixedcenter:true,
            visible:false,
            draggable:false,
            modal:true,
            close:true,
            width:"450px",
            underlay:false,
            zIndex:9999,
            buttons:[
                {text:"Reset Password", handler:function(){this.submit();}, isDefault: true},
                {text:"Cancel", handler:function(){this.cancel();}}
            ],
            hideaftersubmit: false,
            postmethod: "manual"
        });
        this.ResetDialog.renderEvent.subscribe(function(){
            this.elKey = Dom.get("resetKey");
            this.elPassword1 = Dom.get("resetPassword1");
            this.elPassword2 = Dom.get("resetPassword2");

            Dom.removeClass(this.resetId, Lib.Styles.HIDDEN);
        }, this, true);
        this.ResetDialog.submitEvent.subscribe(this.resetPassword, this, true);
        this.ResetDialog.cancelEvent.subscribe(this.hide, this, true);
        this.ResetDialog.render();
        Game.OverlayManager.register(this.ResetDialog);
    };
    ResetPassword.prototype = {
        show : function(empire_name) {
            this.elName.value = empire_name ? empire_name : '';
            this.elEmail.value = '';
            this.EmailDialog.getButtons()[0].disabled = false;
            this.EmailDialog.show();
        },
        hide : function() {
            this.EmailDialog.hide();
            this.ResetDialog.hide();
            this._login.show();
        },
        sendEmail : function() {
            var empireName = this.elName.value;
            var email = this.elEmail.value;
            var data = {};
            if (empireName.length > 0) {
                data.empire_name = empireName;
            }
            if (email.length > 0) {
                data.email = email;
            }
            this.EmailDialog.getButtons()[0].disabled = true;
            Lacuna.Pulser.Show();
            Game.Services.Empire.send_password_reset_message(data,{
                success: function(o) {
                    YAHOO.log(o, "info", "ResetPassword.sendEmail.success");
                    Lacuna.Pulser.Hide();
                    this.showReset();
                },
                failure: function(o) {
                    this.EmailDialog.getButtons()[0].disabled = false;
                },
                scope: this
            });
        },
        showReset : function(reset_key) {
            if (reset_key) {
                this.elKey.value = reset_key;
            }
            else {
                this.elKey.value = '';
            }
            this.elPassword1.value = '';
            this.elPassword2.value = '';
            this.EmailDialog.hide();
            this.ResetDialog.show();
        },
        resetPassword : function() {
            var reset_key = this.elKey.value;
            var password1 = this.elPassword1.value;
            var password2 = this.elPassword2.value;
            if (password1 != password2) {
                alert("Passwords do not match!");
            }
            else {
                Lacuna.Pulser.Show();
                Game.Services.Empire.reset_password({
                    reset_key: reset_key,
                    password1: password1,
                    password2: password2,
                    api_key:Lib.ApiKey
                },{
                    success: function(o) {
                        YAHOO.log(o, "info", "ResetPassword.resetPassword.success");
                        Lacuna.Pulser.Hide();
                        this.fireEvent('onResetSuccessful', o);
                        this.hide();
                    },
                    scope: this
                });
            }
        }
    };
    Lang.augmentProto(ResetPassword, Util.EventProvider);

    Lacuna.Login = Login;
})();
YAHOO.register("login", YAHOO.lacuna.Login, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/login.js","/")
},{"buffer":71,"oMfpAn":75}],53:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.MapPlanet == "undefined" || !YAHOO.lacuna.MapPlanet) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var FactoryMap = {
        //buildings
        "/archaeology": Lacuna.buildings.Archaeology,
        "/blackholegenerator": Lacuna.buildings.BlackHoleGenerator,
        "/capitol": Lacuna.buildings.Capitol,
        "/development": Lacuna.buildings.Development,
        "/distributioncenter": Lacuna.buildings.DistributionCenter,
        "/embassy": Lacuna.buildings.Embassy,
        "/energyreserve": Lacuna.buildings.EnergyReserve,
        "/entertainment": Lacuna.buildings.Entertainment,
        "/foodreserve": Lacuna.buildings.FoodReserve,
        "/geneticslab": Lacuna.buildings.GeneticsLab,
        "/intelligence": Lacuna.buildings.Intelligence,
        "/inteltraining": Lacuna.buildings.IntelTraining,
        "/libraryofjith": Lacuna.buildings.LibraryOfJith,
        "/mayhemtraining": Lacuna.buildings.MayhemTraining,
        "/mercenariesguild": Lacuna.buildings.MercenariesGuild,
        "/miningministry": Lacuna.buildings.MiningMinistry,
        "/missioncommand": Lacuna.buildings.MissionCommand,
        "/network19": Lacuna.buildings.Network19,
        "/observatory": Lacuna.buildings.Observatory,
        "/oracleofanid": Lacuna.buildings.OracleOfAnid,
        "/orestorage": Lacuna.buildings.OreStorage,
        "/park": Lacuna.buildings.Park,
        "/planetarycommand": Lacuna.buildings.PlanetaryCommand,
        "/politicstraining": Lacuna.buildings.PoliticsTraining,
        "/security": Lacuna.buildings.Security,
        "/shipyard": Lacuna.buildings.Shipyard,
        "/spaceport": Lacuna.buildings.SpacePort,
        "/ssla": Lacuna.buildings.SpaceStationLab,
        "/subspacesupplydepot": Lacuna.buildings.SubspaceSupplyDepot,
        "/thefttraining": Lacuna.buildings.TheftTraining,
        "/themepark": Lacuna.buildings.ThemePark,
        "/thedillonforge": Lacuna.buildings.TheDillonForge,
        "/templeofthedrajilites": Lacuna.buildings.TempleOfTheDrajilites,
        "/trade": Lacuna.buildings.Trade,
        "/transporter": Lacuna.buildings.Transporter,
        "/waterstorage": Lacuna.buildings.WaterStorage,
        "/wasteexchanger": Lacuna.buildings.WasteExchanger,
        "/wasterecycling": Lacuna.buildings.WasteRecycling,
        //modules
        "/parliament": Lacuna.modules.Parliament,
        "/policestation": Lacuna.modules.PoliceStation,
        "/stationcommand": Lacuna.modules.StationCommand
    };
        
    var MapPlanet = function() {
        this.createEvent("onMapRpc");
        
        this._buildDetailsPanel();
        this._buildBuilderPanel();
    };
    MapPlanet.prototype = {
        _buildDetailsPanel : function() {
            var panelId = "buildingDetails";
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Details</div>',
                '<div class="bd">',
                '    <div class="yui-gf" style="padding-bottom:5px;">',
                '        <div class="yui-u first" id="buildingDetailsImgBkgd" style="text-align:center;">',
                '            <img id="buildingDetailsImg" src="" alt="" style="width:100px;height:100px;" />',
                '        </div>',
                '        <div class="yui-u">',
                '            <ul>',
                '                <li id="buildingDetailsName"></li>',
                '                <li id="buildingDetailsTimeLeft"></li>',
                '                <li id="buildingDetailsDesc"></li>',
                '            </ul>',
                '        </div>',
                '    </div>',
                '    <div id="buildingDetailTabs" class="yui-navset">',
                '        <ul class="yui-nav">',
                '        </ul>',
                '        <div class="yui-content">',
                '        </div>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");

            this.buildingDetails = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:false,
                close:true,
                width:"800px",
                underlay:false,
                zIndex:9995,
                context:["header","tl","bl"]
            });
            this.buildingDetails.addQueue = function(seconds, queueFn, elm, sc) {
                this.queue = this.queue || [];
                //check if the queue is empty and store
                var notStarted = this.queue.length == 0;
                //push new queue item so it's immediately available for the tick
                this.queue.push({secondsRemaining:seconds*1, el:elm, fn:queueFn, scope:sc});
                //make sure we subscribe to the tick
                if(notStarted) {
                    Game.onTick.subscribe(this.processQueue, this, true);
                }
            };
            this.buildingDetails.processQueue = function(e, oArgs) {
                if(this.queue.length > 0) {
                    var queue = this.queue,
                        diff = oArgs[0]/1000,
                        newq = [];

                    while(queue.length > 0) {
                        var callback = queue.pop();
                        callback.secondsRemaining -= diff;
                        if(!callback.fn.call(callback.scope || this, callback.secondsRemaining, callback.el) && callback.secondsRemaining > 0) {
                            newq.push(callback);
                        }
                    }
                    this.queue = newq;
                }
                else {
                    Game.onTick.unsubscribe(this.processQueue);
                }
            };
            this.buildingDetails.resetQueue = function() {
                Game.onTick.unsubscribe(this.processQueue);
                this.queue = [];
            };
            this.buildingDetails.isVisible = function() {
                return this.cfg.getProperty("visible");
            };
            this.buildingDetails.resetDisplay = function(oSelf) {
                this.resetQueue();
                this.dataStore = {};
                oSelf.currentBuilding = undefined;
                if(oSelf.currentBuildingObj) {
                    oSelf.currentBuildingObj.destroy();
                    oSelf.currentBuildingObj = undefined;
                }
                if(oSelf.currentViewConnection) {
                    Lacuna.Pulser.Hide();
                    Util.Connect.abort(oSelf.currentViewConnection);
                }
            };
            
            this.buildingDetails.renderEvent.subscribe(function(){
                this.img = Dom.get("buildingDetailsImg");
                this.name = Dom.get("buildingDetailsName");
                this.desc = Dom.get("buildingDetailsDesc");
                this.timeLeftLi = Dom.get("buildingDetailsTimeLeft");
                
                this.tabView = new YAHOO.widget.TabView("buildingDetailTabs");
                this.tabView.getTabByLabel = function(label) {
                    var tabs = this.get("tabs");
                    for(var t=0; t<tabs.length; t++) {
                        var tab = tabs[t];
                        if(tab.get("label") == label) {
                            return this.getTab(t);
                        }
                    }
                };
                this.tabView.set('activeIndex',0);
            
                this.queue = [];
                this.dataStore = {};
            });
            this.buildingDetails.hideEvent.subscribe(function(){
                this.buildingDetails.resetDisplay(this);
            }, this, true);
            
            this.buildingDetails.render();
            Game.OverlayManager.register(this.buildingDetails);
        },
        _buildBuilderPanel : function() {
            var panelId = "buildingBuilder";
            
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = [
                '<div class="hd">Builder</div>',
                '    <div class="bd">',
                '        <div>Building on X<span id="builderX"></span>:Y<span id="builderY"></span></div>',
                '        <div id="builderMenu" class="yui-content" style="overflow:auto;">',
                '            <ul>',
                '                <li class="builderMenuGroup">',
                '                    <em>Resources</em>',
                '                    <ul>',
                '                        <li><a class="button" href="#Resources/Food">Food</a></li>',
                '                        <li><a class="button" href="#Resources/Ore">Ore</a></li>',
                '                        <li><a class="button" href="#Resources/Water">Water</a></li>',
                '                        <li><a class="button" href="#Resources/Energy">Energy</a></li>',
                '                        <li><a class="button" href="#Resources/Waste">Waste</a></li>',
                '                        <li><a class="button" href="#Resources/Storage">Storage</a></li>',
                '                        <li><a class="button" href="#Resources">All Resources</a></li>',
                '                    </ul>',
                '                </li>',
                '                <li class="builderMenuGroup">',
                '                    <em>Infrastructure</em>',
                '                    <ul>',
                '                        <li><a class="button" href="#Infrastructure/Construction">Construction</a></li>',
                '                        <li><a class="button" href="#Infrastructure/Intelligence">Intelligence</a></li>',
                '                        <li><a class="button" href="#Infrastructure/Happiness">Happiness</a></li>',
                '                        <li><a class="button" href="#Infrastructure/Ships">Ships</a></li>',
                '                        <li><a class="button" href="#Infrastructure/Colonization">Colonization</a></li>',
                '                        <li><a class="button" href="#Infrastructure/Trade">Trade</a></li>',
                '                        <li><a class="button" href="#Infrastructure">All Infrastructure</a></li>',
                '                    </ul>',
                '                </li>',
                '                <li class="builderMenuGroup"><a class="button" href="#Plan"><em>Plans</em></a></li>',
                '                <li class="builderMenuGroup"><a class="button" href="#"><em>All Buildings</em></a></li>',
                '            </ul>',
                '        </div>',
                '        <div id="builderListContainer">',
                '            <div id="builderFilter" style="overflow:hidden">',
                '                <div style="float: right">',
                '                    Available: ',
                '                    <select id="builderTimeFilter">',
                '                        <option value="">All</option>',
                '                        <option value="Now" selected="selected">Now</option>',
                '                        <option value="Soon">Soon</option>',
                '                        <option value="Later">Later</option>',
                '                    </select>',
                '                </div>',
                '                <a href="#" id="builderBuildLink">Build</a><span id="builderFilterTrail"> &gt; <a href="#Resources" class="buildMenuLink">Resources</a> &gt; <span class="buildMenuLink">Ore</span></span>',
                '            </div>',
                '            <div class="yui-content" style="overflow:auto;"><ul id="builderList"></ul></div>',
                '        </div>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.buildingBuilder = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:false,
                close:true,
                underlay:false,
                width:"600px",
                zIndex:9996,
                context:["header","tr","br"]
            });
            this.buildingBuilder.renderEvent.subscribe(function(){
                this.X = Dom.get("builderX");
                this.Y = Dom.get("builderY");
                this.menuView = Dom.get("builderMenu");
                this.listView = Dom.get("builderListContainer");
                this.buildingList = Dom.get("builderList");
                this.timeFilter = Dom.get("builderTimeFilter");
                this.filterTrail = Dom.get("builderFilterTrail");
                
                Event.on("builderTimeFilter", "change", this.updateDisplay, this, true);
                Event.on("builderBuildLink", "click", function(e) {
                    Event.preventDefault(e);
                    this.buildingList.innerHTML = "";
                    Dom.setStyle(this.listView, 'display', 'none');
                    Dom.setStyle(this.menuView, 'display', 'block');
                }, this, true);
                Event.delegate(this.menuView, "click", this.clickBuildMenu, 'a', this, true);
                Event.delegate("builderFilter", "click", this.clickBuildMenu, 'a.buildMenuLink', this, true);
                Event.delegate(this.buildingList, "click", this.build, "button", this, true);
                Event.delegate(this.buildingList, "click", this.build, "img.buildingImage", this, true);
            });
            this.buildingBuilder.hideEvent.subscribe(function(){
                this.buildingBuilder.resetDisplay(this);
            }, this, true);
            this.buildingBuilder.clickBuildMenu = function (e, matchedEl, container) {
                Event.preventDefault(e);
                var frag = matchedEl.href.split("#")[1];
                var tags = frag.split("/");
                var mainTag = tags[0];
                var subTag = tags[1];
                this.viewBuildings(mainTag, subTag);
            };
            this.buildingBuilder.viewBuildings = function(mainTag, subTag) {
                this.mainTag = mainTag;
                this.subTag = subTag;
                Dom.setStyle(this.listView, 'display', 'block');
                Dom.setStyle(this.menuView, 'display', 'none');
                this.buildingList.innerHTML = "";
                var displayTag = mainTag ? mainTag : "All";
                if (subTag) {
                    this.filterTrail.innerHTML = ' &gt; <a class="buildMenuLink" href="#' + mainTag + '">' + displayTag + '</a> &gt; <span class="buildMenuLink">' + subTag + '</span>';
                }
                else {
                    this.filterTrail.innerHTML = ' &gt; <span class="buildMenuLink">' + displayTag + '</span>';
                }
                var filterTag = subTag ? subTag : mainTag;
                if(!this.buildable[mainTag] && !this.buildable[filterTag]) {
                    Lacuna.MapPlanet.BuilderGet({
                        session_id: Game.GetSession(""),
                        body_id: Lacuna.MapPlanet.locationId,
                        x:this.currentTile.x,
                        y:this.currentTile.y,
                        tag:filterTag
                    });
                }
                else {
                    this.updateDisplay();
                }
            };
            this.buildingBuilder.isVisible = function() {
                return this.cfg.getProperty("visible");
            };
            this.buildingBuilder.setTile = function(tile) {
                this.currentTile = tile;
                this.X.innerHTML = tile.x;
                this.Y.innerHTML = tile.y;
            };
            this.buildingBuilder.load = function(b, q, request) {
                this.buildable[request.tag] = b; //store
                this.queue_status = q;
                
                this.updateDisplay();
            };
            this.buildingBuilder.build = function(e, matchedEl, container) {
                Lacuna.MapPlanet.Build(matchedEl.building, this.currentTile.x, this.currentTile.y);
            };
            this.buildingBuilder.resetDisplay = function(oSelf) {
                if(oSelf.currentBuildConnection) {
                    Lacuna.Pulser.Hide();
                    Util.Connect.abort(oSelf.currentBuildConnection);
                }
                delete this.currentTile;
                this.buildable = {};
                Dom.setStyle(this.menuView, 'display', 'block');
                Dom.setStyle(this.listView, 'display', 'none');
            };
            this.buildingBuilder.resetFilter = function() {
                this.timeFilter.options[1].selected = 1;
            };
            this.buildingBuilder.updateDisplay = function() {
                var mainTag = this.mainTag;
                var subTag = this.subTag;
                var b = this.buildable[mainTag] || this.buildable[subTag];
                var list = this.buildingList;
                var filters = {};
                if (subTag) {
                    filters[subTag] = 1;
                }
                if (this.timeFilter.value.length) {
                    filters[this.timeFilter.value] = 1;
                }
                var isQueueFull = this.queue_status.max == this.queue_status.current;
                
                list.parentNode.scrollTop = 0;
                list.innerHTML = "";
                
                var frag = document.createDocumentFragment(),
                    li = document.createElement("li"),
                    filterCount = 0,
                    names = [],
                    reason, br,
                    planet = Game.GetCurrentPlanet(),
                    isMaxPlots = planet.plots_available*1 === 0;
                
                for(var key in filters) {
                    if(filters.hasOwnProperty(key)){
                        filterCount++;
                    }
                }
                
                for(var name in b) {
                    if(b.hasOwnProperty(name)) {
                        var tags = b[name].build.tags,
                            filterMatch = 0;
                        for(var t=0; t<tags.length; t++) {
                            if(filters[tags[t]]){
                                filterMatch++;
                            }
                        }
                        if(filterMatch == filterCount) {
                            names.push(name);
                        }
                    }
                }
                names.sort();
                
                if ( names.length == 0 ) {
                    var mLi = li.cloneNode(false);
                    mLi.innerHTML = "No available buildings.";
                    list.appendChild(mLi);
                }
                
                for(var i=0; i<names.length; i++) {
                    var bd = b[names[i]],
                        nLi = li.cloneNode(false),
                        costs = bd.build.cost,
                        prod = bd.production,
                        noPlots = (isMaxPlots && ! bd.build.no_plot_use),
                        isLater = bd.build.tags.indexOf('Later') > -1,
                        isPlan = bd.build.tags.indexOf('Plan') > -1,
                        isNotBuildable = (isLater || isQueueFull || noPlots );
                        
                    bd.name = names[i];
                    
                    if(bd.build.reason) {
                        reason = bd.build.reason[1];
                    }
                    else {
                        reason = undefined;
                        if (isQueueFull) {
                            reason = "Build queue is full.";
                        }
                        else if (noPlots) {
                            reason = "No plots available.";
                        }
                        else if (isPlan) {
                            var extra_level = bd.build.extra_level*1;
                            if (extra_level) {
                                reason = "Will build to level " + (extra_level + 1) + " for free with plan.";
                            }
                            else {
                                reason = "Will build for free with plan.";
                            }
                        }
                    }

                    nLi.innerHTML = [
                    '<div class="yui-gb" style="padding-bottom: 2px; margin-bottom:2px; border-bottom: 1px solid #52acff;">',
                    '    <div class="yui-u first" style="width:200px;background:transparent url(',Lacuna.MapPlanet.surfaceUrl,') no-repeat center;text-align:center">',
                    '        <img src="',Lib.AssetUrl,'planet_side/',bd.image,'.png" style="width:200px;height:200px;cursor:pointer" class="buildingImage" />',
                    '    </div>',
                    '    <div class="yui-u" style="margin-left: 10px; width:349px">',
                    '        <div class="buildingName">',bd.name,':</div>',
                    reason ? '        <div class="buildingReason">'+reason+'</div>' : '',
                    '        <div class="buildingDesc">',Game.GetBuildingDesc(bd.url),'</div>',
                    '        <table class="buildingStats" cellpadding="0" cellspacing="0">',
                    '            <tr><td></td>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/food.png" title="Food" class="smallFood" /></th>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/ore.png" title="Ore" class="smallOre"  /></th>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/water.png" title="Water" class="smallWater" /></th>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/energy.png" title="Energy" class="smallEnergy" /></th>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/waste.png" title="Waste" class="smallWaste" /></th>',
                    '                <th><img src="',Lib.AssetUrl,'ui/s/happiness.png" title="Happiness" class="smallHappy" /></th>',
                    '            </tr>',
                    '            <tr><th>Cost:</th>',
                    '                <td class=',costs.food > planet.food_stored ? 'low-resource' : '','>',costs.food,'</td>',
                    '                <td class=',costs.ore > planet.ore_stored ? 'low-resource' : '','>',costs.ore,'</td>',
                    '                <td class=',costs.water > planet.water_stored ? 'low-resource' : '','>',costs.water,'</td>',
                    '                <td class=',costs.energy > planet.energy_stored ? 'low-resource' : '','>',costs.energy,'</td>',
                    '                <td>',costs.waste,'</td>',
                    '                <td></td>',
                    '            </tr>',
                    '            <tr><th>Prod:</th>',
                    '                <td class=',-1*prod.food_hour > planet.food_hour ? 'low-resource' : '','>',prod.food_hour,'/hr</td>',
                    '                <td class=',-1*prod.ore_hour > planet.ore_hour ? 'low-resource' : '','>',prod.ore_hour,'/hr</td>',
                    '                <td class=',-1*prod.water_hour > planet.water_hour ? 'low-resource' : '','>',prod.water_hour,'/hr</td>',
                    '                <td class=',-1*prod.energy_hour > planet.energy_hour ? 'low-resource' : '','>',prod.energy_hour,'/hr</td>',
                    '                <td>',prod.waste_hour,'/hr</td>',
                    '                <td>',prod.happiness_hour,'/hr</td>',
                    '            </tr>',
                    '        </table>',
                    '        <div style="margin-top: 5px; text-align: center; padding-left: 20px; height: 30px">',
                    isNotBuildable ? '' : '            <button style="width: 100px; height: 30px; font-size: 12pt">Build</button>',
                    '            <img class="smallTime" style="margin-left: ',
                    isNotBuildable ? '120px' : '20px',
                    '; vertical-align: middle" src="',Lib.AssetUrl,'ui/s/time.png" />',Lib.formatTime(costs.time),' sec',
                    '        </div>',
                    '    </div>',
                    '</div>'].join('');
                    
                    if(!isNotBuildable) {
                        Sel.query("button", nLi, true).building = bd;
                        Sel.query("img.buildingImage", nLi, true).building = bd;
                    }
                    
                    frag.appendChild(nLi);
                }

                list.appendChild(frag);
                list.parentNode.scrollTop = 0;
            };
            
            this.buildingBuilder.render();
            Game.OverlayManager.register(this.buildingBuilder);
        },
        
        _fireRpcSuccess : function(result){
            this.fireEvent("onMapRpc", result);
        },
        _fireQueueAdd : function(obj) {
            if(this.buildingDetails.isVisible()) {
                this.buildingDetails.addQueue(obj.seconds, obj.fn, obj.el, obj.scope);
            }
        },
        _fireBuildingReload : function(building) {
            this.ReloadBuilding(building);
        },
        _fireQueueReset : function() {
            this.buildingDetails.resetQueue();
        },
        _fireAddTab : function(tab) {
            if(this.buildingDetails.isVisible()) {
                this.buildingDetails.tabView.addTab(tab);
            }
        },
        _fireRemoveTab : function(tab) {
            if(this.buildingDetails.isVisible()) {
                this.buildingDetails.tabView.selectTab(0);
                this.buildingDetails.tabView.removeTab(tab);
            }
        },
        _fireSelectTab : function(tabIndex) {
            if(this.buildingDetails.isVisible()) {
                this.buildingDetails.tabView.selectTab(tabIndex);
            }
        },
        _fireReloadTabs : function() {
            if(this.currentBuildingObj) {
                var panel = this.buildingDetails;
                //remove any tabs
                while(panel.tabView.get("tabs").length > 0){
                    var tab = panel.tabView.getTab(0);
                    Event.purgeElement(tab.get("contentEl"));
                    panel.tabView.removeTab(tab);
                }
                //add again
                var tabs = this.currentBuildingObj.getTabs();
                for(var at=0; at<tabs.length; at++) {
                    panel.tabView.addTab(tabs[at]);
                }
                //select first tab
                panel.tabView.selectTab(0);
            }
        },
        _fireUpdateTile : function(building) {
            if(building && building.id && building.name) {
                this.ReloadBuilding(building);
            }
        },
        _fireUpdateMap : function() {
            this.Refresh();
        },
        _fireRemoveTile : function(building) {
            if(building && building.id) {
                delete this.buildings[building.id];
                this._map.removeTile(building.x, building.y);
            }
        },
        _fireHide : function() {
            this.buildingDetails.hide();
        },
        
        IsVisible : function() {
            return this._isVisible;
        },
        MapVisible : function(visible) {
            if(this._isVisible != visible) {
                if(this._elGrid) {
                    this._isVisible = visible;
                    //YAHOO.log(visible, "info", "MapPlanet.MapVisible");
                    if(visible) {
                        if(!Dom.inDocument(this._elGrid)) {
                            document.getElementById("content").appendChild(this._elGrid);
                        }
                        //Dom.setStyle(this._elGrid, "display", visible ? "" : "none");
                    }
                    else {
                        this._elGrid = this._elGrid.parentNode.removeChild(this._elGrid);
                    }
                    if (visible && this._map) {
                        this.Resize();
                    }
                }
                if(!visible) {
                    this.buildingDetails.hide();
                    this.buildingBuilder.hide();
                }
            }
        },
        Mapper : function(oArgs) {
            //YAHOO.log(oArgs.buildings, "debug", "Mapper");
            this.buildings = oArgs.buildings;
            this.surfaceUrl = [Lib.AssetUrl,'planet_side/',oArgs.body.surface_image,'.jpg'].join('');
            Dom.setStyle("buildingDetailsImgBkgd","background",['transparent url(',this.surfaceUrl,') no-repeat left top'].join(''));
            //clean up numbers in buidlings
            for(var key in this.buildings) {
                if(this.buildings.hasOwnProperty(key)){
                    this.buildings[key] = this.CleanBuilding(this.buildings[key]);
                }
            }
            //create/update map
            if(!this._gridCreated) {
                var planetMap = document.createElement("div");
                planetMap.id = "planetMap";
                this._elGrid = document.getElementById("content").appendChild(planetMap);
                this.MapVisible(true); //needs to be visible before we set sizing and  map
                this.SetSize();
                
                var map = new Lacuna.Mapper.PlanetMap("planetMap", {surfaceUrl:this.surfaceUrl});
                map.addTileData(this.buildings);
                map.setPlotsAvailable(oArgs.status.body.plots_available*1);
                //map.imgUrlLoc = Lib.AssetUrl + 'ui/mapiator/';
                map.subscribe("onReloadTile", this.ReLoadTile, this, true);
                //draw what we got
                map.redraw();
                //move to command
                map.setCenterToCommand();
                
                this._map = map;
                this._gridCreated = true;
                
                Event.delegate(this._map.mapDiv, "click", function(e, matchedEl, container) {
                    var planet = Game.GetCurrentPlanet();
                    if(!this._map.controller.isDragging()) {
                        var tile = this._map.tileLayer.findTileById(matchedEl.parentNode.id);
                        if(tile && tile.data) {
                            this.DetailsView(tile);
                        }
                        else { //if(planet.size*1 > planet.building_count*1) {
                            this.BuilderView(tile);
                        }
                        /*else {
                            alert("You've already reached the maximum number of buildings for this planet");
                        }*/
                    }
                }, "div.planetMapTileActionContainer", this, true); //"button.planetMapTileActionButton"
            }
            else {
                this.MapVisible(true); //needs to be visible before we set sizing and  map
                if(!this._elGrid.parentNode) {
                    document.getElementById("content").appendChild(this._elGrid);
                }
                this._map.reset();
                this._map.setSurfaceUrl(this.surfaceUrl);
                this._map.setPlotsAvailable(oArgs.status.body.plots_available*1);
                this._map.addTileData(this.buildings);
                this._map.refresh();
            }
            
            Lacuna.Pulser.Hide();
        },
        Load : function(planetId, showNotify, silent) {
            Lacuna.Pulser.Show();
            if(showNotify) {
                Lacuna.Notify.Show(planetId);
            }
            else {
                Lacuna.Notify.Hide();
            }
            this.locationId = planetId;
            this.ReLoad(silent);
        },
        Refresh : function() {
            if(this.locationId) {
                var BodyServ = Game.Services.Body,
                    data = {
                        session_id: Game.GetSession(""),
                        body_id: this.locationId
                    };
                
                BodyServ.get_buildings(data,{
                    success : function(o){
                        //YAHOO.log(o, "info", "MapPlanet.Refresh");
                        this.fireEvent("onMapRpc", o.result);
                        var planet = Game.GetCurrentPlanet();
                        this._map.setPlotsAvailable(planet.plots_available*1);
                        this._map.addTileData(o.result.buildings, true);
                        this._map.refresh();
                    },
                    scope:this
                });
            }
        },
        ReLoad : function(silent) {
            if(this.locationId) {
                var BodyServ = Game.Services.Body,
                    data = {
                        session_id: Game.GetSession(""),
                        body_id: this.locationId
                    };
                
                BodyServ.get_buildings(data,{
                    success : function(o){
                        //YAHOO.log(o, "info", "MapPlanet.ReLoad");
                        this.fireEvent("onMapRpc", o.result);
                        if(silent) {
                            Lacuna.Pulser.Hide();
                        }
                        else {
                            this.Mapper(o.result);
                        }
                    },
                    scope:this
                });
            }
        },
        ReLoadTile : function(id) {
            //YAHOO.log(this._isVisible, "info", "MapPlanet.ReLoadTile._isVisible");
            if(this._isVisible && id) {
                //YAHOO.log(id, "info", "MapPlanet.ReLoadTile.id");
                var building = this.buildings[id];
                if(building) {
                    //YAHOO.log(building, "info", "MapPlanet.ReLoadTile.building");
                    
                    this.ViewData(id, building.url, {
                        url:building.url
                    }, building.x, building.y);
                }
            }
        },
        SetSize : function() {
            var size = Game.GetSize();
            Dom.setStyle(this._elGrid, "width", size.w+"px");
            Dom.setStyle(this._elGrid, "height", size.h+"px");
        },
        Resize : function() {
            this.SetSize();
            this._map.resize();
        },
        Reset : function() {
            delete this.locationId;
            if(this._map) {
                this._map.reset();
            }
            this.buildingDetails.resetQueue();
            this.buildingBuilder.resetFilter();
            this.MapVisible(false);
        },

        BuilderView : function(tile) {
            //YAHOO.log(tile, "info", "BuilderView");
            
            Game.OverlayManager.hideAllBut(this.buildingBuilder.id);
            this.buildingBuilder.resetDisplay(this);
            this.buildingBuilder.setTile(tile);
            this.buildingBuilder.show();

            var Ht = Game.GetSize().h - 75;
            if(Ht > 420) { Ht = 420; }
            Dom.setStyle(Dom.get('builderMenu'),'height',Ht + 'px');
            Dom.setStyle(Dom.get('builderList').parentNode,'height',Ht + 'px');
        },
        BuilderGet : function(data) {
            Lacuna.Pulser.Show();
            this.currentBuildConnection = Game.Services.Body.get_buildable(data,{
                success : function(o){
                    delete this.currentBuildConnection;
                    //YAHOO.log(o, "info", "MapPlanet.BuilderGet.success");
                    this.fireEvent("onMapRpc", o.result);
                    
                    this.BuilderProcess(o.result, data);
                },
                failure : function(o){
                    delete this.currentBuildConnection;
                },
                scope:this
            });
        },
        BuilderProcess : function(oResults, request) {
            if(this.buildingBuilder.isVisible() && oResults) {
                var b = oResults.buildable;
                var q = oResults.build_queue;
                if(b) {
                    this.buildingBuilder.load(b, q, request);
                }
            }
            Lacuna.Pulser.Hide();
        },
        NotIsolationist : function(building) {
            if(Game.EmpireData.is_isolationist == "1") {
                if(building.url == "/espionage" && !confirm("If you build an Espionage Ministry you will no longer be considered an Isolationist and you will be open to attack.  Are you sure you want to do this?")) {
                    return true;
                }
                else if(building.url == "/munitionslab" && !confirm("If you build a Munitions Lab you will no longer be considered an Isolationist and you will be open to attack.  Are you sure you want to do this?")) {
                    return true;
                }
            }
        },
        Build : function(building, x, y) {
            if(this.NotIsolationist(building)) {
                return;
            }
        
            Lacuna.Pulser.Show();
            var BuildingServ = Game.Services.Buildings.Generic,
                data = {
                    session_id: Game.GetSession(""),
                    planet_id: this.locationId,
                    x:x,
                    y:y
                };
            
            BuildingServ.build(data,{
                success : function(o){
                    //YAHOO.log(o, "info", "MapPlanet.Build.success");
                    Lacuna.Pulser.Hide();
                    this.fireEvent("onMapRpc", o.result);
                    this.buildingBuilder.hide();

                    var b = building; //originally passed in building data from BuildProcess
                    b.id = o.result.building.id;
                    b.level = o.result.building.level;
                    b.pending_build = o.result.building.pending_build;
                    b.x = x;
                    b.y = y;
                    //YAHOO.log(b, "info", "MapPlanet.Build.success.building");
                    //this.UpdateCost(b.build.cost);
                    
                    this.ReloadBuilding(b);
                },
                failure : function(o){
                    this.buildingBuilder.hide();
                },
                scope:this,
                target:building.url
            });
        },

        ViewData : function(id, url, callback, x, y) {
            var BuildingServ = Game.Services.Buildings.Generic,
                data = {
                    session_id: Game.GetSession(""),
                    building_id: id
                };
            
            return BuildingServ.view(data,{
                success : function(o){
                    //YAHOO.log(o, "info", "MapPlanet.ViewData.success");
                    this.fireEvent("onMapRpc", o.result);
                    var newB = o.result.building;
                    newB.url = callback.url;
                    newB.x = x;
                    newB.y = y;
                    newB.updated = (newB.level != this.buildings[newB.id].level);
                    this.ReloadBuilding(newB);
                    /*newB = this.CleanBuilding(newB);
                    this.buildings[newB.id] = newB;
                    this._map.refreshTile(newB);
                    */

                    if(callback && callback.success) {
                        callback.success.call(this, o.result, callback.url, x, y);
                    }
                    Lacuna.Pulser.Hide();
                },
                failure : function(o){
                    if(callback && callback.failure) {
                        callback.failure.call(this, o, callback.url, x, y);
                        return true;
                    }
                },
                scope:this,
                target:url
            });
        },
        DetailsView : function(tile) {
            //YAHOO.log(tile, "info", "DetailsView");

            Lacuna.Pulser.Show();
            var panel = this.buildingDetails;
            Game.OverlayManager.hideAllBut(panel.id);
            panel.resetDisplay(this);
            //clear values
            panel.name.innerHTML = "Loading";
            panel.img.src = this.surfaceUrl;
            panel.desc.innerHTML = "";
            panel.timeLeftLi.innerHTML = "";
            /*panel.curEnergy.innerHTML = "";
            panel.curFood.innerHTML = "";
            panel.curHappiness.innerHTML = "";
            panel.curOre.innerHTML = "";
            panel.curWaste.innerHTML = "";
            panel.curWater.innerHTML = "";
            Event.purgeElement(panel.upgradeUl);
            panel.upgradeUl.innerHTML = "";
            Event.purgeElement(panel.upgradeProdUl);
            panel.upgradeProdUl.innerHTML = "";*/
            
            panel.tabView.set('activeTab',null);
            while(panel.tabView.get("tabs").length > 0){
                var tab = panel.tabView.getTab(0);
                Event.purgeElement(tab.get("contentEl"), true);
                panel.tabView.removeTab(tab);
            }
            
            this.buildingDetails.show(); //show before we get data so it looks like we're doing something
            
            this.currentViewConnection = this.ViewData(tile.data.id, tile.data.url, {
                success:function(oResults, url, x, y){
                    delete this.currentViewConnection;
                    this.DetailsProcess(oResults, url, x, y);
                },
                failure:function(o){
                    delete this.currentViewConnection;
                },
                url:tile.data.url
            }, tile.x, tile.y);
        },
        BuildingFactory : function(result) {            
            var classConstructor = FactoryMap[result.building.url] || Lacuna.buildings.Building,
                classObj = new classConstructor(result, this.locationId);
            if(classObj) {
                classObj.subscribe("onMapRpc", this._fireRpcSuccess, this, true);
                classObj.subscribe("onQueueAdd", this._fireQueueAdd, this, true);
                classObj.subscribe("onQueueReset", this._fireQueueReset, this, true);
                classObj.subscribe("onAddTab", this._fireAddTab, this, true);
                classObj.subscribe("onRemoveTab", this._fireRemoveTab, this, true);
                classObj.subscribe("onSelectTab", this._fireSelectTab, this, true);
                classObj.subscribe("onReloadTabs", this._fireReloadTabs, this, true);
                classObj.subscribe("onUpdateTile", this._fireUpdateTile, this, true);
                classObj.subscribe("onUpdateMap", this._fireUpdateMap, this, true);
                classObj.subscribe("onRemoveTile", this._fireRemoveTile, this, true);
                classObj.subscribe("onHide", this._fireHide, this, true);
            }
            
            return classObj;
        },
        DetailsProcess : function(oResults, url, x, y) {
            var building = oResults.building,
                panel = this.buildingDetails,
                currBuildingId = this.currentBuilding ? this.currentBuilding.building.id : undefined;
            if(panel.isVisible() && (currBuildingId != oResults.building.id)) {    
                building.url = url;
                building.x = x;
                building.y = y;
                oResults.building = building;
                
                if(panel.pager) {panel.pager.destroy();}
                        
                this.currentBuilding = oResults; //assign new building            
                //fill production tab
                panel.name.innerHTML = [building.name, ' ', building.level].join('');
                panel.img.src = [Lib.AssetUrl, "planet_side/100/", building.image, ".png"].join('');
                panel.desc.innerHTML = Game.GetBuildingDesc(building.url);
                if(building.pending_build) {
                    panel.timeLeftLi.innerHTML = "<label>Build Time Remaining:</label>" + Lib.formatTime(building.pending_build.seconds_remaining);
                    if(building.pending_build.seconds_remaining > 0) {
                        panel.addQueue(building.pending_build.seconds_remaining,
                            function(remaining, elm){
                                var rf = Math.round(remaining);
                                if(rf <= 0) {
                                    elm.innerHTML = "";
                                    YAHOO.log("Complete","info","buildingDetails.showEvent.BuildTimeRemaining");
                                    this.DetailsView({data:{id:building.id,url:building.url},x:building.x,y:building.y});
                                }
                                else {
                                    elm.innerHTML = "<label>Build Time Remaining:</label>" + Lib.formatTime(rf);
                                }
                            },
                            panel.timeLeftLi,
                            this
                        );
                    }
                }
                else {
                    panel.timeLeftLi.innerHTML = "";
                }

                var output, stored, 
                    bq, ul, li, div;
                
                //create building specific tabs and functionality
                this.currentBuildingObj = this.BuildingFactory(oResults);
                if(this.currentBuildingObj) {
                    //remove any tabs
                    while(panel.tabView.get("tabs").length > 0){
                        var tab = panel.tabView.getTab(0);
                        Event.purgeElement(tab.get("contentEl"));
                        panel.tabView.removeTab(tab);
                    }
                    var tabs = this.currentBuildingObj.getTabs();
                    for(var at=0; at<tabs.length; at++) {
                        panel.tabView.addTab(tabs[at]);
                    }
                    this.currentBuildingObj.load();
                }
                
                Dom.setStyle("buildingDetailTabs", "display", "");
                panel.tabView.selectTab(0);
                panel.setFirstLastFocusable();
                panel.focusFirst();
            }
        },

        CleanBuilding : function(building) {
            building.efficiency = (building.efficiency || 100)*1;
            if(building.repair_costs && building.efficiency == 100) {
                delete building.repair_costs;
            }
            if(building.pending_build) {
                building.pending_build.seconds_remaining *= 1;
            }
            if(building.work) {
                building.work.seconds_remaining *= 1;
            }
            return building;
        },
        ReloadBuilding : function(building) {
            //YAHOO.log(building, "debug", "ReloadBuilding");

            building = this.CleanBuilding(building);
            this.buildings[building.id] = building;
            this._map.refreshTile(building);
            /*
            var ms = (building.pending_build.seconds_remaining * 1000);
            YAHOO.log({b:building, time:ms}, "debug", "MapPlanet.ReloadBuilding");
            Game.QueueAdd(building.id, Lib.QueueTypes.PLANET, ms);
            */
        }
    };
    Lang.augmentProto(MapPlanet, Util.EventProvider);
    
    Lacuna.MapPlanet = new MapPlanet();
})();
YAHOO.register("mapPlanet", YAHOO.lacuna.MapPlanet, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/mapPlanet.js","/")
},{"buffer":71,"oMfpAn":75}],54:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.MapStar == "undefined" || !YAHOO.lacuna.MapStar) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var MapStar = function() {
        this.createEvent("onMapRpc");
        //this.createEvent("onChangeToSystemView");
        this.createEvent("onChangeToPlanetView");
        
        this._renameLabel = "Rename";
        this._sendSpiesLabel = "Send Spy";
        this._fetchSpiesLabel = "Fetch Spy";
        this._miningLabel = "Mining";
        this._excavLabel = "Excavators";
        
        this._buildDetailsPanel();
        this._buildPlanetDetailsPanel();
        this._buildFindPanel();
    };
    MapStar.prototype = {
        _buildDetailsPanel : function() {
            var panelId = "starDetails";
            
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Details</div>',
                '<div class="bd">',
                '    <div class="yui-g">',
                '        <div class="yui-u first" id="starDetailsImg" class="background:black:width:100px;">',
                '        </div>',
                '        <div class="yui-u" id="starDetailsInfo">',
                '        </div>',
                '    </div>',
                '    <div id="starDetailTabs" class="yui-navset">',
                '        <ul class="yui-nav">',
                '            <li><a href="#"><em>Send</em></a></li>',
                '            <li><a href="#"><em>Fleet</em></a></li>',
                '            <li><a href="#"><em>Unavailable</em></a></li>',
                '            <li><a href="#"><em>Incoming</em></a></li>',
                '        </ul>',
                '        <div class="yui-content">',
                '            <div><div><ul id="starDetailSendShips"></ul></div></div>',
                '            <div><div style="border-bottom:1px solid #52acff;text-align:right;">Set speed:<input type="text" id="starDetailSetSpeed" value="0" size="6"><button type="button" id="starDetailSendFleetSubmit">Send Fleet</button></div><div><ul id="starDetailSendFleet"></ul></div></div>',
                '            <div><div><ul id="starDetailUnavailShips"></ul></div></div>',
                '            <div><div><ul id="starDetailIncomingShips"></ul></div></div>',
                '        </div>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.starDetails = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:false,
                close:true,
                underlay:false,
                width:"500px",
                zIndex:9997,
                context:["header","tl","bl"]
            });
            this.starDetails.addQueue = function(seconds, queueFn, elm, sc) {
                this.queue = this.queue || [];
                //check if the queue is empty and store
                var notStarted = this.queue.length == 0;
                //push new queue item so it's immediately available for the tick
                this.queue.push({secondsRemaining:seconds*1, el:elm, fn:queueFn, scope:sc});
                //make sure we subscribe to the tick
                if(notStarted) {
                    Game.onTick.subscribe(this.processQueue, this, true);
                }
            };
            this.starDetails.processQueue = function(e, oArgs) {
                if(this.queue.length > 0) {
                    var queue = this.queue,
                        diff = oArgs[0]/1000,
                        newq = [];

                    while(queue.length > 0) {
                        var callback = queue.pop();
                        callback.secondsRemaining -= diff;
                        if(callback.secondsRemaining > 0) {
                            newq.push(callback);
                        }
                        callback.fn.call(callback.scope || this, callback.secondsRemaining, callback.el);
                    }
                    this.queue = newq;
                }
                else {
                    Game.onTick.unsubscribe(this.processQueue);
                }
            };
            this.starDetails.resetQueue = function() {
                Game.onTick.unsubscribe(this.processQueue);
                this.queue = [];
            };
            this.starDetails.addTab = function(tab) {
                this.removeableTabs = this.removeableTabs || [];
                this.removeableTabs.push(tab);
                this.tabView.addTab(tab);
            };
            this.starDetails.removeTabs = function() {
                var rt = this.removeableTabs;
                if(rt && rt.length > 0) {
                    for(var n=0; n<rt.length; n++) {
                        Event.purgeElement(rt[n].get("contentEl"), true);
                        this.tabView.removeTab(rt[n]);
                    }
                    delete this.removeableTabs;
                }
                this.tabView.selectTab(0);
            };
            this.starDetails.resetDisplay = function(oSelf) {
                delete oSelf.currentShips;
                delete oSelf.selectedStar;
                this.resetQueue();
                this.removeTabs();
            };
            
            this.starDetails.renderEvent.subscribe(function(){
                this.starDetails.tabView = new YAHOO.widget.TabView("starDetailTabs");
                
                /*Event.delegate("starDetailsInfo", "click", function(e, matchedEl, container){
                    var data = this.selectedStar;
                    if(data) {
                        if(matchedEl.innerHTML == "Send Probe") {
                            this.SendProbe(data);
                        }
                    }
                }, "button", this, true);*/
            }, this, true);
            this.starDetails.hideEvent.subscribe(function(){
                this.starDetails.resetDisplay(this);
            }, this, true);
            this.starDetails.showEvent.subscribe(function(){
                this.bringToTop();
            });
            
            this.starDetails.isStarPanel = true;
            
            this.starDetails.render();
            Game.OverlayManager.register(this.starDetails);
        },
        _buildPlanetDetailsPanel : function() {
            var panelId = "planetDetails";
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Details</div>',
                '<div class="bd">',
                '    <div class="yui-g">',
                '        <div class="yui-u first" id="planetDetailsImg">',
                '        </div>',
                '        <div class="yui-u" id="planetDetailsInfo">',
                '        </div>',
                '    </div>',
                '    <div id="planetDetailTabs" class="yui-navset">',
                '        <ul class="yui-nav">',
                '            <li><a href="#planetDetailOre"><em>Ore</em></a></li>',
                '            <li><a href="#"><em>Send</em></a></li>',
                '            <li><a href="#"><em>Fleet</em></a></li>',
                '            <li><a href="#"><em>Unavailable</em></a></li>',
                '            <li><a href="#"><em>Incoming</em></a></li>',
                '            <li><a href="#"><em>Orbiting</em></a></li>',
                '            <li><a href="#"><em>',this._miningLabel,'</em></a></li>',
                '            <li><a href="#"><em>',this._excavLabel,'</em></a></li>',
                '            <li><a href="#planetDetailRename"><em>',this._renameLabel,'</em></a></li>',
                '            <li><a href="#planetDetailSendSpies"><em>',this._sendSpiesLabel,'</em></a></li>',
                '            <li><a href="#planetDetailFetchSpies"><em>',this._fetchSpiesLabel,'</em></a></li>',
                '        </ul>',
                '        <div class="yui-content">',
                '            <div id="planetDetailOre">',
                '                <div class="yui-g">',
                '                    <div class="yui-u first">',
                '                        <ul>',
                '                            <li><label>Anthracite</label><span class="buildingDetailsNum" id="planetDetailsAnthracite"></span></li>',
                '                            <li><label>Bauxite</label><span class="buildingDetailsNum" id="planetDetailsBauxite"></span></li>',
                '                            <li><label>Beryl</label><span class="buildingDetailsNum" id="planetDetailsBeryl"></span></li>',
                '                            <li><label>Chalcopyrite</label><span class="buildingDetailsNum" id="planetDetailsChalcopyrite"></span></li>',
                '                            <li><label>Chromite</label><span class="buildingDetailsNum" id="planetDetailsChromite"></span></li>',
                '                            <li><label>Fluorite</label><span class="buildingDetailsNum" id="planetDetailsFluorite"></span></li>',
                '                            <li><label>Galena</label><span class="buildingDetailsNum" id="planetDetailsGalena"></span></li>',
                '                            <li><label>Goethite</label><span class="buildingDetailsNum" id="planetDetailsGoethite"></span></li>',
                '                            <li><label>Gold</label><span class="buildingDetailsNum" id="planetDetailsGold"></span></li>',
                '                            <li><label>Gypsum</label><span class="buildingDetailsNum" id="planetDetailsGypsum"></span></li>',
                '                        </ul>',
                '                    </div>',
                '                    <div class="yui-u">',
                '                        <ul>',
                '                            <li><label>Halite</label><span class="buildingDetailsNum" id="planetDetailsHalite"></span></li>',
                '                            <li><label>Kerogen</label><span class="buildingDetailsNum" id="planetDetailsKerogen"></span></li>',
                '                            <li><label>Magnetite</label><span class="buildingDetailsNum" id="planetDetailsMagnetite"></span></li>',
                '                            <li><label>Methane</label><span class="buildingDetailsNum" id="planetDetailsMethane"></span></li>',
                '                            <li><label>Monazite</label><span class="buildingDetailsNum" id="planetDetailsMonazite"></span></li>',
                '                            <li><label>Rutile</label><span class="buildingDetailsNum" id="planetDetailsRutile"></span></li>',
                '                            <li><label>Sulfur</label><span class="buildingDetailsNum" id="planetDetailsSulfur"></span></li>',
                '                            <li><label>Trona</label><span class="buildingDetailsNum" id="planetDetailsTrona"></span></li>',
                '                            <li><label>Uraninite</label><span class="buildingDetailsNum" id="planetDetailsUraninite"></span></li>',
                '                            <li><label>Zircon</label><span class="buildingDetailsNum" id="planetDetailsZircon"></span></li>',
                '                        </ul>',
                '                    </div>',
                '                </div>',
                '            </div>',
                '            <div><div><ul id="planetDetailSendShips"></ul></div></div>',
                '            <div><div style="border-bottom:1px solid #52acff;text-align:right;">Set speed:<input type="text" id="planetDetailSetSpeed" value="0" size="6"><button type="button" id="planetDetailSendFleetSubmit">Send Fleet</button></div><div><ul id="planetDetailSendFleet"></ul></div></div>',
                '            <div><div><ul id="planetDetailUnavailShips"></ul></div></div>',
                '            <div><div><ul id="planetDetailIncomingShips"></ul></div></div>',
                '            <div><div><ul id="planetDetailOrbitingShips"></ul></div></div>',
                '            <div>',
                '                <ul class="shipHeader clearafter">',
                '                    <li class="shipName">From Empire</li>',
                '                </ul>',
                '                <div><ul id="planetDetailMiningShips"></ul></div>',
                '            </div>',
                '            <div>',
                '                <ul class="shipHeader clearafter">',
                '                    <li class="shipName">From Empire</li>',
                '                </ul>',
                '                <div><ul id="planetDetailExcavators"></ul></div>',
                '            </div>',
                '            <div id="planetDetailRename"><ul>',
                '                <li><label>New Planet Name: </label><input type="text" id="planetDetailNewName" maxlength="100" /></li>',
                '                <li class="alert" id="planetDetailRenameMessage"></li>',
                '                <li><button type="button" id="planetDetailRenameSubmit">Rename</button></li>',
                '            </ul></div>',
                '            <div id="planetDetailSendSpies">',
                '                <div class="planetDetailSelectSpies">',
                '                    <div class="planetDetailSpiesMessage"></div><button>Send</button>',
                '                    <ul class="planetDetailSpiesList">',
                '                    </ul>',
                '                </div>',
                '                <div class="planetDetailSelectSpyShip">',
                '                    <div class="planetDetailSpyShipHeader">',
                '                        <div class="planetDetailSpyShipMessage">Sending <span class="count"></span> spies.  Select Ship:</div><button>Back</button>',
                '                    </div>',
                '                    <ul class="planetDetailSpyShipList"></ul>',
                '                </div>',
                '            </div>',
                '            <div id="planetDetailFetchSpies">',
                '                <div class="planetDetailSelectSpies">',
                '                    <div class="planetDetailSpiesMessage"></div><button>Fetch</button>',
                '                    <ul class="planetDetailSpiesList"></ul>',
                '                </div>',
                '                <div class="planetDetailSelectSpyShip">',
                '                    <div class="planetDetailSpyShipHeader">',
                '                        <div class="planetDetailSpyShipMessage">Fetching <span class="count"></span> spies.  Select Ship:</div><button>Back</button>',
                '                    </div>',
                '                    <ul class="planetDetailSpyShipList">',
                '                    </ul>',
                '                </div>',
                '            </div>',
                '        </div>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.planetDetails = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:false,
                close:true,
                underlay:false,
                width:"710px",
                zIndex:9997,
                context:["header","tr","br", ["beforeShow", "windowResize"], [-200,40]]
            });
            this.planetDetails.addQueue = function(seconds, queueFn, elm, sc) {
                this.queue = this.queue || [];
                //check if the queue is empty and store
                var notStarted = this.queue.length == 0;
                //push new queue item so it's immediately available for the tick
                this.queue.push({secondsRemaining:seconds*1, el:elm, fn:queueFn, scope:sc});
                //make sure we subscribe to the tick
                if(notStarted) {
                    Game.onTick.subscribe(this.processQueue, this, true);
                }
            };
            this.planetDetails.processQueue = function(e, oArgs) {
                if(this.queue.length > 0) {
                    var queue = this.queue,
                        diff = oArgs[0]/1000,
                        newq = [];

                    while(queue.length > 0) {
                        var callback = queue.pop();
                        callback.secondsRemaining -= diff;
                        if(callback.secondsRemaining > 0) {
                            newq.push(callback);
                        }
                        callback.fn.call(callback.scope || this, callback.secondsRemaining, callback.el);
                    }
                    this.queue = newq;
                }
                else {
                    Game.onTick.unsubscribe(this.processQueue);
                }
            };
            this.planetDetails.resetQueue = function() {
                Game.onTick.unsubscribe(this.processQueue);
                this.queue = [];
            };
            this.planetDetails.addTab = function(tab) {
                this.removeableTabs = this.removeableTabs || [];
                this.removeableTabs.push(tab);
                this.tabView.addTab(tab);
            };
            this.planetDetails.removeTabs = function() {
                var rt = this.removeableTabs;
                if(rt && rt.length > 0) {
                    for(var n=0; n<rt.length; n++) {
                        this.tabView.removeTab(rt[n]);
                    }
                    delete this.removeableTabs;
                }
                //this.tabView.selectTab(0);
            };
            this.planetDetails.resetDisplay = function(oSelf) {
                delete oSelf.currentShips;
                delete oSelf.selectedBody;
                delete oSelf.selectedTile;
                this.resetQueue();
                this.removeTabs();
                
                var send = Dom.get("planetDetailSendShips"),
                    fleet = Dom.get("planetDetailSendFleet"),
                    unavail = Dom.get("planetDetailUnavailShips"),
                    mining = Dom.get("planetDetailMiningShips"),
                    excav = Dom.get("planetDetailExcavators"),
                    incoming = Dom.get("planetDetailIncomingShips"),
                    orbiting = Dom.get("planetDetailOrbitingShips");
                
                if(send) {
                    Event.purgeElement(send, true);
                    send.innerHTML = "";
                }
                if(fleet) {
                    Event.purgeElement(fleet, true);
                    fleet.innerHTML = "";
                }
                if(unavail) {
                    Event.purgeElement(unavail, true);
                    unavail.innerHTML = "";
                }
                if(mining) {
                    Event.purgeElement(mining, true);
                    mining.innerHTML = "";
                }
                if(excav) {
                    Event.purgeElement(excav, true);
                    excav.innerHTML = "";
                }
                if(incoming) {
                    Event.purgeElement(incoming, true);
                    incoming.innerHTML = "";
                }
                if(orbiting) {
                    Event.purgeElement(orbiting, true);
                    orbiting.innerHTML = "";
                }
            };
            
            this.planetDetails.renderEvent.subscribe(function(){
                Event.delegate("planetDetailsInfo", "click", this.DetailsClick, "button", this, true);
                var tv = this.planetDetails.tabView = new YAHOO.widget.TabView("planetDetailTabs");
                
                var getShips = function(e) {
                    if(e.newValue) {
                        this.GetShips(this.planetDetails,{body_id:this.selectedBody.id});
                    }
                };
                //Send Tab
                tv.getTab(1).subscribe('beforeActiveChange', getShips, this, true);
                //Send Fleet Tab
                tv.getTab(2).subscribe('beforeActiveChange', getShips, this, true);
                //Unavailable Tab
                tv.getTab(3).subscribe('beforeActiveChange', getShips, this, true);
                //Incoming Tab
                tv.getTab(4).subscribe('beforeActiveChange', getShips, this, true);
                //Orbiting Tab
                tv.getTab(5).subscribe('beforeActiveChange', getShips, this, true);
                //Mining Tab
                tv.getTab(6).subscribe('beforeActiveChange', getShips, this, true);
                //Excavator Tab
                tv.getTab(7).subscribe('beforeActiveChange', getShips, this, true);
                
                Event.on("planetDetailSendFleetSubmit", "click", this.FleetSend, this, true);
                Event.on("starDetailSendFleetSubmit", "click", this.FleetSend, this, true);
                
                
                var spyTabs = {
                    "planetDetailSendSpies" : 9,
                    "planetDetailFetchSpies" : 10
                };
                var tabChange = function(e, tabEl) {
                        if (e.newValue) {
                            this.ShowSpies(tabEl);
                        }
                    },
                    hideEventFn = function(){
                        delete this.avail.spyShips;
                        delete this.avail.spies;
                    };
                for (var tabId in spyTabs) {
                    if (spyTabs.hasOwnProperty(tabId)) {
                        var tab = tv.getTab(spyTabs[tabId]);
                        var tabEl = Dom.get(tabId);
                        tab.subscribe('beforeActiveChange', tabChange, tabEl, this);
                        tabEl.elSpiesPane = Sel.query('.planetDetailSelectSpies', tabEl, true);
                        tabEl.elSpyShipsPane = Sel.query('.planetDetailSelectSpyShip', tabEl, true);
                        tabEl.elSendButton = Sel.query('.planetDetailSelectSpies button', tabEl, true);
                        tabEl.elSpiesList = Sel.query('.planetDetailSpiesList', tabEl, true);
                        tabEl.elSpyShipsList = Sel.query(".planetDetailSpyShipList", tabEl, true);
                        tabEl.elMessage = Sel.query('.planetDetailSpiesMessage', tabEl, true);
                        tabEl.elShipMessageCount = Sel.query('.planetDetailSpyShipMessage span.count', tabEl, true);
                        Event.on(tabEl.elSendButton, "click", this.MoveSpies, tabEl, this);
                        Event.on(
                            Sel.query('.planetDetailSelectSpyShip button', tabEl, true),
                            "click", this.MoveSpiesCancel, tabEl, this
                        );
                        Event.delegate(tabEl, "click", this.MoveSpyShip,
                            ".planetDetailSelectSpyShip ul button", this, true);
                        this.planetDetails.hideEvent.subscribe(hideEventFn, tabEl, true);
                    }
                }
                Event.on("planetDetailRenameSubmit", "click", this.Rename, this, true);
            }, this, true);
            this.planetDetails.hideEvent.subscribe(function(){
                this.planetDetails.resetDisplay(this);
            }, this, true);
            this.planetDetails.showEvent.subscribe(function(){
                this.bringToTop();
            });
            this.planetDetails.render();
            Game.OverlayManager.register(this.planetDetails);
        },
        _buildFindPanel : function() {
            var panelId = "starFind";
            
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Find</div>',
                '<div class="bd">',
                '    <label for="',panelId,'Find">By Star Name:</label><input type="text" id="',panelId,'Find" />',
                '    <hr />',
                '    <div>',
                '        <label for="',panelId,'X">X:</label><input type="text" id="',panelId,'X" size="4" />',
                '        <label for="',panelId,'Y">Y:</label><input type="text" id="',panelId,'Y" size="4" />',
                '        <button type="button" id="',panelId,'Jump">Jump</button>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.starFind = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:false,
                close:false,
                underlay:false,
                width:"300px",
                zIndex:10005,
                context:["footer","bl","tl", ["beforeShow", "windowResize"], [0,-5]]
            });
            this.starFind.createFind = function() {
                var dataSource = new Util.XHRDataSource("/map");
                dataSource.connMethodPost = "POST";
                dataSource.maxCacheEntries = 2;
                dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                dataSource.responseSchema = {
                    resultsList : "result.stars",
                    fields : ["name","color","x","y"]
                };
                
                var oTextboxList = new YAHOO.lacuna.TextboxList(this.findInput, dataSource, { //config options
                    maxResultsDisplayed: 25,
                    minQueryLength:3,
                    multiSelect:false,
                    forceSelection:false,
                    useIndicator:true
                });
                oTextboxList.formatResult = function(oResultData, sQuery, sResultMatch) {
                    return [
                        '<div class="yui-gf">',
                        '    <div class="yui-u first" style="background-color:black;">',
                        '        <img src="',Lib.AssetUrl,'star_map/',oResultData.color,'.png" alt="',oResultData,name,'" style="width:50px;height:50px;" />',
                        '    </div>',
                        '    <div class="yui-u">',
                        '        <div>',oResultData.name,'</div>',
                        '        <div>',oResultData.x,' : ',oResultData.y,'</div>',
                        '    </div>',
                        '</div>'].join("");
                };
                oTextboxList.generateRequest = function(sQuery){                
                    var s = Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "search_stars",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                decodeURIComponent(sQuery)
                            ]
                        });
                    return s;
                };
                oTextboxList.dirtyEvent.subscribe(function(event, isDirty, oSelf){
                    var star = this._oTblSingleSelection.Object;
                    oSelf.X.value = star.x;
                    oSelf.Y.value = star.y;
                },this);
                this.findStar = oTextboxList;
            };
            this.starFind.renderEvent.subscribe(function(){
                this.starFind.findInput = Dom.get(panelId+"Find");
                this.starFind.X = Dom.get(panelId+"X");
                this.starFind.Y = Dom.get(panelId+"Y");
                Event.on(panelId+"Jump", "click", this.FindJump, this, true);
                this.starFind.createFind();
            },this,true);
            this.starFind.showEvent.subscribe(function(){
                this.starFind.findInput.blur();
            },this,true);
            
            this.starFind.render();
        },
        
        IsVisible : function() {
            return this._isVisible;
        },
        MapVisible : function(visible) {
            if(visible) {
                this.starFind.show();
            }
            else {
                this.starFind.hide();
            }
            if(this._isVisible != visible) {
                if(this._elGrid) {
                    this._isVisible = visible;
                    YAHOO.log(visible, "info", "MapStar.MapVisible");
                    if(visible) {
                        if(!Dom.inDocument(this._elGrid)) {
                            document.getElementById("content").appendChild(this._elGrid);
                        }
                        //Dom.setStyle(this._elGrid, "display", visible ? "" : "none");
                    }
                    else {
                        this._elGrid = this._elGrid.parentNode.removeChild(this._elGrid);
                    }
                    if (visible) {
                        this.Resize();
                    }
                }
            }
        },

        FindJump : function() {
            var x = this.starFind.X.value*1,
                y = this.starFind.Y.value*1;
                
            if(Lang.isNumber(x) && Lang.isNumber(y)) {
                this.Jump(x,y);
            }
        },
        Jump : function(xC,yC) {
            this.LoadGrid({
                x:xC, //(xC-1),
                y:yC //(yC+1)
            });
        },
        Load : function() {
            var cId = Game.GetCurrentPlanet().id;
            if(cId) {
                var loc = Game.EmpireData.planets[cId];
                if(loc) {
                    this.locationId = cId;
                    loc.x *= 1;
                    loc.y *= 1;
                    this.LoadGrid(loc);
                }
            }
        },
        LoadGrid : function(loc) {
            Lacuna.Pulser.Show();
            if(!this._gridCreated) {
                var starMap = document.createElement("div");
                starMap.id = "starMap";
                this._elGrid = document.getElementById("content").appendChild(starMap);
                this.SetSize();
                                
                var map = new Lacuna.Mapper.StarMap("starMap");
                //map.imgUrlLoc = Lib.AssetUrl + 'ui/mapiator/';
                
                //draw what we got
                map.redraw();
                //move to current planet
                map.setCenterTo(loc.x,loc.y);
                
                this._map = map;
                this._gridCreated = true;
                
                Event.delegate(this._map.mapDiv, "click", this.GridClick, "div.tile", this, true);
            }
            else {
                //move to current planet
                this._map.setCenterTo(loc.x,loc.y);
            }
            
            this.MapVisible(true);
            Lacuna.Pulser.Hide();
        },
        GridClick : function(e, matchedEl, container) {
            if(!this._map.controller.isDragging()) {
                var tile = this._map.tileLayer.findTileById(matchedEl.id);
                if(tile && tile.data) {
                    if(tile.data.isStar) {
                        this.ShowStar(tile);
                    }
                    else if(tile.data.isPlanet) {
                        this.ShowPlanet(tile);
                    }
                }
            }
        },
        DetailsClick : function(e, matchedEl, container){
            if(this.selectedBody) {
                if(matchedEl.innerHTML == "View") {
                    var id = this.selectedBody.id;
                    this.planetDetails.hide();
                    this.fireEvent("onChangeToPlanetView", id);
                }
            }
        },
        SetSize : function() {
            var size = Game.GetSize();
            Dom.setStyle(this._elGrid, "width", size.w+"px");
            Dom.setStyle(this._elGrid, "height", size.h+"px");
        },
        Resize : function() {
            this.SetSize();
            this._map.resize();
        },
        Reset : function() {
            delete this.locationId;
            if(this._map) {
                this._map.reset();
            }
            this.MapVisible(false);
        },
    
    
        PopulateShipsIncomingTab : function(panel) {
            var ships = this.currentShips.incoming || [],
                details = Dom.get(panel.isStarPanel ? "starDetailIncomingShips" : "planetDetailIncomingShips");
                
            if(ships.length > 0) {
                Event.purgeElement(details, true);
                details.innerHTML = '';
                
                var    li = document.createElement("li");
                
                ships = ships.slice(0);
                ships.sort(function(a,b) {
                    if (a.date_arrives > b.date_arrives) {
                        return 1;
                    }
                    else if (a.date_arrives < b.date_arrives) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
                
                var serverTime = Lib.getTime(Game.ServerData.time);
                
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false),
                        sec = (Lib.getTime(ship.date_arrives) - serverTime) / 1000;
                        
                    nLi.Ship = ship;
                    
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:20%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:75px;height:75px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:75%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,' - Arrives in: <span class="shipArrives">',Lib.formatTime(sec),'</span></div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span><span>Task:</span><span>',ship.task,'</span></span>',
                    '            <span><span>From:</span><span>',ship.from ? ship.from.name : 'Unknown','</span></span>',
                    '            <span><span>To:</span><span>',ship.to.name,'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',(ship.fleet_speed > 0 && ship.fleet_speed < ship.speed) ? ship.fleet_speed : ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Payload:</label> ',
                    ship.payload.join(', '),
                    '        </div>',
                    '    </div>',
                    '</div>'].join('');
                    
                    panel.addQueue(sec, this.ArrivesQueue, nLi);
                    
                    details.appendChild(nLi);
                }
                
            }    
            else {
                details.innerHTML = '<li>No Incoming ships</li>';
            }
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 330;
                if(Ht > 240) { Ht = 240; }
                Dom.setStyle(details.parentNode,"height",Ht + "px");
                Dom.setStyle(details.parentNode,"overflow-y","auto");
            },10);
        },
        ArrivesQueue : function(remaining, elLine){
            var arrTime;
            if(remaining <= 0) {
                arrTime = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                arrTime = Lib.formatTime(Math.round(remaining));
            }
            Sel.query(".shipArrives",elLine,true).innerHTML = arrTime;
        },
        
        PopulateShipsSendTab : function(panel) {
            var ships = this.currentShips.available,
                details = Dom.get(panel.isStarPanel ? "starDetailSendShips" : "planetDetailSendShips"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            if(ships.length === 0) {
                details.innerHTML = "No available ships to send.";
            }
            else {
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.Ship = ship;
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:60px;height:60px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:67%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span>Task:<span>',ship.task,'</span></span>,',
                    '            <span>Travel Time:<span>',Lib.formatTime(ship.estimated_travel_time),'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '    </div>',
                    '    <div class="yui-u" style="width:8%">',
                    ship.task == "Docked" ? '        <button type="button">Send</button>' : '',
                    '    </div>',
                    '</div>'].join('');
                    
                    if(ship.task == "Docked") {
                        Event.on(Sel.query("button", nLi, true), "click", this.ShipSend, {Self:this,Ship:ship,Line:nLi}, true);
                    }
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
                            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 330;
                if(Ht > 240) { Ht = 240; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
        },
        ShipSend : function() {
            var oSelf = this.Self,
                ship = this.Ship,
                target, targetName, panel;
                
            if(oSelf.selectedBody) {
                target = {body_id : oSelf.selectedBody.id};
                targetName = oSelf.selectedBody.name;
                panel = oSelf.planetDetails;
            }
            else if(oSelf.selectedStar) {
                target = {star_id : oSelf.selectedStar.id};
                targetName = oSelf.selectedStar.name;
                panel = oSelf.starDetails;
            }
            
            if(target && oSelf.NotIsolationist(ship)) {
                Game.Services.Buildings.SpacePort.send_ship({
                    session_id:Game.GetSession(),
                    ship_id:ship.id,
                    target:target
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "MapStar.ShipSend.send_ship.success");
                        Lacuna.Pulser.Hide();
                        this.Self.fireEvent("onMapRpc", o.result);
                        delete this.Self.currentShips;
                        this.Self.GetShips(panel, target);
                        Event.purgeElement(this.Line, true);
                        this.Line.innerHTML = "Successfully sent " + this.Ship.type_human + " to " + targetName + ".";
                    },
                    scope:this
                });
            }
        },
        NotIsolationist : function(ship) {
            if(Game.EmpireData.is_isolationist == "1" && (ship.type == "colony_ship" || ship.type == "short_range_colony_ship")) {
                return confirm("If you colonize another planet you will no longer be considered an Isolationist and you will be open to attack.  Are you sure you want to do this?");
            }
            return true;
        },
    
        PopulateFleetSendTab : function(panel) {
            var ships = this.currentShips.available,
                details = Dom.get(panel.isStarPanel ? "starDetailSendFleet" : "planetDetailSendFleet"),
                btn = Dom.get(panel.isStarPanel ? "starDetailSendFleetSubmit" : "planetDetailSendFleetSubmit"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            if(ships.length === 0) {
                details.innerHTML = "No available ships to send.";
                btn.disabled = true;
            }
            else {
                btn.disabled = false;
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:60px;height:60px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:67%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span>Task:<span>',ship.task,'</span></span>,',
                    '            <span>Travel Time:<span>',Lib.formatTime(ship.estimated_travel_time),'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '    </div>',
                    '    <div class="yui-u" style="width:8%">',
                    ship.task == "Docked" ? '<input type="checkbox" />' : '',
                    '    </div>',
                    '</div>'].join('');
                    
                    if(ship.task == "Docked") {
                        Sel.query("input", nLi, true).Ship = ship;
                    }
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
                            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 330;
                if(Ht > 240) { Ht = 240; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
        },
        FleetSend : function(e) {
            var target, targetName, panel,
                btn = Event.getTarget(e);
            
            btn.disabled = true;
            
            if(this.selectedBody) {
                target = {body_id : this.selectedBody.id};
                targetName = this.selectedBody.name;
                panel = this.planetDetails;
            }
            else if(this.selectedStar) {
                target = {star_id : this.selectedStar.id};
                targetName = this.selectedStar.name;
                panel = this.starDetails;
            }

            var speed = parseInt(Dom.get(panel.isStarPanel ? "starDetailSetSpeed" : "planetDetailSetSpeed").value,10);
            var selected = Sel.query("input:checked", (panel.isStarPanel ? "starDetailSendFleet" : "planetDetailSendFleet"));
            if(selected.length > 0) {
                var ships = [], shipIds = [], minSpeed = 999999999;
                for(var n=0; n<selected.length; n++) {
                    var s = selected[n].Ship;
                    s.speed = parseInt(s.speed,10); // probably not needed but play it safe
                    ships.push(s);
                    shipIds.push(s.id);
                    if (s.speed < minSpeed) {
                        minSpeed = s.speed;
                    }
                }
                if(target && this.NotFleetIsolationist(ships)) {
                    if (speed < 0) {
                        alert('Set speed cannot be less than zero.');
                        btn.disabled = false;
                    }
                    else {
                        if (speed > 0 && speed > minSpeed) {
                            alert('Set speed cannot exceed the speed of the slowest ship.');
                            btn.disabled = false;
                        } else {
                            Game.Services.Buildings.SpacePort.send_fleet({
                                session_id:Game.GetSession(),
                                ship_ids:shipIds,
                                target:target,
                                set_speed:speed
                            }, {
                                success : function(o){
                                    Lacuna.Pulser.Hide();
                                    this.fireEvent("onMapRpc", o.result);
                                    delete this.currentShips;
                                    var details = Dom.get(panel.isStarPanel ? "starDetailSendFleet" : "planetDetailSendFleet");
                                    details.innerHTML = '<li>Sent ' + o.result.fleet.length + ' ships!</li>';
                                    this.GetShips(panel, target);
                                },
                                failure : function(o){
                                    btn.disabled = false;
                                },
                                scope:this
                            });
                        }
                    }
                }
            }
            else {
                btn.disabled = false;
            }
        },
        NotFleetIsolationist : function(ships) {
            if(Game.EmpireData.is_isolationist == "1") {
                var hasIsoShip;
                for(var n=0; n<ships.length; n++) {
                    if(ships[n].type == "colony_ship" || ships[n].type == "short_range_colony_ship") {
                        hasIsoShip = true;
                        break;
                    }
                }
                
                if(hasIsoShip) {
                    return confirm("If you colonize another planet you will no longer be considered an Isolationist and you will be open to attack.  Are you sure you want to do this?");
                }
            }
            return true;
        },
        
        PopulateShipsUnavailTab : function(panel) {
            var ships = this.currentShips.unavailable,
                details = Dom.get(panel.isStarPanel ? "starDetailUnavailShips" : "planetDetailUnavailShips"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            //Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            if(ships.length === 0) {
                details.innerHTML = "No unavailable ships.";
            }
            else {
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i].ship,
                        nLi = li.cloneNode(false);
                        
                    nLi.Ship = ship;
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:5px;">',
                    '    <div class="yui-u first" style="width:20%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:50px;height:50px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:75%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span><span>Task:</span><span>',ship.task,'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Berth Level:<span>',ship.berth_level,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '        <div style="font-style:italic;">',ships[i].reason[1],'</div>',
                    '    </div>',
                    '</div>'].join('');
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 330;
                if(Ht > 240) { Ht = 240; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
            
        },
    
        PopulateShipsOrbitingTab : function(panel) {
            var ships = this.currentShips.orbiting || [],
                details = Dom.get("planetDetailOrbitingShips"),
                detailsParent = details.parentNode,
                li = document.createElement("li");
                
            Event.purgeElement(details, true); //clear any events before we remove
            details = detailsParent.removeChild(details); //remove from DOM to make this faster
            details.innerHTML = "";
            
            if(ships.length === 0) {
                details.innerHTML = "No orbiting ships.";
            }
            else {
                for(var i=0; i<ships.length; i++) {
                    var ship = ships[i],
                        nLi = li.cloneNode(false);
                        
                    nLi.Ship = ship;
                    nLi.innerHTML = ['<div class="yui-gd" style="margin-bottom:2px;">',
                    '    <div class="yui-u first" style="width:15%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                    '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:60px;height:60px;" />',
                    '    </div>',
                    '    <div class="yui-u" style="width:75%">',
                    '        <div class="buildingName">[',ship.type_human,'] ',ship.name,'</div>',
                    '        <div><label style="font-weight:bold;">Details:</label>',
                    '            <span>Task:<span>',ship.task,'</span></span>,',
                    '            <span>From:<span>',ship.from.name,'</span></span>',
                    '        </div>',
                    '        <div><label style="font-weight:bold;">Attributes:</label>',
                    '            <span>Speed:<span>',ship.speed,'</span></span>,',
                    '            <span>Hold Size:<span>',ship.hold_size,'</span></span>,',
                    '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                    '            <span>Combat:<span>',ship.combat,'</span></span>',
                    '        </div>',
                    '    </div>',
                    '</div>'].join('');
                    
                    details.appendChild(nLi);
                }
            }
            detailsParent.appendChild(details); //add back as child
                            
            //wait for tab to display first
            setTimeout(function() {
                var Ht = Game.GetSize().h - 330;
                if(Ht > 240) { Ht = 240; }
                Dom.setStyle(detailsParent,"height",Ht + "px");
                Dom.setStyle(detailsParent,"overflow-y","auto");
            },10);
        },
    
        PopulateShipsMiningPlatforms : function(panel) {
            var ships = this.currentShips.mining_platforms || [];
                details = Dom.get("planetDetailMiningShips");
                
            if(details) {
                var parent = details.parentNode;
                    
                details = parent.removeChild(details);
                
                if(ships.length > 0) {
                    
                    Event.purgeElement(details, true);
                    details.innerHTML = '';

                    var li = document.createElement("li");
                    
                    for(var i=0; i<ships.length; i++) {
                        var ship = ships[i],
                            nLi = li.cloneNode(false);
                            
                        nLi.Ship = ship;
                        
                        Dom.addClass(nLi,"shipName");
                        nLi.innerHTML = ship.empire_name;
                        Event.on(nLi, "click", this.ShowEmpire, ship.empire_id);
                        
                        details.appendChild(nLi);
                    }
                    
                }    
                else {
                    details.innerHTML = '<li>No mining ships</li>';
                }
                
                parent.appendChild(details);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 330;
                    if(Ht > 240) { Ht = 240; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        PopulateShipsExcavators : function(panel) {
            var ships = this.currentShips.excavators || [];
                details = Dom.get("planetDetailExcavators");
                
            if(details) {
                var parent = details.parentNode;
                    
                details = parent.removeChild(details);
                
                if(ships.length > 0) {
                    
                    Event.purgeElement(details, true);
                    details.innerHTML = '';

                    var li = document.createElement("li");
                    
                    for(var i=0; i<ships.length; i++) {
                        var ship = ships[i],
                            nLi = li.cloneNode(false);
                            
                        nLi.Ship = ship;
                        
                        Dom.addClass(nLi,"shipName");
                        nLi.innerHTML = ship.empire_name;
                        Event.on(nLi, "click", this.ShowEmpire, ship.empire_id);
                        
                        details.appendChild(nLi);
                    }
                    
                }    
                else {
                    details.innerHTML = '<li>No excavators</li>';
                }
                
                parent.appendChild(details);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 330;
                    if(Ht > 240) { Ht = 240; }
                    Dom.setStyle(details.parentNode,"height",Ht + "px");
                    Dom.setStyle(details.parentNode,"overflow-y","auto");
                },10);
            }
        },
        ShowEmpire : function(e, id){
            Lacuna.Info.Empire.Load(id);
        },
    
        GetShips : function(panel, target) {
            if(!this.currentShips) {
                Lacuna.Pulser.Show();
                
                Game.Services.Buildings.SpacePort.get_ships_for({
                    session_id:Game.GetSession(),
                    from_body_id:Game.GetCurrentPlanet().id,
                    target:target
                }, {
                    success : function(o){
                        YAHOO.log(o, "info", "MapStar.ShowStar.get_ships_for.success");
                        Lacuna.Pulser.Hide();
                        this.fireEvent("onMapRpc", o.result);
                        this.currentShips = o.result;

                        this.PopulateShipsSendTab(panel);
                        
                        this.PopulateFleetSendTab(panel);
                        
                        this.PopulateShipsUnavailTab(panel);
                        
                        this.PopulateShipsIncomingTab(panel);
                        
                        this.PopulateShipsOrbitingTab(panel);
                        
                        this.PopulateShipsMiningPlatforms(panel);

                        this.PopulateShipsExcavators(panel);

                        panel.removeTabs(); //remove any tabs that are removable before adding new ones
                        
                        
                        //select 0 index tab unless we already selected a different one
                        /*if(panel.tabView.get("activeIndex") <= 0) {
                            panel.tabView.selectTab(0);
                        }*/

                    },
                    scope:this
                });
            }
        },
        ShowStar : function(tile, keepOpen) {
            if(!keepOpen) {
                Game.OverlayManager.hideAllBut(this.starDetails.id);
            }
            
            var data = tile.data,
                panel = this.starDetails;
                
            panel.resetDisplay(this);
            
            Dom.get("starDetailsImg").innerHTML = ['<img src="',Lib.AssetUrl,'star_map/',data.color,'.png" alt="',data.name,'" style="width:100px;height:100px;" />'].join('');
            
            Dom.get("starDetailsInfo").innerHTML = [
                '<ul>',
                '    <li id="starDetailsName">',data.name,'</li>',
                '    <li><label>X: </label>',data.x,'</li>',
                '    <li><label>Y: </label>',data.y,'</li>',
                '    <li><label>Zone: </label>',data.zone,'</li>',
                data.station ? ('    <li><label>Station: </label>'+data.station.name+' ('+data.station.x+' : '+data.station.y+')</li>') : '',
                '</ul>'
            ].join('');
            
            this.selectedStar = data;
            
            this.GetShips(panel,{star_id:data.id});
            
            panel.show();
        },
        ShowPlanet : function(tile, keepOpen) {
            if(!keepOpen) {
                Game.OverlayManager.hideAllBut(this.planetDetails.id);
            }
			var panel = this.planetDetails;

            Game.Services.Body.get_body_status({ args: {
                    session_id: Game.GetSession(""),
                    body_id: tile.data.id
                }},{
                    success : function(o){
                        YAHOO.log(o, "info", "ShowPlanet.get_status.success");

			var body = o.result.body,
				tab, tabs,
				empire = body.empire || {alignment:"none", name:""};

            
                
            panel.resetDisplay(this);
            
            Dom.get("planetDetailsImg").innerHTML = ['<img src="',Lib.AssetUrl,'star_system/',body.image,'.png" alt="',body.name,'" style="width:200px;height:200px;" />'].join('');
            Dom.get("planetDetailsInfo").innerHTML = [
                '<ul>',
                '    <li id="planetDetailsName">',body.name,'</li>',
                '    <li><label>Type: </label>',body.type,'</li>',
                '    <li><label>Empire: </label><span id="planetDetailsEmpire">',empire.name,'</span></li>',
                empire.id ? ('<li><label>Isolationist: </label>'+(empire.is_isolationist=="1" ? 'Yes' : 'No')+'</li>') : '',
                '    <li><label>Water: </label>',body.water,'</li>',
                '    <li><label>Planet Size:</label>',body.size,'</li>',
                '    <li><label>Location in Universe:</label>',body.x,'x : ',body.y,'y</li>',
                '    <li><label>Zone:</label>',body.zone,'</li>',
                '    <li><label>Star:</label>',body.star_name,'</li>',
                '    <li><label>Orbit:</label>',body.orbit,'</li>',
                (empire.alignment == "self" || (empire.alignment == "ally" && body.type == "space station")) ? '    <li><button type="button">View</button></li>' : '',
                '</ul>'
            ].join('');
            
            Dom.get("planetDetailsAnthracite").innerHTML = body.ore.anthracite;
            Dom.get("planetDetailsBauxite").innerHTML = body.ore.bauxite;
            Dom.get("planetDetailsBeryl").innerHTML = body.ore.beryl;
            Dom.get("planetDetailsChalcopyrite").innerHTML = body.ore.chalcopyrite;
            Dom.get("planetDetailsChromite").innerHTML = body.ore.chromite;
            Dom.get("planetDetailsFluorite").innerHTML = body.ore.fluorite;
            Dom.get("planetDetailsGalena").innerHTML = body.ore.galena;
            Dom.get("planetDetailsGoethite").innerHTML = body.ore.goethite;
            Dom.get("planetDetailsGold").innerHTML = body.ore.gold;
            Dom.get("planetDetailsGypsum").innerHTML = body.ore.gypsum;
            Dom.get("planetDetailsHalite").innerHTML = body.ore.halite;
            Dom.get("planetDetailsKerogen").innerHTML = body.ore.kerogen;
            Dom.get("planetDetailsMagnetite").innerHTML = body.ore.magnetite;
            Dom.get("planetDetailsMethane").innerHTML = body.ore.methane;
            Dom.get("planetDetailsMonazite").innerHTML = body.ore.monazite;
            Dom.get("planetDetailsRutile").innerHTML = body.ore.rutile;
            Dom.get("planetDetailsSulfur").innerHTML = body.ore.sulfur;
            Dom.get("planetDetailsTrona").innerHTML = body.ore.trona;
            Dom.get("planetDetailsUraninite").innerHTML = body.ore.uraninite;
            Dom.get("planetDetailsZircon").innerHTML = body.ore.zircon;
            
            if(empire.id) {
                Dom.setStyle("planetDetailsEmpire", "cursor", "pointer");
                Dom.setStyle("planetDetailsEmpire", "text-decoration", "underline");
                Event.on("planetDetailsEmpire", "click", function(){
                    Lacuna.Info.Empire.Load(this.id);
                }, empire, true);
            }
            else {
                Dom.setStyle("planetDetailsEmpire", "cursor", "normal");
                Dom.setStyle("planetDetailsEmpire", "text-decoration", "none");
                Event.removeListener("planetDetailsEmpire", "click");
            }
            
            if(empire.alignment == "self"){
                if(panel.renameTab) {
                    panel.tabView.addTab(panel.renameTab, 1);
                    delete panel.renameTab;
                }

                Dom.get("planetDetailNewName").value = "";
            }
            else {
                tabs = panel.tabView.get("tabs");
                for(var nt=0; nt<tabs.length; nt++) {
                    tab = panel.tabView.getTab(nt);
                    if(tab && tab.get("label") == this._renameLabel) {
                        panel.renameTab = tab;
                        panel.tabView.removeTab(tab);
                        break;
                    }
                }
            }
            if(empire.alignment == "none" || empire.is_isolationist == "1" ){
                tabs = panel.tabView.get("tabs");
                for(var snt = tabs.length; snt >= 0; snt--) {
                    tab = panel.tabView.getTab(snt);
                    if(tab && tab.get("label") == this._sendSpiesLabel) {
                        panel.sendSpiesTab = tab;
                        panel.tabView.removeTab(tab);
                    }
                    else if(tab && tab.get("label") == this._fetchSpiesLabel) {
                        panel.fetchSpiesTab = tab;
                        panel.tabView.removeTab(tab);
                    }
                }
            }
            else {
                if(panel.sendSpiesTab) {
                    panel.tabView.addTab(panel.sendSpiesTab);
                    delete panel.sendSpiesTab;
                }
                if(panel.fetchSpiesTab) {
                    panel.tabView.addTab(panel.fetchSpiesTab);
                    delete panel.fetchSpiesTab;
                }
            }
            
            if(body.type == "asteroid") {
                if(panel.miningTab) {
                    panel.tabView.addTab(panel.miningTab);
                    delete panel.miningTab;
                }
            }
            else {
                tabs = panel.tabView.get("tabs");
                for(var mnt = tabs.length; mnt >= 0; mnt--) {
                    tab = panel.tabView.getTab(mnt);
                    if(tab && tab.get("label") == this._miningLabel) {
                        panel.miningTab = tab;
                        panel.tabView.removeTab(tab);
                    }
                }
            }
            if(panel.excavTab) {
                panel.tabView.addTab(panel.excavTab);
                delete panel.excavTab;
            }
            
            //this.GetShips(panel,{body_id:body.id});
            
            this.selectedBody = body;
            this.selectedTile = tile;
            panel.tabView.selectTab(0);
            panel.show();




                    },
                    failure : function(o){
                        YAHOO.log(o, "info","ShowPlanet.get_status.fail");

                        return true;
                    },
                    scope:this
                }
            );

        },
        
        Rename : function() {
            var newName = Dom.get("planetDetailNewName").value;
            Game.Services.Body.rename({
                    session_id: Game.GetSession(""),
                    body_id:this.selectedBody.id,
                    name:newName
                },{
                    success : function(o){
                        YAHOO.log(o, "info", "MapStar.Rename.success");
                        if(o.result && this.selectedBody) {
                            Dom.get("planetDetailRenameMessage").innerHTML = [
                                "Successfully renamed your planet from ",
                                this.selectedBody.name," to ", newName, '.'
                            ].join('');
                            Lib.fadeOutElm("planetDetailRenameMessage");
                            Dom.get("planetDetailsName").innerHTML = newName;
                            Game.EmpireData.planets[this.selectedBody.id].name = newName;
                            Lacuna.Menu.update();
                            if(this.selectedTile instanceof YAHOO.lacuna.Mapper.StarTile) {
                                this._map.tileCache[this.selectedTile.x][this.selectedTile.y].name = newName;
                                this.selectedTile.refresh();
                            }
                            
                            this.selectedBody.name = newName;
                        }
                    },
                    failure : function(o){
                        Dom.get("planetDetailRenameMessage").innerHTML = o.error.message;
                        Lib.fadeOutElm("planetDetailRenameMessage");
                        return true;
                    },
                    scope:this
                }
            );
        },
        ShowSpies : function(tab) {
            Dom.setStyle(tab.elSpiesPane, 'display', 'block');
            Dom.setStyle(tab.elSpyShipsPane, 'display', 'none');
            if ( tab.avail && tab.avail.spies && tab.avail.spyShips ) {
                return;
            }
            tab.elSpiesList.innerHTML = "";
            tab.elSpyShipsList.innerHTML = "";
            tab.elMessage.innerHTML = "";
            Dom.setStyle(tab.elSendButton, 'display', 'none');
            Lacuna.Pulser.Show();
            var method,data;
            if ( tab.id == 'planetDetailSendSpies' ) {
                method = 'prepare_send_spies';
                data = {
                    session_id:Game.GetSession(),
                    on_body_id:Game.GetCurrentPlanet().id,
                    to_body_id:this.selectedBody.id
                };
            }
            else {
                method = 'prepare_fetch_spies';
                data = {
                    session_id:Game.GetSession(),
                    on_body_id:this.selectedBody.id,
                    to_body_id:Game.GetCurrentPlanet().id
                };
            }

            Game.Services.Buildings.SpacePort[method](data,{
                success : function(o){
                    YAHOO.log(o, "info", "MapStar.ShowSpies."+method+".success");
                    this.fireEvent("onMapRpc", o.result);
                    Lacuna.Pulser.Hide();
                    tab.avail = {
                        spyShips : o.result.ships,
                        spies : o.result.spies
                    };
                    this.populateSpies(tab);
                },
                scope:this
            });
        },
        populateSpies : function(tab) {
            var list = tab.elSpiesList;
            var spies = tab.avail.spies;
            var ships = tab.avail.spyShips;
            var verb = tab.id == 'planetDetailSendSpies' ? 'send' : 'fetch';
            
            if (spies.length == 0) {
                tab.elMessage.innerHTML = 'No spies available.';
                return;
            }
            
            var maxSpies = 0;
            for (var i = 0; i < ships.length; i++) {
                var ship = ships[i];
                if (ship.max_occupants > maxSpies) {
                    maxSpies = ship.max_occupants;
                }
                if (maxSpies > 100) {
                    maxSpies = 100;
                }
            }
            if (maxSpies == 0) {
                tab.elMessage.innerHTML = 'No ships available.';
            }
            else {
                tab.elMessage.innerHTML = 'Select up to ' + maxSpies + ' spies to ' + verb + ':';
                Dom.setStyle(tab.elSendButton, 'display', 'inline');
            }
            tab.maxSpies = maxSpies;
            
            var li = document.createElement('li');
            
            for (var si = 0; si < spies.length; si++) {
                var spy = spies[si],
                    nLi = li.cloneNode(false);
                nLi.innerHTML = [
                '<div class="yui-gd" style="margin-bottom:2px;">',
                '    <div class="yui-u first description">',
                '        <div><strong>', spy.name, '</strong></div><div>Level ', spy.level,'</div>',
                '    </div>',
                '    <div class="yui-u">',
                maxSpies == 0 ? '' : '<input type="checkbox" name="spyId" value="'+spy.id+'" />',
                '        <div class="attributes"><span class="attribute">Offense: ', spy.offense_rating, '</span><span class="attribute">Defense: ',spy.defense_rating,'</span></div>',
                '    </div>',
                '</div>'
                ].join('');
                list.appendChild(nLi);
            }
            
            var Ht = Game.GetSize().h - 330;
            if(Ht > 240) { Ht = 240; }
            Dom.setStyle(list,'height',Ht + 'px');
        },
        MoveSpies : function(e, tab) {
            Event.stopEvent(e);
            var spies = [];
            var ships = tab.avail.spyShips;
            var list = tab.elSpyShipsList;
            var verb = tab.id == 'planetDetailSendSpies' ? 'send' : 'fetch';
            Dom.batch(tab.elSpiesList.getElementsByTagName('input'), function(el) {
                if (el.checked) {
                    spies.push(el.value);
                }
            });
            if (spies.length == 0) {
                alert("You must select at least one spy to "+verb+"!");
                return;
            }
            if (spies.length > tab.maxSpies) {
                alert("You don't have any ships large enough to "+verb+" " + spies.length + " spies.");
                return;
            }

            tab.spiesToMove = spies;
            list.innerHTML = '';
            tab.elShipMessageCount.innerHTML = spies.length;

            var li = document.createElement('li');
            for (var i = 0; i < ships.length; i++) {
                var ship = ships[i];
                var usable = ship.max_occupants >= spies.length;
                var nLi = li.cloneNode(false);
                nLi.shipId = ship.id;
                nLi.innerHTML = [
                '<div class="yui-gd" style="margin-bottom:2px;">',
                '    <div class="yui-u first" style="width:20%;background:transparent url(',Lib.AssetUrl,'star_system/field.png) no-repeat center;text-align:center;">',
                '        <img src="',Lib.AssetUrl,'ships/',ship.type,'.png" style="width:50px;height:50px;" />',
                '    </div>',
                '    <div class="yui-u" style="width:78%">',
                usable ? '        <button type="button">'+verb.charAt(0).toUpperCase()+verb.slice(1)+' Spies</button>' : '',
                '        <div><strong>[',ship.type_human,'] ',ship.name,'</strong></div>',
                '        <div><strong>Attributes:</strong>',
                '            <span>Speed:<span>',ship.speed,'</span></span>',
                '            <span>Stealth:<span>',ship.stealth,'</span></span>',
                '            <span>Max Spies:<span>',ship.max_occupants,'</span></span>',
                '        </div>',
                '    </div>',
                '</div>'
                ].join('');
                list.appendChild(nLi);
            }
            var Ht = Game.GetSize().h - 260;
            if(Ht > 240) { Ht = 240; }
            Dom.setStyle(list,'height',Ht + 'px');
            Dom.setStyle(tab.elSpiesPane, 'display', 'none');
            Dom.setStyle(tab.elSpyShipsPane, 'display', 'block');
        },
        MoveSpyShip : function(e, matchedEl, tab) {
            Event.stopEvent(e);
            Lacuna.Pulser.Show();
            var shipId = matchedEl.parentNode.parentNode.parentNode.shipId,
                spies = tab.spiesToMove,
                data = {
                    session_id:Game.GetSession(),
                    spy_ids:spies,
                    ship_id:shipId
                },
                successMessage, method;
            if ( tab.id == 'planetDetailSendSpies' ) {
                successMessage = 'Spies sent!';
                method = Game.Services.Buildings.SpacePort.send_spies;
                data.on_body_id = Game.GetCurrentPlanet().id;
                data.to_body_id = this.selectedBody.id;
            }
            else {
                successMessage = 'Spies fetched!';
                method = Game.Services.Buildings.SpacePort.fetch_spies;
                data.on_body_id = this.selectedBody.id;
                data.to_body_id = Game.GetCurrentPlanet().id;
            }
            method(data, {
                success : function(o){
                    Lacuna.Pulser.Hide();
                    this.fireEvent("onMapRpc", o.result);
                    alert(successMessage + '  Arrival time: ' + Lib.formatServerDateShort(o.result.ship.date_arrives));
                    delete tab.avail.spies;
                    delete tab.avail.spyShips;
                    this.ShowSpies(tab);
                },
                scope:this
            });
        },
        MoveSpiesCancel : function(e, tab) {
            Event.stopEvent(e);
            Dom.setStyle(tab.elSpiesPane, 'display', 'block');
            Dom.setStyle(tab.elSpyShipsPane, 'display', 'none');
        }
    };
    Lang.augmentProto(MapStar, Util.EventProvider);
    
    Lacuna.MapStar = new MapStar();
})();
YAHOO.register("mapStar", YAHOO.lacuna.MapStar, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/mapStar.js","/")
},{"buffer":71,"oMfpAn":75}],55:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Mapper == "undefined" || !YAHOO.lacuna.Mapper) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        KL = Util.KeyListener,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Mapper = {};
    Mapper.util = {
        modulo: function(val, mod){
            var res = val%mod;
            if(res < 0) {
                res += mod;
            }
            return res;
        },
        copy: function(obj, c) {
            if(!c) {
                c = {};
            }
            for( var k in obj ) {
                c[k] = obj[k];
            }
            return c;
        },
        clone: function(obj) {
            function Constructor(){}
            Constructor.prototype = obj;
            return new Constructor();
        },
        forEach: function(array, fun) {
            for(var i=0; i<array.length; i++) {
                fun(array[i], i);
            }
        }
    };
    
    Mapper.MovableContainer = function( parentEl ) {
        var div = document.createElement('div');
        Dom.addClass(div,"movableContainer");
        div.style.position = 'absolute';
        
        this._container = div;
        this._parentEl = parentEl;
        
        this.reset();
        parentEl.appendChild( div );
    };
    Mapper.MovableContainer.prototype = {
        move : function( x,y ) {
            this.offsetX += x;
            this.offsetY += y;
            this._container.style.left = ''+ this.offsetX +'px';
            this._container.style.top  = ''+ this.offsetY +'px';
            Dom.setStyle(this._parentEl, 'background-position', this.offsetX + 'px ' + this.offsetY + 'px');
        },
        reset : function() {
            this.offsetX = 0;
            this.offsetY = 0;
            this.move(0,0);
        },
        appendChild : function( c ) {
            return this._container.appendChild( c );
        },
        removeChild : function( c ) {
            return this._container.removeChild( c );
        }
    };
    
    Mapper.VisibleArea = function(map) {
        this._map = map;
        this.reset();
    };
    Mapper.VisibleArea.prototype = {
        move : function(mx,my) {
            var mb = this._map.maxBounds; // = {x1Left:-15,x2Right:15,y1Top:15,y2Bottom:-15};
            var maxWidth = this._map.width;
            var maxHeight = this._map.height;
            if(mb) {
                var tileSize = this._map.tileSizeInPx,
                    extraSpaceHeight = 30 + Math.ceil(tileSize / 2),
                    extraSpaceWidth = 100 + Math.ceil(tileSize / 2),
                    maxBoundsWidth = (mb.x2Right - mb.x1Left) * tileSize,
                    maxBoundsHeight = (mb.y1Top - mb.y2Bottom) * tileSize;
                    
                if(maxWidth > maxBoundsWidth) {
                    maxWidth = maxBoundsWidth;
                }
                if(maxHeight > maxBoundsHeight) {
                    maxHeight = maxBoundsHeight;
                }
                var    cb = this.calcCoordBounds(this.left + mx + extraSpaceWidth, this.top + my + extraSpaceHeight, this.left + mx + maxWidth - extraSpaceWidth, this.top + my + maxHeight - extraSpaceHeight);
                //if out of bounds, only move to max
                //x axis
                if(mx < 0 && cb.x1 < mb.x1Left) { //if moving left
                    mx = mb.x1Left * tileSize - extraSpaceWidth - this.left;
                }
                else if(mx > 0 && cb.x2 > (mb.x2Right+1)) { //if moving right
                    mx = ((mb.x2Right+1) * tileSize) - (this.left + maxWidth - extraSpaceWidth);
                }
                //y axis
                if(my < 0 && cb.y1 > mb.y1Top){ //if moving up 
                    my = 0 - mb.y1Top * tileSize - extraSpaceHeight - this.top;
                }
                else if(my > 0 && cb.y2 < (mb.y2Bottom-1)) { //if moving down
                    my = - ((mb.y2Bottom-1) * tileSize) - (this.top + maxHeight - extraSpaceHeight);
                }
            }
            //modify with new values now
            this.left += mx;
            this.top += my;
            this.right = this.left + maxWidth;
            this.bottom = this.top + maxHeight;
            this.centerX = this.left + (maxWidth/2);
            this.centerY = this.top + (maxHeight/2);
            
            return {x:mx,y:my};
        },
        coordBounds : function() {
            return this.calcCoordBounds(this.left, this.top, this.right, this.bottom);
        },
        calcCoordBounds : function(x1, y1, x2, y2) {
            var tileSize = this._map.tileSizeInPx;
            return {
                x1 : Math.floor(x1 / tileSize),
                y1 : Math.ceil((y1 * -1) / tileSize),
                x2 : Math.ceil(x2 / tileSize),
                y2 : Math.floor((y2 * -1) / tileSize)
            };
        },
        topLeftLoc : function() {
            var tileSize = this._map.tileSizeInPx;
            return [Math.floor(this.left / tileSize),
            Math.ceil(this.top / tileSize)];
        },
        bottomRightLoc : function() {
            var tileSize = this._map.tileSizeInPx;
            return [Math.ceil(this.right / tileSize),
            Math.floor(this.bottom / tileSize)];
        },
        centerLoc : function(){
            var tileSize = this._map.tileSizeInPx;
            return [Math.floor(this.centerX / tileSize),
                Math.ceil((this.centerY*-1) / tileSize)];
            /*    xO = this.centerX / tileSize,
                x = Math.floor(xO),
                yO = (this.centerY*-1) / tileSize,
                y = Math.ceil(yO);/
            YAHOO.log({xO:xO, x:x, yO:yO, y:y}, "info", "VisibleArea.centerLoc");
            return [x,y];*/
        },
        centerLocPx : function() {
            return [this.centerX, this.centerY];
        },
        reset : function() {
            this.left = 0;
            this.top = 0;
            this.move(0,0);
        },
        resize : function() {
            //left and top don't change
            this.right = this.left + this._map.width;
            this.bottom = this.top + this._map.height;
        }
    };


    
    var Tile = function(x, y, z, ox, oy, layer) {
        this.z = z;
        this.x = x;
        this.y = y;
        this.offsetX = ox;
        this.origOffsetX = ox;
        this.offsetY = oy;
        this.origOffsetY = oy;
        this.layer = layer;
        this.map = layer.map;
        this.tileSizeInPx = layer.map.tileSizeInPx;
        
        this.id = Tile.idFor(this.x,this.y,this.z);
        this.domElement = document.createElement('div');
        this.domElement.id = this.id;
        
        this.createEvent("onReload");
        
        this.refresh();
        
        var s = this.domElement.style;
        s.position = 'absolute';
        s.width = '' + this.tileSizeInPx + 'px';
        s.height = '' + this.tileSizeInPx + 'px';
        s.zIndex = '5';
        s.left = ''+ this.offsetX +'px';
        s.top = ''+ this.offsetY +'px';
        if(this.url) {
            s.background = 'transparent url('+ this.url +') no-repeat scroll center';
        }
        
        Dom.addClass(this.domElement, "tile");
    };
    Tile.prototype = {
        //blank init that will always get called.  override in sub classes to change defaults
        init : function() {
        },
        refresh : function() {
            var obj = this.map.getTile(this.x,this.y,this.z);
            this.blank = obj.blank;
            this.data = obj.data;
            if(this.url != obj.url) {
                this.url = obj.url;
                if(this.url) {
                    Dom.setStyle(this.domElement, "background", 'transparent url('+ this.url +') no-repeat scroll center');
                }
                else {
                    Dom.setStyle(this.domElement, "background", 'transparent');
                }
            }
        },
        
        appendToDom : function() {
            if(this.domElement && !this.blank && !Dom.isAncestor(this.layer.tileContainer, this.domElement)) {
                this.layer.tileContainer.appendChild(this.domElement);
            }
        },
        destroy : function() {
            this.unsubscribeAll();
            this.remove();
            delete this.domElement;
        },
        remove : function() {
            if( this.domElement && this.domElement.parentNode) {
                this.domElement.parentNode.removeChild(this.domElement);
            }
        }
    };
    Lang.augmentProto(Tile, Util.EventProvider);
    Tile.idFor = function(x,y,z){
        return 'tile_'+ x + '_' + y + '_' + z;
    };
    
    Mapper.StarTile = function(x, y, z, ox, oy, layer) {
        Mapper.StarTile.superclass.constructor.call(this, x, y, z, ox, oy, layer);
    };
    Lang.extend(Mapper.StarTile, Tile, {
        init : function() {
            this.domElement.title = this.data ? [this.data.name, " (", this.x, ",", this.y, ")"].join('') : "Uncharted Space";
            
            if(this.data) {
                this._createImage();
                this._createAlignments();
            }
        },
        refresh : function() {
            var obj = this.map.getTile(this.x,this.y,this.z);
            this.blank = obj.blank;
            this.image = obj.image;
            this.url = obj.url;
            this.data = obj.data;
            if(this.url) {
                Dom.setStyle(this.domElement, "background", 'transparent url('+ this.url +') no-repeat scroll center');
            }
            
            if(this.data) {
                if(this.data.isStar) {
                    this.tileSizeInPx = this.map.tileSizeInPx*3;
                    var q = this.map.tileSizeInPx;
                    this.offsetX = this.origOffsetX - q;
                    this.offsetY = this.origOffsetY - q;
                }
                else {
                    this.tileSizeInPx = this.map.tileSizeInPx;
                    this.offsetX = this.origOffsetX;
                    this.offsetY = this.origOffsetY;
                }
                Dom.setStyle(this.domElement, "width", ''+this.tileSizeInPx+'px');
                Dom.setStyle(this.domElement, "height", ''+this.tileSizeInPx+'px');
                Dom.setStyle(this.domElement, "left", ''+this.offsetX+'px');
                Dom.setStyle(this.domElement, "top", ''+this.offsetY+'px');
            }
            
            this.init();
        },
        
        _createImage : function() {
            if(!this.imageHolder) {
                var image = this.domElement.appendChild(document.createElement('div'));
                Dom.setStyle(image, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(image, "height", this.tileSizeInPx + 'px');
                Dom.setStyle(image, "position", "absolute");
                Dom.setStyle(image, "top", "0");
                Dom.setStyle(image, "left", "0");
                this.imageHolder = image;
            }
            this._buildFissureHolder();
            this._buildLogoHolder();
            if(this.data.orbit) {
                if(this.map.hidePlanets) {
                    switch(this.data.type) {
                        case 'habitable planet':
                            this.imageHolder.innerHTML = "H";
                            break;
                        case 'gas giant':
                            this.imageHolder.innerHTML = "G";
                            break;
                        case 'asteroid':
                            this.imageHolder.innerHTML = "A";
                            break;
                        case 'space station':
                            this.imageHolder.innerHTML = "S";
                            break;
                        default:
                            this.imageHolder.innerHTML = "U";
                            break;
                    }
                }
                else {
                    var pSize = ((100 - Math.abs(this.data.size - 100)) / (100 / this.tileSizeInPx)) + 15;
                    this.imageHolder.innerHTML = ['<img src="',this.image,'" class="planet planet',this.data.orbit,'" style="width:',pSize,'px;height:',pSize,'px;margin-top:',Math.floor(((this.tileSizeInPx - pSize) / 2)),'px;" />'].join('');


                    if (this.data.body_has_fissure) {
                        this.fissureHolder.innerHTML = ['<img src="',Lib.AssetUrl,'star_map/fissure_icon.png" class="planet" style="width:',pSize,'px;height:',pSize,'px;margin-top:',Math.floor(((this.tileSizeInPx - pSize) / 2)),'px;" />'].join('');
                    }
                }
                
            }
            else {
                if (this.data.station) {

                    var station = this.data.station;
                    var pSize = this.tileSizeInPx;
                    this.logoHolder.innerHTML= ['<img src="',Lib.AssetUrl,'alliances/',station.alliance.image,'.png" class="star" style="width:',pSize,'px;height:',pSize,'px;" />'].join('');
                }
                this.imageHolder.innerHTML = ['<img src="',this.image,'" class="star" style="width:',this.tileSizeInPx,'px;height:',this.tileSizeInPx,'px;" />'].join('');
            }
        },
        _createAlignments : function() {
            if(this.data.empire && this.data.empire.alignment) {
                this._buildAlignmentHolder();
                if(this.data.orbit) {
                    if(this.map.hidePlanets) {
                        Dom.addClass(this.alignHolder, this.data.empire.alignment);
                    }
                    else {
                        var pSize = ((100 - Math.abs(this.data.size - 100)) / (100 / this.tileSizeInPx)) + 15;
                        this.alignHolder.innerHTML = ['<img src="',Lib.AssetUrl,'star_map/',this.data.empire.alignment,'.png" class="planet" style="width:',pSize,'px;height:',pSize,'px;margin-top:',Math.floor(((this.tileSizeInPx - pSize) / 2)),'px;" />'].join('');
                    }
                    
                }
                else {
                    this.alignHolder.innerHTML = ['<img src="',Lib.AssetUrl,'star_map/',this.data.empire.alignment,'.png" class="star" style="width:',this.tileSizeInPx,'px;height:',this.tileSizeInPx,'px;" />'].join('');
                }
            }
            else if(this.map.hidePlanets && this.data.orbit){
                this._buildAlignmentHolder();
                Dom.addClass(this.alignHolder, 'probed');
            }
        },
        _buildLogoHolder : function() {
            if(!this.logoHolder) {
                var logo = this.domElement.appendChild(document.createElement('div'));
                Dom.setStyle(logo, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(logo, "height", this.tileSizeInPx + 'px');
                Dom.setStyle(logo, "position", "absolute");
                Dom.setStyle(logo, "top", "0");
                Dom.setStyle(logo, "left", "0");
                Dom.setStyle(logo, "z-index", '3');
                this.logoHolder = logo;
            }
        },
        _buildFissureHolder : function() {
            if(!this.fissureHolder) {
                var fissure = this.domElement.appendChild(document.createElement('div'));
                Dom.setStyle(fissure, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(fissure, "height", this.tileSizeInPx + 'px');
                Dom.setStyle(fissure, "position", "absolute");
                Dom.setStyle(fissure, "top", "0");
                Dom.setStyle(fissure, "left", "0");
                Dom.setStyle(fissure, "z-index", '3');
                this.fissureHolder = fissure;
            }
        },
        _buildAlignmentHolder : function() {
            if(!this.alignHolder) {
                var align = this.domElement.appendChild(document.createElement('div'));
                Dom.setStyle(align, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(align, "height", this.tileSizeInPx + 'px');
                Dom.setStyle(align, "position", "absolute");
                Dom.setStyle(align, "top", "0");
                Dom.setStyle(align, "left", "0");
                Dom.setStyle(align, "z-index", '2');
                this.alignHolder = align;
            }
        }
    });
    
    Mapper.PlanetTile = function(x, y, z, ox, oy, layer) {
        Mapper.PlanetTile.superclass.constructor.call(this, x, y, z, ox, oy, layer);
        Dom.addClass(this.domElement, "tile"+ this.tileSizeInPx);
    };
    Lang.extend(Mapper.PlanetTile, Tile, {
        init : function() {
            this.domElement.title = this.data ? this.data.name : "Ground";
            this._createActionIcon();
            
            if(this.data && this.data.efficiency*1 < 100) {
                this._createEfficiencyBar(this.data.efficiency*1);
            }
            else if(this.cBar) {
                this.cBar.parentNode.removeChild(this.cBar);
                delete this.cBar;
                delete this.eBar;
            }
            
            this.startTick();
            /*if(this.data && this.data.pending_build) {
                this._createCounter();
                var remaining = Math.round(this.data.pending_build.seconds_remaining);
                if (remaining < 0) {
                    remaining = 0;
                }
                this.counterBuild.innerHTML = Lib.formatTime(remaining);
            }
            else if(this.counterBuild) {
                this.counterBuild.parentNode.removeChild(this.counterBuild);
                delete this.counterBuild;
            }*/
        },
        refresh : function() {
            Mapper.PlanetTile.superclass.refresh.call(this);
            this.init();
        },
        appendToDom : function() {
            if(this.domElement && !Dom.isAncestor(this.layer.tileContainer, this.domElement)) {
                this.layer.tileContainer.appendChild(this.domElement);
            }
        },
        remove : function() {
            this.stopTick();
            Mapper.PlanetTile.superclass.remove.call(this);
        },
        
        startTick : function() {
            if(this.data) {
                var subTick;
                
                if(this.data.pending_build && this.data.pending_build.seconds_remaining > 0) {
                    this._createBuildCounter();
                    subTick = true;
                }
                else if(this.counterBuild) {
                    this.counterBuild.parentNode.removeChild(this.counterBuild);
                    delete this.counterBuild;
                }
                
                if(this.data.work && this.data.work.seconds_remaining > 0) {
                    this._createWorkCounter();
                    subTick = true;
                }
                else if(this.counterWork){
                    this.counterWork.parentNode.removeChild(this.counterWork);
                    delete this.counterWork;
                }
                
                if(subTick && !this.isTicking) {
                    this.isTicking = true;
                    Game.onTick.subscribe(this.tick, this, true);
                }
            }
        },
        stopTick : function() {
            if(this.isTicking) {
                Game.onTick.unsubscribe(this.tick, this);
                delete this.isTicking;
                
                if(this.counterBuild) {
                    this.counterBuild.parentNode.removeChild(this.counterBuild);
                    delete this.counterBuild;
                }
                if(this.counterWork) {
                    this.counterWork.parentNode.removeChild(this.counterWork);
                    delete this.counterWork;
                }
            }
        },
        finishTick : function() {
            this.stopTick();
            if(this.data.pending_build && this.data.upgrade) {
                delete this.data.pending_build;
                this.data.level = (this.data.level*1) + 1;
                this.data.image = this.data.upgrade.image;
                this.map.addSingleTileData(this.data);
                this.refresh();
            }
            else {
                this.fireEvent("onReload", this);
            }
        },
        tick : function(e, oArgs) {
            var tickSec = oArgs[0]/1000, hasUpgrade, hasWork;
            if(this.data.pending_build) {
                this.data.pending_build.seconds_remaining -= tickSec;
                var remainingBuild = Math.round(this.data.pending_build.seconds_remaining);
                var upgrade = this.data.upgrade;
                if (remainingBuild > 0 && remainingBuild < 15 && upgrade && upgrade.image && !upgrade.preloaded) {
                    upgrade.preloaded = true;
                    var imgSize = this.map.getTileImageSize();
                    var img = new Image();
                    img.src = [Lib.AssetUrl,'planet_side/',imgSize,upgrade.image,'.png'].join('');
                }
                if (remainingBuild < 0) {
                    remainingBuild = 0;
                }
                hasUpgrade = remainingBuild > 0;
                this.counterBuild.innerHTML = Lib.formatTime(remainingBuild);
            }
            if(this.data.work) {
                this.data.work.seconds_remaining -= tickSec;
                var remainingWork = Math.round(this.data.work.seconds_remaining);
                if (remainingWork < 0) {
                    remainingWork = 0;
                }
                hasWork = remainingWork > 0;
                this.counterWork.innerHTML = Lib.formatTime(remainingWork);
            }
            if(!hasUpgrade && !hasWork) {
                this.finishTick();
            }
            else if(!hasUpgrade && this.data.pending_build && this.data.pending_build.seconds_remaining <= 0) {
                this.finishTick();
            }
            else if(!hasWork && this.data.work && this.data.work.seconds_remaining <= 0) {
                this.finishTick();
            }
        },
        
        refreshCounter : function() {
            var obj = this.map.getTile(this.x,this.y,this.z);
            this.blank = obj.blank;
            this.url = obj.url;
            this.data = obj.data;
            //make sure we're ticking if we need too
            this.startTick();
            /*
            if(!(this.data && this.data.pending_build && this.data.pending_build.seconds_remaining > 0.1)) {
                this.counterBuild.parentNode.removeChild(this.counterBuild);
                delete this.counterBuild;
            }
            if(this.data && this.data.pending_build && this.data.pending_build.seconds_remaining > 0.5) {
                this._createCounter();
                var remaining = Math.round(this.data.pending_build.seconds_remaining);
                if (remaining < 0) {
                    remaining = 0;
                }
                this.counterBuild.innerHTML = Lib.formatTime(remaining);
            }
            else {
                this.counterBuild.parentNode.removeChild(this.counterBuild);
                delete this.counterBuild;
            }
            */
        },
        _createBuildCounter : function() {
            if(!this.counterBuild) {
                var counterBuild = this.domElement.appendChild(document.createElement('div'));
                Dom.addClass(counterBuild, "planetMapTileCounter");
                Dom.setStyle(counterBuild, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(counterBuild, "height", this.tileSizeInPx + 'px');
                this.counterBuild = counterBuild;
            }
        },
        _createWorkCounter : function() {
            if(!this.counterWork) {
                var counterWork = this.domElement.appendChild(document.createElement('div'));
                Dom.addClass(counterWork, "planetMapTileCounterWork");
                //Dom.setStyle(counterWork, "width", this.tileSizeInPx + 'px');
                //Dom.setStyle(counterWork, "height", this.tileSizeInPx + 'px');
                this.counterWork = counterWork;
            }
            if(this.cBar) {
                Dom.setStyle(this.counterWork, "bottom" ,"20px");
            }
            else {
                Dom.setStyle(this.counterWork, "bottom" ,"0");
            }
        },
        _createActionIcon : function() {
            if(this.actionIcon) {
                if(this.data) {
                    this.actionIcon.innerHTML = ['<div class="planetMapTileActionLevel">',this.data.level,'</div>'].join('');
                }
                else {
                    this.actionIcon.innerHTML = '<div class="planetMapTileActionButton"></div>';
                }
            }
            else {
                var div = this.domElement.appendChild(document.createElement('div'));
                Dom.addClass(div, "planetMapTileActionContainer");
                Dom.setStyle(div, "width", this.tileSizeInPx + 'px');
                Dom.setStyle(div, "height", Math.round(this.tileSizeInPx/2) + 'px');
                if(this.data) {
                    if(Game.GetCookieSettings("showLevels", "0") == "1") {
                        Dom.setStyle(div, "visibility", "visible");
                    }
                    div.innerHTML = ['<div class="planetMapTileActionLevel">',this.data.level,'</div>'].join('');
                }
                else {
                    div.innerHTML = '<div class="planetMapTileActionButton"></div>';
                }
                this.actionIcon = div;
            }
        },
        _createEfficiencyBar : function(efficiency) {
            if(!this.cBar) {
                var bar = this.domElement.appendChild(document.createElement('div'));
                Dom.addClass(bar, "planetMapEfficiencyBarContainer");
                Dom.setStyle(bar, "width", this.tileSizeInPx + 'px');
                this.eBar = bar.appendChild(document.createElement('div'));
                Dom.addClass(this.eBar, "planetMapEfficiencyBar");
                this.cBar = bar;
            }
            Dom.setStyle(this.eBar, "width", Math.floor(this.tileSizeInPx*(efficiency/100)) + 'px');
            this.eBar.innerHTML = efficiency + "%";
            if(efficiency > 60) {
                Dom.setStyle(this.cBar, "border-color", 'yellow');
                Dom.setStyle(this.eBar, "background-color", 'yellow');
                Dom.setStyle(this.eBar, "color", 'black');
            }
            else if(efficiency > 30) {
                Dom.setStyle(this.cBar, "border-color", 'orange');
                Dom.setStyle(this.eBar, "background-color", 'orange');
                Dom.setStyle(this.eBar, "color", 'white');
            }
            else {
                Dom.setStyle(this.cBar, "border-color", 'red');
                Dom.setStyle(this.eBar, "background-color", 'red');
                Dom.setStyle(this.eBar, "color", 'white');
            }
        }
    });
    

    
    Mapper.CoordLayer = function(map) {
        this.map = map;
        this.offsetX = 0;
        this.offsetY = 0;
        this.div = document.createElement('div'); //so we can clone it a lot
    };
    Mapper.CoordLayer.prototype = {
        startDrag : function() {
            if(this.hasAnim) {
                this.xAnimOff.stop();
                this.xAnimOn.animate();
                this.yAnimOff.stop();
                this.yAnimOn.animate();
            }
        },
        endDrag : function() {
            if(this.hasAnim) {
                this.xAnimOff.animate();
                this.yAnimOff.animate();
            }
        },
        move : function(x,y) {
            // the coordinate div is inside the movable container
            // start by repositioning to match the current view
            this.offsetX += x;
            this.offsetY += y;
            this.containerDiv.style.left = ''+ this.offsetX +'px';
            this.containerDiv.style.top  = ''+ this.offsetY +'px';
            
            this.offsetCoordsX -= x;
            this.offsetCoordsY -= y;
            
            var tileSize = this.map.tileSizeInPx;

            var left = this.offsetCoordsX % tileSize;
            if (left >= 0) {
                left -= tileSize;
            }
            var top = this.offsetCoordsY % tileSize;
            if (top >= 0) {
                top -= tileSize;
            }
            this.xCoords.style.left = left +'px';
            this.yCoords.style.top = top + 'px';

            var i, coord, el;
            var startX = Math.ceil(-1 * this.offsetCoordsX / tileSize) - 1,
                xEls = this.xCoordTiles,
                xMin = this.map.maxBounds.x1Left,
                xMax = this.map.maxBounds.x2Right;
            for (i = 0; i < xEls.length; i++) {
                el = xEls[i];
                coord = startX + i;
                if (coord < xMin || coord > xMax) {
                    Dom.addClass(el, 'out-of-bounds');
                    el.innerHTML = '';
                }
                else {
                    Dom.removeClass(el, 'out-of-bounds');
                    el.innerHTML = coord;
                }
            }
            var startY = Math.ceil(this.offsetCoordsY / tileSize) - 1,
                yEls = this.yCoordTiles,
                yMin = this.map.maxBounds.y2Bottom,
                yMax = this.map.maxBounds.y1Top;
            for (i = 0; i < yEls.length; i++) {
                el = yEls[i];
                coord = startY - i + 1;
                if (coord < yMin || coord > yMax) {
                    Dom.addClass(el, 'out-of-bounds');
                    el.innerHTML = '';
                }
                else {
                    Dom.removeClass(el, 'out-of-bounds');
                    el.innerHTML = coord;
                }
            }
        },
        resize : function() {
            this.displayXCoords();
            this.displayYCoords();
            this.move(0,0);
        },
        redraw : function() {
            if( this.containerDiv ) {
                this.map.movableContainer.removeChild( this.containerDiv );
            }
            this.containerDiv = this.div.cloneNode(false);
            Dom.addClass(this.containerDiv, "coordContainer");
            var s = this.containerDiv.style;
            s.position = 'absolute';
            s.left = '0';
            s.top = '0';
            s.zIndex = '30';
                
            this.offsetX = 0;
            this.offsetY = 0;

            this.offsetCoordsX = Math.ceil( (this.map.visibleArea.left * this.map.tileSizeInPx) / 100 ) * 100; //Math.ceil( ((this.map.visibleArea.left * this.map.tileSizeInPx) + (0.5 * this.map.width)) / 100 ) * 100;
            this.offsetCoordsY = Math.ceil( (this.map.visibleArea.top * this.map.tileSizeInPx) / 100 ) * 100; //Math.ceil( ((this.map.visibleArea.top * this.map.tileSizeInPx) + (0.5 * this.map.height)) / 100 ) * 100;
        
            this.displayXCoords();
            this.displayYCoords();
            
            this.map.movableContainer.appendChild( this.containerDiv );
            
            this.move(0,0);
            this.endDrag();
        },
        displayXCoords : function() {
            if( this.xCoords ) {
                this.xCoords.parentNode.removeChild( this.xCoords );
            }
            var anchor = this.div.cloneNode(false);
            Dom.addClass(anchor, "coordTop");

            var pxSize = this.map.tileSizeInPx;
            var numToDraw = Math.ceil(this.map.width / pxSize) + 1;
            var xCoordTiles = [];
            for(var i=0; i < numToDraw; i++) {
                var num = this.div.cloneNode(false);
                Dom.addClass(num, "coordX");
                Dom.addClass(num, "coordX"+pxSize);
                Dom.setStyle(num, "left", (i * pxSize - 1) + "px");
                Dom.setStyle(num, "width", pxSize + "px");
                xCoordTiles.push(num);
                anchor.appendChild(num);
            }
            this.xCoords = this.containerDiv.appendChild(anchor);
            this.xCoordTiles = xCoordTiles;
            if(!YAHOO.env.ua.ie && !YAHOO.env.ua.gecko) {
                this.xAnimOff = new Util.Anim(this.xCoords, {opacity:{to:0.3}}, 10); 
                this.xAnimOn = new Util.Anim(this.xCoords, {opacity:{to:1.0}}, 0.2);
                this.hasAnim = 1;
            }
        },
        displayYCoords : function() {
            if( this.yCoords ) {
                this.yCoords.parentNode.removeChild( this.yCoords );
            }
            var anchor = this.div.cloneNode(false);
            Dom.addClass(anchor, "coordLeft");

            var pxSize = this.map.tileSizeInPx,
                thrd = Math.ceil(pxSize / 3),
                sizeLeft = (pxSize - thrd) + "px",
                thrdTxt = thrd + "px";
            var numToDraw = Math.ceil(this.map.height / pxSize) + 1;
            var yCoordTiles = [];
            for(var i=0; i < numToDraw; i++) {
                var num = this.div.cloneNode(false);
                Dom.addClass(num, "coordY");
                Dom.addClass(num, "coordY"+pxSize);
                Dom.setStyle(num, "height", sizeLeft);
                Dom.setStyle(num, "padding-top", thrdTxt);
                Dom.setStyle(num, "top", (i * pxSize - 1) + "px");
                yCoordTiles.push(num);
                anchor.appendChild(num);
            }
            this.yCoords = this.containerDiv.appendChild(anchor);
            this.yCoordTiles = yCoordTiles;
            if(!YAHOO.env.ua.ie && !YAHOO.env.ua.gecko) {
                this.yAnimOff = new Util.Anim(this.yCoords, {opacity:{to:0.3}}, 10); 
                this.yAnimOn = new Util.Anim(this.yCoords, {opacity:{to:1.0}}, 0.2); 
                this.hasAnim = 1;
            }
        }
    };

    
    
    var TileLayer = function(map, visibleArea, TileConstructor){
        this.tileCache = {};
        // tile layer expects map.movableContainer to be at the upper left corner of
        // the visibleArea on creation        
        this.map = map;
        this.visibleArea = visibleArea;
        this.TileConstructor = TileConstructor;
        
        var offsetX = visibleArea.left % map.tileSizeInPx;
        var offsetY = visibleArea.top % map.tileSizeInPx;
        
        this.baseTileLoc = visibleArea.topLeftLoc();
        
        var tileContainer = document.createElement('div');
        Dom.addClass(tileContainer, "tileContainer");
        var s = tileContainer.style;
        s.position = 'absolute';
        s.left = offsetX + 'px';
        s.top = offsetY + 'px';
        s.zIndex = '10';
        // for debuging:
        // s.width = ''+visibleArea.width+'px';
        // s.height = ''+visibleArea.height+'px';
        // s.backgroundColor = '#477';
        this.tileContainer = map.movableContainer.appendChild( tileContainer );
        
        this.createEvent("onReloadTile");
        
        this.render();
        
    };
    TileLayer.prototype = {
        findTile : function(x,y,zoom){
            //if(this.tileCache) {}
            return this.tileCache[Tile.idFor(x,y,zoom)];
        },
        findTileById : function(id) {
            return this.tileCache[id];
        },
        tileAtPosition : function(x,y){
            var tileSizeInPx = this.map.tileSizeInPx;
            return [Math.floor(x/tileSizeInPx), Math.floor(y/tileSizeInPx)];
        },
        _getTiles : function(x1, x2, y1, y2) {
            //show anything we already have
            this._showCachedTiles();
            //get any new tiles we need
            this.map.getTileData({
                success:function() {
                    this.showTiles();
                },
                scope:this
            }, x1, x2, y1, y2);
        },

        onReloadTile : function(tile) {
            this.fireEvent("onReloadTile", tile);
        },
        render : function(getNew) {
            if(getNew) {
                var bounds = this.visibleArea.coordBounds();

                this._getTiles(bounds.x1, bounds.x2, bounds.y1, bounds.y2);
            }
            else {
                this.showTiles();
            }
        },
        removeAllTilesNotContainedIn : function( hash ) {
            for( var key in this.tileCache ){
                if( this.tileCache.hasOwnProperty(key) && !hash[key] ){
                    var tile = this.tileCache[key];
                    tile.remove();
                }
            }
        },
        deleteCache : function() {
            for( var key in this.tileCache ){
                if( this.tileCache.hasOwnProperty(key) ){
                    this.tileCache[key].destroy();
                }
            }
        },
        destroy : function() {
            this.unsubscribeAll();
            this.deleteCache();
            //this.map.movableContainer.removeChild( this.tileContainer );
            Event.purgeElement(this.tileContainer);
            this.tileContainer.parentNode.removeChild(this.tileContainer);
            delete this.tileContainer;
            delete this.tileCache;
        },
        clear : function() {
            this.removeAllTilesNotContainedIn({});
        },
        reset : function() {
            this.removeAllTilesNotContainedIn({});
            this.tileCache = {};
        }
    };
    Lang.augmentProto(TileLayer, Util.EventProvider);
    
    Mapper.StarTileLayer = function(map, visibleArea, TileConstructor) {
        Mapper.StarTileLayer.superclass.constructor.call(this, map, visibleArea, TileConstructor);
    };
    Lang.extend(Mapper.StarTileLayer, TileLayer, {
        _showCachedTiles : function() {
            if(this.tileCache) {
                var bounds = this.visibleArea.coordBounds();
                var planets = Game.EmpireData.planetsByName || {};
                
                //from left to right (smaller to bigger)
                for(var xc=bounds.x1; xc <= bounds.x2; xc++){
                    //from bottom to top (smaller to bigger)
                    for(var yc=bounds.y2; yc <= bounds.y1; yc++){
                        var tile = this.findTile(xc,yc,this.map.zoom);
                        if(tile) {
                            if(tile.data && tile.data.name) {
                                if(planets.hasOwnProperty(tile.data.name)) {
                                    if(Lacuna.MapStar._map.tileCache[tile.x] && Lacuna.MapStar._map.tileCache[tile.x][tile.y]) {
                                        delete Lacuna.MapStar._map.tileCache[tile.x][tile.y]; // Remove the planet from the cache
                                    }
                                    tile.blank = true;
                                }
                            }
                            if(tile.blank) {
                                tile.refresh();
                            }
                            tile.appendToDom();
                            tile.unsubscribeAll(); //so we don't get multiple subs on the same tile
                            tile.subscribe("onReload", this.onReloadTile, this, true);
                        }
                    }
                }
            }
        },
        showTiles : function(refresh) {
            if(this.tileCache) {
                var bounds = this.visibleArea.coordBounds();
                var tiles = {};
                //from left to right (smaller to bigger)
                for(var xc=bounds.x1; xc <= bounds.x2; xc++){
                    //from bottom to top (smaller to bigger)
                    for(var yc=bounds.y2; yc <= bounds.y1; yc++){
                        var tile = this.findTile(xc,yc,this.map.zoom), doSub;
                        if(!tile) {
                            var ox = (xc - this.baseTileLoc[0]) * this.map.tileSizeInPx;
                            var oy = ((yc * -1) - this.baseTileLoc[1]) * this.map.tileSizeInPx;
                            //var offsets = this.visibleArea.getOffsetFromCoords(xc, xy, this.baseTileCoords[0], this.baseTileCoords[1]);
                            tile = new this.TileConstructor(xc, yc, this.map.zoom, ox, oy, this);
                            this.tileCache[tile.id] = tile;
                            tile.appendToDom();
                            doSub = true;
                        }
                        else if(refresh) {
                            tile.refresh();
                            doSub = true;
                        }
                        else {
                            if(tile.blank) {
                                tile.refresh();
                            }
                            tile.appendToDom();
                            doSub = true;
                        }
                        if(doSub) {
                            tile.unsubscribeAll(); //so we don't get multiple subs on the same tile
                            tile.subscribe("onReload", this.onReloadTile, this, true);
                        }
                        tiles[tile.id] = tile;
                    }
                }
                this.removeAllTilesNotContainedIn( tiles );
            }
        }
    });
    
    Mapper.PlanetTileLayer = function(map, visibleArea, TileConstructor) {
        this.bounds = {x1:map.maxBounds.x1Left,x2:map.maxBounds.x2Right,y1:map.maxBounds.y1Top,y2:map.maxBounds.y2Bottom};
        
        Mapper.PlanetTileLayer.superclass.constructor.call(this, map, visibleArea, TileConstructor);
    };
    Lang.extend(Mapper.PlanetTileLayer, TileLayer, {
        _showCachedTiles : function() {
            if(this.tileCache) {
                var bounds = this.bounds;
                
                //from left to right (smaller to bigger)
                for(var xc=bounds.x1; xc <= bounds.x2; xc++){
                    //from bottom to top (smaller to bigger)
                    for(var yc=bounds.y2; yc <= bounds.y1; yc++){
                        var tile = this.findTile(xc,yc,this.map.zoom);
                        if(tile) {
                            if(tile.blank) {
                                tile.refresh();
                            }
                            tile.appendToDom();
                            tile.unsubscribeAll(); //so we don't get multiple subs on the same tile
                            tile.subscribe("onReload", this.onReloadTile, this, true);
                        }
                    }
                }
            }
        },
        showTiles : function(refresh) {
            if(this.tileCache) {
                var bounds = this.bounds;
                var tiles = {};
                //from left to right (smaller to bigger)
                for(var xc=bounds.x1; xc <= bounds.x2; xc++){
                    //from bottom to top (smaller to bigger)
                    for(var yc=bounds.y2; yc <= bounds.y1; yc++){
                        var tile = this.findTile(xc,yc,this.map.zoom), doSub;
                        if(!tile) {
                            var ox = (xc - this.baseTileLoc[0]) * this.map.tileSizeInPx;
                            var oy = ((yc * -1) - this.baseTileLoc[1]) * this.map.tileSizeInPx;
                            //var offsets = this.visibleArea.getOffsetFromCoords(xc, xy, this.baseTileCoords[0], this.baseTileCoords[1]);
                            tile = new this.TileConstructor(xc, yc, this.map.zoom, ox, oy, this);
                            this.tileCache[tile.id] = tile;
                            tile.appendToDom();
                            doSub = true;
                        }
                        else if(refresh) {
                            tile.refresh();
                            doSub = true;
                        }
                        else {
                            if(tile.blank) {
                                tile.refresh();
                            }
                            tile.appendToDom();
                            doSub = true;
                        }
                        if(doSub) {
                            tile.unsubscribeAll(); //so we don't get multiple subs on the same tile
                            tile.subscribe("onReload", this.onReloadTile, this, true);
                        }
                        tiles[tile.id] = tile;
                    }
                }
            }
        }
    });


    
    var Map = function( divId, options ) {
        var IE='\v'=='v'; // detect IE
        this.IE = IE;
        
        //this.tileSizeInPx = undefined;
        this.maxZoom = 15;
        this.minZoom = -15;
        //this.visibleArea = undefined;
        //this.centerX = 0;
        //this.centerY = 0;
        this.diffX = 0;
        this.diffY = 0;
        this._pathsAndPolygons = {};
        this._projectedPoints = {};
        this.tileCache = {};
        this.bounds = {};
        this.maxBounds = {};
        
        this.createEvent("onReloadTile");
        
        this.mapDiv = document.getElementById( divId );
        this.mapDiv.style.overflow = "hidden";
        this.movableContainer = new Mapper.MovableContainer( this.mapDiv );
        
        this.init();

        this.coordLayer = new Mapper.CoordLayer(this);
        
        var ua = navigator.userAgent;
        if(ua.match(/iPhone|iPod|iPad/i)) {
            this.controller = new Mapper.iPhoneController( this );
        }
        else {
            this.controller = new Mapper.TraditionalController( this );
        }
    };
    Map.prototype = {
        //blank init that will always get called.  override in sub classes to change defaults
        init : function() {
        },
        // pX and pY are optional pixel coordinates. If set they
        // define the center of the map after the zoom. Otherwise
        // the center will be the same as before the zoom
        zoomIn : function() {
            //YAHOO.log("zooming in", "info", "Mapper.Map");
            if( this.zoom >= this.maxZoom ) {
                return;
            }
            this.setZoomLevel( this.zoom + 1 );
            //called by zoom display change //this.refresh();
        },
        zoomOut : function() {
            //YAHOO.log("zooming out", "info", "Mapper.Map");
            if( this.zoom <= this.minZoom ) {
                return;
            }
            this.setZoomLevel( this.zoom - 1 );
            //called by zoom display change //this.refresh();
        },
        setTileSizeInPx : function( size ) {
            this.tileSizeInPx = size;
            //this.mapExtendInPx = this.tileSizeInPx * (1<<this.zoom);
        },
        addElement : function( p ) {
            this._pathsAndPolygons[p.id] = p;
        },
        removeElement : function( p ) {
            delete this._pathsAndPolygons[p.id];
        },
        moveByTiles : function( x, y ) {
            var absX = Math.abs(x),
                absY = Math.abs(y),
                durMS = absX > absY ? this.tileSizeInPx * absX : this.tileSizeInPx * absY, //get the longest duration if we're moving both x and y
                totalX = x * this.tileSizeInPx,
                totalY = y * this.tileSizeInPx,
                stepX = Math.round(totalX / durMS) || (x<0 ? -1 : 1), //put this in to cover the possibility of total/dur rounding to 0. 0 will 
                stepY = Math.round(totalY / durMS) || (y<0 ? -1 : 1),
                progX = 0, 
                progY = 0, 
                lastDuration = 0,
                anim = new Util.Anim(undefined,undefined,durMS);
                
            anim.useSeconds = false; //keep everything in ms
            anim.onTween.subscribe(function(type,data){
                var completed = data[0].duration,
                    factor = completed - lastDuration,
                    moveX, moveY;
                lastDuration = completed;
                
                if(Math.abs(progX) >= Math.abs(totalX)) {
                    moveX = 0;
                }
                else {
                    moveX = stepX*factor;
                    progX += moveX;
                }
                if(Math.abs(progY) >= Math.abs(totalY)) {
                    moveY = 0;
                }
                else {
                    moveY = stepY*factor;
                    progY += moveY;
                }
                
                this.moveByPx(moveX, moveY);
            }, this, true);
            
            anim.animate();
        },
        moveByPx : function( x,y ) {
            var n = this.visibleArea.move( x*-1,y*-1 );
            //move values back to positive for us to use
            x = n.x*-1;
            y = n.y*-1;

            this.movableContainer.move( x,y );
            this.coordLayer.move( x*-1,y*-1 );
            /*
            this.diffX += x;
            this.diffY += y;

            var checkTileSize = this.tileSizeInPx;
            if( Math.abs(this.diffX) > checkTileSize || Math.abs(this.diffY) > checkTileSize) {
                //reset diff's
                this.diffX = this.diffY = 0;
                this.tileLayer.render();
            }
            */
            return {"x":x,"y":y};
        },
        setZoomLevel : function( level ) {
            this.zoom = level*1;
            this.controller.setZoomDisplay(this.zoom);
            if(this.tileLayer) {
                this.tileLayer.clear();
            }
        },
        redraw : function() {
            this.width = this.mapDiv.offsetWidth;
            this.height = this.mapDiv.offsetHeight;
            //this.centerX = Math.floor(0.5 * this.width);
            //this.centerY = Math.floor(0.5 * this.height);    
            
            this.movableContainer.reset();
            this.visibleArea = new Mapper.VisibleArea(this);

            this.coordLayer.redraw();
            
            if( this.tileLayer ) {
                this.tileLayer.destroy();        
            }
            this.tileLayer = new this.TileLayer(this, Mapper.util.clone(this.visibleArea), this.Tile);
            //pass through
            this.tileLayer.subscribe("onReloadTile", function(tile){
                this.fireEvent("onReloadTile",tile.data.id);
            }, this, true); 
        },
        refresh : function(isZoom) {
            //store location before we redraw
            var vac = isZoom ? this.visibleArea.centerLoc() : this.visibleArea.centerLocPx();
            //set tile size
            this._setTileSizeByZoom();
            //draw
            this.redraw();
            //reset location after draw
            if(isZoom) {
                this.setCenterTo(vac[0],vac[1]);
            }
            else {
                this.setCenterToPx(vac[0],vac[1]);
            }
        },
        resize : function() {
            this.width = this.mapDiv.offsetWidth;
            this.height = this.mapDiv.offsetHeight;
            
            this.visibleArea.resize();
            this.coordLayer.resize();
            
            this.tileLayer.showTiles();
        },
        setCenterTo : function(locX, locY) {
            if(Lang.isNumber(locX) && Lang.isNumber(locY) && this.tileLayer) {
                var otherWidth = this.visibleArea.centerX,
                    otherHeight = this.visibleArea.centerY,
                    ox = locX * this.tileSizeInPx + (this.tileSizeInPx / 2) - otherWidth,
                    oy = (locY * -1) * this.tileSizeInPx + (this.tileSizeInPx / 2) - otherHeight;
                
                this.moveByPx(ox * -1, oy * -1);
                this.tileLayer.render(true);

                /*var otherWidth = this.visibleArea.centerX,
                    otherHeight = this.visibleArea.centerY;
                var locXm = locX,
                    locYm = locY * -1;
                    
                var locXmPx = (locXm * this.tileSizeInPx) + (this.tileSizeInPx / 2),
                    locYmPx = (locYm * this.tileSizeInPx) + (this.tileSizeInPx / 2);
                    
                var ox = locXmPx - otherWidth,
                    oy = locYmPx - otherHeight;
                
                this.moveByPx(ox * -1, oy * -1);*/
            }
        },
        setCenterToPx : function(pX, pY) {
            if(Lang.isNumber(pX) && Lang.isNumber(pY) && this.tileLayer) {
                var otherWidth = this.visibleArea.centerX,
                    otherHeight = this.visibleArea.centerY,
                    ox = pX - otherWidth,
                    oy = pY - otherHeight;
                
                this.moveByPx(ox * -1, oy * -1);
                this.tileLayer.render(true);
            }
        },

        // override these for specific tile handling
        getTile  : function(x, y, z){
        },
        getBounds : function() {
        },
        updateBounds : function(oTile) {
        },
        addTileData : function(aTiles) {
        }
    };
    Lang.augmentProto(Map, Util.EventProvider);
    
    var MAX_STAR_AREA = 3001;
    Mapper.StarMap = function( divId, options ) {
        Mapper.StarMap.superclass.constructor.call(this, divId, options);
        Dom.setStyle(this.mapDiv, 'background-image', 'url("'+Lib.AssetUrl+'star_system/field.png")');
    };
    Lang.extend(Mapper.StarMap, Map, {
        _setTileSizeByZoom : function() {
            Game.SetCookieSettings("starZoom", this.zoom);
            switch(this.zoom){
                case 2:
                    this.setTileSizeInPx(150);
                    break;
                case 1:
                    this.setTileSizeInPx(100);
                    break;
                case -1:
                    this.setTileSizeInPx(50);
                    break;
                case -2:
                    this.setTileSizeInPx(35);
                    break;
                case -3:
                    this.setTileSizeInPx(20);
                    break;
                default:
                    this.setTileSizeInPx(75);
                    break;
            }
        },
        init : function() {
            this.maxZoom = 2;
            this.minZoom = -3;
            
            var mapSize = Game.ServerData.star_map_size;
            this.maxBounds = {x1Left:mapSize.x[0],x2Right:mapSize.x[1],y1Top:mapSize.y[1],y2Bottom:mapSize.y[0]};
            this.requestQueue = [];
        
            this.Tile = Mapper.StarTile;
            this.TileLayer = Mapper.StarTileLayer;
            
            this.zoom = Game.GetCookieSettings("starZoom",0)*1;
            this.hidePlanets = Game.GetCookieSettings("hidePlanets", 0)*1;
            
            this._setTileSizeByZoom();
        },
        getTile : function(x, y){
            var xSet = this.tileCache[x],
                body = xSet ? xSet[y] : null;
            
            if(body) {
                if(body.isStar) {
                    return {data:body, image:[Lib.AssetUrl,'star_map/',body.color,'.png'].join('')};
                }
                else if(body.isPlanet) {
                    return {data:body, image:[Lib.AssetUrl,'star_system/',body.image,'.png'].join('')};
                }
            }
            else {
                return {blank:true};
            }
        },
        getTileData : function(callback, x1, x2, y1, y2) {
            var xDiff = Math.abs(x2-x1),
                yDiff = Math.abs(y2-y1);
                
            if((xDiff * yDiff) > MAX_STAR_AREA) { //if out of bounds split and try again
                var half;
                if(xDiff > 0) { //make sure x diff isn't zero so we can split it in half, other wise use Y axis
                    half = Math.floor(xDiff/2);
                    this.getTileData(callback, x1, x1+half, y1, y2);
                    this.getTileData(callback, x2-half, x2, y1, y2);
                }
                else {
                    half = Math.floor(yDiff/2);
                    this.getTileData(callback, x1, x2, y1, y1-half);
                    this.getTileData(callback, x1, x2, y2+half, y2);
                }
            }
            else {
                //YAHOO.log(data, "debug", "StarMap.getTileData.requestData");
                Lacuna.Pulser.Show();
                Game.Services.Map.get_star_map({ args: {
                    session_id : Game.GetSession(""),
                    left : x1,
                    right : x2,
                    top : y1,
                    bottom : y2
                }},{
                    success : function(o){
                        //YAHOO.log(o, "debug", "StarMap.getTileData.get_stars.success");
                        Lacuna.Pulser.Hide();
                        if(o && o.result) {
                            Game.ProcessStatus(o.result.status);
                            this.addTileData(o.result.stars);                            
                            callback.success.call(callback.scope || this, callback.argument);
                        }
                    },
                    failure : function(o){
                        if(callback.failure) {
                            callback.failure.call(callback.scope || this, o);
                            return true;
                        }
                    },
                    scope:this
                });
            }
        },
        getBounds : function() {
            return this.bounds[this.zoom] || {x1Left:0,x2Right:0,y1Top:0,y2Bottom:0};
        },

        addTileData : function(aStars) {
            //var startZoomLevel = 0;
            var cp = Game.GetCurrentPlanet();
            
            for(var i=0; i<aStars.length; i++) {
                var star = aStars[i];
                star.isStar = true;
                if(!this.tileCache[star.x]) {
                    this.tileCache[star.x] = {};
                }
                this.tileCache[star.x][star.y] = star;

                if(star.bodies) { // && cp.star_id == star.id) {
                    for(var bKey in star.bodies){
                        if(star.bodies.hasOwnProperty(bKey)){
                            var body = star.bodies[bKey];
                            body.isPlanet = true;
                            if(!this.tileCache[body.x]) {
                                this.tileCache[body.x] = {};
                            }
                            this.tileCache[body.x][body.y] = body;
                        }
                    }
                }

                //this.updateBounds(star);
            }
            //return startZoomLevel;
        },
        reset : function() {
            this.tileCache = {};
            this.bounds = {};
            this.tileLayer.reset();
        }
        
    });
    
    Mapper.PlanetMap = function( divId, options ) {
        Mapper.PlanetMap.superclass.constructor.call(this, divId);
        this.setSurfaceUrl(options.surfaceUrl);
    };
    Lang.extend(Mapper.PlanetMap, Map, {
        _setTileSizeByZoom : function() {
            Game.SetCookieSettings("planetZoom", this.zoom);
            switch(this.zoom){
                case 2:
                    this.setTileSizeInPx(400);
                    break;
                case 1:
                    this.setTileSizeInPx(300);
                    break;
                case -1:
                    this.setTileSizeInPx(100);
                    break;
                case -2:
                    this.setTileSizeInPx(50);
                    break;
                default:
                    this.setTileSizeInPx(200);
                    break;
            }
        },
        init : function() {
            this.maxZoom = 2;
            this.minZoom = -2;
            
            this.bounds = {x1Left:-5,x2Right:5,y1Top:5,y2Bottom:-5};
            this.maxBounds = {x1Left:-5,x2Right:5,y1Top:5,y2Bottom:-5};
        
            this.Tile = Mapper.PlanetTile;
            this.TileLayer = Mapper.PlanetTileLayer;
            
            this.zoom = Game.GetCookieSettings("planetZoom",0)*1;
            this._setTileSizeByZoom();
        },
        setCenterToCommand : function() {
            if(this.command) { // && this.tileLayer) {
                this.setCenterTo(this.command.x, this.command.y);
                /*
                var otherWidth = this.visibleArea.centerX,
                    otherHeight = this.visibleArea.centerY;
                    
                var ox = this.command.x * this.tileSizeInPx + (this.tileSizeInPx / 2) - otherWidth,
                    oy = (this.command.y * -1) * this.tileSizeInPx + (this.tileSizeInPx / 2) - otherHeight;
                
                this.moveByPx(ox * -1, oy * -1);*/
            }
        },
        getTileImageSize : function() {
            switch(this.zoom) {
                case 2:
                    return "400/";
                case 1:
                    return "300/";
                case -1:
                    return "100/";
                case -2:
                    return "50/";
            }
        },
        getTile : function(x, y, z){
            var ySet = this.tileCache[x],
                building = ySet ? ySet[y] : null;
            
            if(building && building.image) {
                return {blank:building.level == 0, data:building, url:[Lib.AssetUrl,'planet_side/',this.getTileImageSize(),building.image,'.png'].join('')};
            }
            else {
                return {blank:true};
            }
        },
        getTileData : function(callback, x1, x2, y1, y2) {
            //since we should have all the data already, just call success
            callback.success.call(callback.scope || this, callback.argument);
        },
        getBounds : function() {
            return this.bounds;
        },
        setSurfaceUrl : function(surfaceUrl) {
            this._surfaceUrl = surfaceUrl;
            Dom.setStyle(this.mapDiv, 'background-image', 'url("' + surfaceUrl + '")');
        },
        setPlotsAvailable : function(plots) {
            if (plots > 0) {
                Dom.removeClass(this.mapDiv, 'plots-full');
            }
            else {
                Dom.addClass(this.mapDiv, 'plots-full');
            }
        },
        //don't update bounds on plant.  We have all data at start
        /*updateBounds : function(oTile) {
        },*/
        addTileData : function(oTiles, filterOutDeleted) {
            var startZoomLevel = 0,
                newTileCache = {};
            for(var tKey in oTiles) {
                if(oTiles.hasOwnProperty(tKey)){
                    var tile = oTiles[tKey];
                    tile.id = tKey;
                    if(tile.url == "/planetarycommand" || tile.url == "/stationcommand") {
                        this.command = tile;
                        this.command.x *= 1;
                        this.command.y *= 1;
                    }
                    if(!newTileCache[tile.x]) {
                        newTileCache[tile.x] = {};
                    }
                    newTileCache[tile.x][tile.y] = tile;
                }
            }
            if(filterOutDeleted) {
                for(var x in this.tileCache) {
                    for(var y in this.tileCache[x]) {
                        if(!newTileCache[x] || !newTileCache[x][y]) {
                            this.removeTile(x,y);
                        }
                    }
                }
            }
            this.tileCache = newTileCache;
            
            return startZoomLevel;
        },
        addSingleTileData : function(oBuilding) {
            if(oBuilding.url == "/planetarycommand" || oBuilding.url == "/stationcommand") {
                this.command = oBuilding;
                this.command.x *= 1;
                this.command.y *= 1;
            }
            if(!this.tileCache[oBuilding.x]) {
                this.tileCache[oBuilding.x] = {};
            }
            if(!this.tileCache[oBuilding.x][oBuilding.y]) {
                this.tileCache[oBuilding.x][oBuilding.y] = {};
            }
            this.tileCache[oBuilding.x][oBuilding.y] = oBuilding;
        },
        refreshTile : function(building) {
            if(this.tileLayer) {
                this.addSingleTileData(building);
                var tile = this.tileLayer.findTile(building.x,building.y,this.zoom);
                if(tile) {
                    tile.refresh();
                }
            }
        },
        refreshTileCounter : function(building) {
            if(this.tileLayer) {
                this.addSingleTileData(building);
                var tile = this.tileLayer.findTile(building.x,building.y,this.zoom);
                if(tile) {
                    tile.refreshCounter();
                }
            }
        },
        removeTile : function(x,y) {
            if(this.tileCache && this.tileCache[x] && this.tileCache[x][y]) {
                delete this.tileCache[x][y];
            }
            var tile = this.tileLayer.findTile(x,y,this.zoom);
            if(tile) {
                tile.refresh();
            }
        },
        reset : function() {
            this.tileCache = {};
            this.tileLayer.reset();
        }
    });

    
    
    Mapper.TraditionalController = function( map ) {
        this.map = map;
        this.dd = new YAHOO.util.DragDrop(map.mapDiv, 'mapper' );
        this.dd.subscribe("dragEvent", this.moveMap, this, true);
        this.dd.subscribe("startDragEvent", this.startDrag, this, true);
        this.dd.subscribe("endDragEvent", this.endDrag, this, true);
        
        var moveKeyListener = new KL(document, {
            keys : [ KL.KEY.UP, KL.KEY.DOWN, KL.KEY.LEFT, KL.KEY.RIGHT ]
        }, { fn: this.moveKey, scope:this, correctScope:true }, KL.KEYDOWN);
        var moveKeyUpListener = new KL(document, {
            keys : [ KL.KEY.UP, KL.KEY.DOWN, KL.KEY.LEFT, KL.KEY.RIGHT ]
        }, { fn: this.moveKeyUp, scope:this, correctScope:true }, KL.KEYUP);
        
        var xMove = 0;
        var yMove = 0;
        var lastMove = (new Date(0)).getTime();
        var timerActive = false;
        Game.onScroll(map.mapDiv, function(e, x, y) {
            xMove += x;
            yMove += y;
            
            // we get tons of events, so only move every 50 milliseconds
            var now = (new Date()).getTime();
            if ( now - lastMove > 50 ) {
                lastMove = now;
                map.moveByPx(xMove, yMove);
                xMove = 0;
                yMove = 0;
            }
            // refresh screen every second during scrolling, and once afterward
            if (!timerActive) {
                timerActive = true;
                setTimeout(function(){
                    map.tileLayer.render(true);
                    timerActive = false;
                }, 1000);
            }
        });
        
        moveKeyListener.enable();
        moveKeyUpListener.enable();
        var navEl = document.createElement('div');
        navEl.className = 'mapiator_nav';
        navEl.innerHTML = [
            '<div class="mapiator_nav_up" title="Move Up"></div>',
            '<div class="mapiator_nav_right" title="Move Right"></div>',
            '<div class="mapiator_nav_down" title="Move Down"></div>',
            '<div class="mapiator_nav_left" title="Move Left"></div>'
        ].join('');
        map.mapDiv.appendChild(navEl);
        var clickMoveMap = function(e, o) {
            map.moveByTiles(o[0], o[1]);
        };
        Event.on(Sel.query(".mapiator_nav_up", navEl, true), "click", clickMoveMap, [ 0, 1 ]);
        Event.on(Sel.query(".mapiator_nav_down", navEl, true), "click", clickMoveMap, [ 0, -1 ]);
        Event.on(Sel.query(".mapiator_nav_left", navEl, true), "click", clickMoveMap, [ 1, 0 ]);
        Event.on(Sel.query(".mapiator_nav_right", navEl, true), "click", clickMoveMap, [ -1, 0 ]);

        
        if((map.maxZoom - map.minZoom) != 0) {
            var zoomEl = document.createElement('div');
            zoomEl.className = 'mapiator_zoom';
            zoomEl.innerHTML = [
                '<div class="mapiator_zoom_slider">',
                '    <div class="mapiator_zoom_slider_thumb">',
                '        <img src="' + Lib.AssetUrl + 'ui/zoom_slider.png" />',
                '    </div>',
                '</div>',
                '<div class="mapiator_zoom_in" title="Zoom In"></div>',
                '<div class="mapiator_zoom_out" title="Zoom Out"></div>'
            ].join('');
            map.mapDiv.appendChild(zoomEl);
            Event.on(Sel.query(".mapiator_zoom_in", zoomEl, true), "click", map.zoomIn, map, true);
            Event.on(Sel.query(".mapiator_zoom_out", zoomEl, true), "click", map.zoomOut, map, true);
            var sliderId = Dom.generateId(Sel.query(".mapiator_zoom_slider", zoomEl, true), "mapiator_zoom_slider");
            var thumbId = Dom.generateId(Sel.query(".mapiator_zoom_slider_thumb", zoomEl, true), "mapiator_zoom_slider_thumb");

            var zoomSize = 140;
            var zoomScale = Math.floor(zoomSize / (map.maxZoom - map.minZoom));
            var zoomSlider = YAHOO.widget.Slider.getVertSlider(
                sliderId,
                thumbId,
                0,
                zoomSize,
                zoomScale
            );
            zoomSlider.setZoom = function(zoom, skipAnim, force, silent) {
                this.setValue((map.maxZoom - zoom) * zoomScale, skipAnim, force, silent);
            };
            zoomSlider.getZoom = function() {
                return map.maxZoom - this.getValue() / zoomScale;
            };
            zoomSlider.setZoom(map.zoom, true, true, true);
            zoomSlider.subscribe("change", function () {
                map.setZoomLevel( this.getZoom() );
                map.refresh(true);
            });
            this.zoomSlider = zoomSlider;
        }
        
    };
    Mapper.TraditionalController.prototype = {
        setZoomDisplay : function(zoom) {
            if(this.zoomSlider && this.zoomSlider.getZoom() != zoom) {
                this.zoomSlider.setZoom(zoom);
            }
        },
        startDrag : function(e){
            clearTimeout(this._timeout);
            this.xmove = this.ymove = undefined;
            this._dragging = true;
            this.map.coordLayer.startDrag();
        },
        moveMap : function (oArgs) {
            Event.preventDefault(oArgs.e);
            
            var x = Event.getPageX(oArgs.e),
                y = Event.getPageY(oArgs.e);
                
            if(this.xmove) {
                this.map.moveByPx( x - this.xmove, y - this.ymove );
            }
            this.xmove = x;
            this.ymove = y;
        },
        endDrag : function(e){
            var oSelf = this;
            this._timeout = setTimeout(function(){
                clearTimeout(oSelf._timeout);
                oSelf.xmove = oSelf.ymove = undefined;
                oSelf.map.coordLayer.endDrag();
                oSelf.map.tileLayer.render(true);
                oSelf._dragging = false;
            }, 500);
        },
        isDragging : function() {
            return this._dragging; // Math.abs(this.xmove) > 5;
        },
        moveKey : function(evName, evInfo) {
            var keyCode = evInfo[0],
                e = evInfo[1];
            if(!Dom.inDocument(this.map.mapDiv)) {
                return;
            }
            switch (e.target.tagName) {
                case "INPUT": case "SELECT": case "TEXTAREA": return;
            }
            
            if (keyCode == KL.KEY.UP) {
                this.map.moveByTiles(0,1);
            }
            else if (keyCode == KL.KEY.DOWN) {
                this.map.moveByTiles(0,-1);
            }
            else if (keyCode == KL.KEY.LEFT) {
                this.map.moveByTiles(1,0);
            }
            else if (keyCode == KL.KEY.RIGHT) {
                this.map.moveByTiles(-1,0);
            }
        },
        moveKeyUp : function(evName, evInfo) {
            var keyCode = evInfo[0];
            var e = evInfo[1];
            if(!Dom.inDocument(this.map.mapDiv)) {
                return;
            }
            switch (e.target.tagName) {
                case "INPUT": case "SELECT": case "TEXTAREA": return;
            }
            this.map.tileLayer.render(true);
        }
    };

    Mapper.iPhoneController = function(map) {
        this.map = map;
        this.currentX = 0;
        this.currentY = 0;
        
        Event.on(map.mapDiv, 'touchstart', this.touchStart, this, true);
        Event.on(map.mapDiv, 'touchend', this.touchEnd, this, true);
        Event.on(map.mapDiv, 'touchmove', this.touchMove, this, true);
        
        if((map.maxZoom - map.minZoom) != 0) {
            Event.on(map.mapDiv, 'gestureend', this.gestureEnd, this, true);
        }
    };
    Mapper.iPhoneController.prototype = {
        touchStart : function(e){
            if(e.touches.length == 1){ // Only deal with one finger
                var touch = e.touches[0]; // Get the information for finger #1
                this.currentX = touch.pageX;
                this.currentY = touch.pageY;
            } 
        },
        touchEnd : function(e){
            if(e.touches.length == 1){ // Only deal with one finger
                this.currentX = 0;
                this.currentY = 0;
            } 
        },
        touchMove : function(e){
            if(e.touches.length == 1){
                e.preventDefault();
                var touch = e.touches[0];
                diffX = touch.pageX - this.currentX;
                diffY = touch.pageY - this.currentY;

                this.map.moveByPx(diffX,diffY);

                this.currentX = touch.pageX;
                this.currentY = touch.pageY;
            }
        },
        gestureEnd : function(e){
            // note: this does not work if the default is prevented!
            if( e.scale > 1) { this.map.zoomIn(); }
            if( e.scale < 1) { this.map.zoomOut(); }
        },
        isDragging : function() {
            return false;
        }
    };
    
    YAHOO.lacuna.Mapper = Mapper;
})();
YAHOO.register("mapper", YAHOO.lacuna.Mapper, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/mapper.js","/")
},{"buffer":71,"oMfpAn":75}],56:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Menu == "undefined" || !YAHOO.lacuna.Menu) {

(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var UserMenu = function() {
        this.id = "userMenu";
        this.container = Dom.get("header");
        this.clickId = "userClick";
        this.elClick = Dom.get(this.clickId);
        this.elText = Dom.get("users");

        this.createEvent("onChangeClick");
        this.createEvent("onInboxClick");
        this.createEvent("onDestructClick");
    };
    UserMenu.prototype = {
        create : function() {
            var userMenu = new YAHOO.widget.Menu(this.id, {
                zindex: 1006,
                shadow:false,
                context:[this.clickId, "tl", "bl",[11, -14]]
            });
            userMenu.addItems([
                { text: "Alliance Map", url: "/starmap/",                                 target: "_blank" },
				{ text: "Changes Log",  url: "/changes.txt",                              target: "_blank" },
				{ text: "Forums",       url: "http://community.lacunaexpanse.com/forums", target: "_blank" },
				{ text: "Help",         url: "http://www.lacunaexpanse.com/help/",        target: "_blank" },
                { text: "Ideas",  url: "http://community.lacunaexpanse.com/forums/general",           target: "_blank" },
                { text: "Server Clock", onclick: { fn: Lacuna.Info.Clock.Show, scope:Lacuna.Info.Clock } },
                { text: "Terms of Service",   url: "http://www.lacunaexpanse.com/terms/", target: "_blank" },
                { text: "Wiki",         url: "http://community.lacunaexpanse.com/wiki/",  target: "_blank" }
            ]);
            userMenu.subscribe("beforeShow", function() {
                if (this.getRoot() == this) {
                    this.align("tl","bl",[11, -14]);
                    //this.bringToTop();
                }
            });
            userMenu.render();
            Dom.removeClass(this.container, Lib.Styles.HIDDEN);

            Event.addListener(this.elClick, "click", function(ev){
                //this.align("tl","bl");
                if(!this.cfg.getProperty("visible")){
                    this.show();
                }
                Event.stopEvent(ev);
            }, userMenu, true);

            this.Menu = userMenu;
            Dom.removeClass(this.container, Lib.Styles.HIDDEN);

            this.createLeft();
            this.createRight();

            var userMenuTT = new YAHOO.widget.Tooltip("userMenuTT", {
                zIndex:41010,
                xyoffset:[0,10],
                context:[this.elChangeClick,"userMenuProfile",this.elInboxClick,this.elEssentiaClick,this.elDestructClick,"userMenuInvite", "userMenuTutorial","userMenuSupport","userMenuStats","userMenuAbout","userMenuLogout"]
            });
            // Set the text for the tooltip just before we display it.
            userMenuTT.contextTriggerEvent.subscribe(function(type, args) {
                var context = args[0];
                this.cfg.setProperty("text", Lacuna.Menu.UserMenu.getTextFor(context.id));
            });

            this.userMenuTT = userMenuTT;

            this.update();
        },
        createLeft : function() {
            var change = document.createElement("div"),
                changeClick = change.cloneNode(false),
                changeImg = change.appendChild(document.createElement("img")),
                inbox = document.createElement("div"),
                inboxClick = inbox.cloneNode(false),
                inboxImg = inbox.appendChild(document.createElement("img")),
                inboxTxt = inbox.appendChild(document.createElement("span")),
                profile = this.container.appendChild(document.createElement("div")),
                profileClick = this.container.appendChild(profile.cloneNode(false)),
                profileImg = profile.appendChild(document.createElement("img")),
                essentia = document.createElement("div"),
                essentiaClick = essentia.cloneNode(false),
                essentiaImg = essentia.appendChild(document.createElement("img")),
                essentiaTxt = essentia.appendChild(document.createElement("span")),
                destruct = document.createElement("div"),
                destructClick = destruct.cloneNode(false),
                destructImg = destruct.appendChild(document.createElement("img"));

                //bookmark = document.createElement("div"),
                //bookmarkClick = bookmark.cloneNode(false),
                //bookmarkImg = bookmark.appendChild(document.createElement("img"));

            changeImg.src = Lib.AssetUrl + 'ui/l/star_map.png';
            changeImg.alt = "Change";
            changeClick.id = "userMenuChange";
            Event.on(changeClick, "click", function() {
                this.fireEvent("onChangeClick");
            }, this, true);
            Dom.addClass([change,changeClick], "change");
            Dom.addClass([change,changeClick], "menuItem");
            Dom.addClass(changeClick, "click");

            inboxImg.src = Lib.AssetUrl + (Game.EmpireData.has_new_messages ? 'ui/l/inbox_new.png' : 'ui/l/inbox.png');
            inboxImg.alt = inboxImg.title = "Inbox";
            inboxClick.id = "userMenuInbox";
            if (Game.EmpireData.has_new_messages) {
                inboxImg.title += " (" + Game.EmpireData.has_new_messages + " new)";
                inboxTxt.innerHTML = Game.EmpireData.has_new_messages;
            }
            Event.on(inboxClick, "click", function() {
                this.fireEvent("onInboxClick");
            }, this, true);
            Dom.addClass([inbox,inboxClick], "inbox");
            Dom.addClass([inbox,inboxClick], "menuItem");
            Dom.addClass(inboxClick, "click");

            profileImg.src = Lib.AssetUrl + 'ui/l/profile.png';
            profileImg.alt = "profile";
            profileClick.id = "userMenuProfile";
            Event.on(profileClick, "click", Lacuna.Profile.show, this, true);
            Dom.addClass([profile,profileClick], "profile");
            Dom.addClass([profile,profileClick], "menuItem");
            Dom.addClass(profileClick, "click");

            essentiaImg.src = Lib.AssetUrl + 'ui/l/essentia.png';
            essentiaImg.alt = essentiaImg.title = "Essentia";
            essentiaClick.id = "userMenuEssentia";
            Event.on(essentiaClick, "click", Lacuna.Essentia.show);
            Dom.addClass([essentia,essentiaClick], "essentia");
            Dom.addClass([essentia,essentiaClick], "menuItem");
            Dom.addClass(essentiaClick, "click");

            /*bookmarkImg.src = Lib.AssetUrl + 'ui/l/bookmarks.png';
            bookmarkImg.alt = "Bookmark";
            Event.on(bookmarkClick, "click", function() {
                this.fireEvent("onBookmarkClick");
            }, this, true);
            Dom.addClass([bookmark,bookmarkClick], "bookmark");
            Dom.addClass([bookmark,bookmarkClick], "menuItem");
            Dom.addClass(bookmarkClick, "click");*/

            destructImg.src = Lib.AssetUrl + (Game.EmpireData.self_destruct_active*1 === 1 ? 'ui/l/disable_self_destruct.png' : 'ui/l/enable_self_destruct.png');
            destructImg.alt = destructImg.title = "Destruct";
            destructClick.id = "userMenuDestruct";
            Event.on(destructClick, "click", function() {
                this.fireEvent("onDestructClick");
            }, this, true);
            Dom.addClass([destruct,destructClick], "destruct menuItem");
            Dom.addClass(destructClick, "click");

            this.elChange = this.container.appendChild(change);
            this.elChangeClick = this.container.appendChild(changeClick);
            this.elChangeImg = changeImg;
            this.elInbox = this.container.appendChild(inbox);
            this.elInboxClick = this.container.appendChild(inboxClick);
            this.elInboxImg = inboxImg;
            this.elInboxText = inboxTxt;
            //profile appended at the top since we don't have to change it ever
            this.elEssentia = this.container.appendChild(essentia);
            this.elEssentiaClick = this.container.appendChild(essentiaClick);
            this.elEssentiaText = essentiaTxt;
            //this.elBookmark = this.container.appendChild(bookmark);
            //this.elBookmarkClick = this.container.appendChild(bookmarkClick);

            this.elDestruct = this.container.appendChild(destruct);
            this.elDestructClick = this.container.appendChild(destructClick);
            this.elDestructImg = destructImg;
        },
        createRight : function() {
            var invite = this.container.appendChild(document.createElement("div")),
                inviteClick = this.container.appendChild(document.createElement("a")),
                inviteImg = invite.appendChild(document.createElement("img")),
                tutorial = this.container.appendChild(document.createElement("div")),
                tutorialClick = this.container.appendChild(document.createElement("a")),
                tutorialImg = tutorial.appendChild(document.createElement("img")),
                support = this.container.appendChild(document.createElement("div")),
                supportClick = this.container.appendChild(document.createElement("a")),
                supportImg = support.appendChild(document.createElement("img")),
                stats = this.container.appendChild(document.createElement("div")),
                statsClick = this.container.appendChild(stats.cloneNode(false)),
                statsImg = stats.appendChild(document.createElement("img")),
                about = this.container.appendChild(document.createElement("div")),
                aboutClick = this.container.appendChild(about.cloneNode(false)),
                aboutImg = about.appendChild(document.createElement("img")),
                logout = this.container.appendChild(document.createElement("div")),
                logoutClick = this.container.appendChild(logout.cloneNode(false)),
                logoutImg = logout.appendChild(document.createElement("img"));

            inviteImg.src = Lib.AssetUrl + 'ui/l/invite_friend.png';
            inviteImg.alt = inviteImg.title = "Invite Friend";
            inviteClick.id = "userMenuInvite";
            Event.on(inviteClick, "click", Lacuna.Invite.show, this, true);
            Dom.addClass([invite,inviteClick], "invite menuItem");
            Dom.addClass(inviteClick, "click");

            tutorialImg.src = Lib.AssetUrl + 'ui/l/tutorial.png';
            tutorialImg.alt = tutorialImg.title = "Tutorial";
            tutorialClick.id = "userMenuTutorial";
            tutorialClick.href = "http://www.lacunaexpanse.com/tutorial";
            tutorialClick.target = "_blank";
            Dom.addClass([tutorial,tutorialClick], "tutorial menuItem");
            Dom.addClass(tutorialClick, "click");

            supportImg.src = Lib.AssetUrl + 'ui/l/support.png';
            supportImg.alt = supportImg.title = "Support";
            supportClick.id = "userMenuSupport";
            supportClick.href = "http://community.lacunaexpanse.com/forums";
            supportClick.target = "_blank";
            Dom.addClass([support,supportClick], "support menuItem");
            Dom.addClass(supportClick, "click");

            statsImg.src = Lib.AssetUrl + 'ui/l/stats.png';
            statsImg.alt = statsImg.title = "Stats";
            statsClick.id = "userMenuStats";
            Event.on(statsClick, "click", Lacuna.Stats.show, this, true);
            Dom.addClass([stats,statsClick], "stats menuItem");
            Dom.addClass(statsClick, "click");

            aboutImg.src = Lib.AssetUrl + 'ui/l/about.png';
            aboutImg.alt = aboutImg.title = "About";
            aboutClick.id = "userMenuAbout";
            Event.on(aboutClick, "click", Lacuna.Menu.UserMenu.showAbout, this, true);
            Dom.addClass([about,aboutClick], "about menuItem");
            Dom.addClass(aboutClick, "click");

            logoutImg.src = Lib.AssetUrl + 'ui/l/logout.png';
            logoutImg.alt = logoutImg.title = "Logout";
            logoutClick.id = "userMenuLogout";
            Event.on(logoutClick, "click", Game.Logout, this, true);
            Dom.addClass([logout,logoutClick], "logout menuItem");
            Dom.addClass(logoutClick, "click");
        },
        update : function() {
            this.elText.innerHTML = Game.EmpireData.name || "Empire";
            this.updateTick();
        },
        updateTick : function() {
            var new_inbox_image;
            if (Game.EmpireData.has_new_messages) {
                new_inbox_image = Lib.AssetUrl + 'ui/l/inbox_new.png';
                this.elInboxImg.title = "Inbox (" + Game.EmpireData.has_new_messages + " new)";
                this.elInboxText.innerHTML = Game.EmpireData.has_new_messages;
            }
            else {
                new_inbox_image = Lib.AssetUrl + 'ui/l/inbox.png';
                this.elInboxImg.title = "Inbox";
                this.elInboxText.innerHTML = "";
            }
            if (this.elInboxImg.src != new_inbox_image) {
                this.elInboxImg.src = new_inbox_image;
            }
            var new_destruct_image = Lib.AssetUrl + (Game.EmpireData.self_destruct_active*1 === 1 ? 'ui/l/disable_self_destruct.png' : 'ui/l/enable_self_destruct.png');
            if (this.elDestructImg.src != new_destruct_image) {
                this.elDestructImg.src = new_destruct_image;
            }

            this.elEssentiaText.innerHTML = Lib.convertNumDisplay(Game.EmpireData.essentia, true);
        },
        show : function() {
            Dom.removeClass(this.container, Lib.Styles.HIDDEN);
        },
        hide : function() {
            Dom.addClass(this.container, Lib.Styles.HIDDEN);
        },
        starVisible : function(vis) {
            this.elChangeClick.title = "To your Planet";
            this.elChangeImg.src = Lib.AssetUrl + 'ui/l/planet_side.png';
            this._planetVisible = false;
            this._starVisible = true;
        },
        planetVisible : function(vis) {
            this.elChangeClick.title = "To the Starmap";
            this.elChangeImg.src = Lib.AssetUrl + 'ui/l/star_map.png';
            this._planetVisible = true;
            this._starVisible = false;
        },
        showAbout : function() {
            Game.OverlayManager.hideAll();
            Lacuna.About.show();
        },

        getTextFor : function(id) {
            var ED = Game.EmpireData,
                output;
            switch(id){
                case "userMenuChange":
                    output = [this._planetVisible ? "To the Starmap" : "To your Planet"];
                    break;
                case "userMenuProfile":
                    output = ['Profile'];
                    break;
                case "userMenuInbox":
                    if (Game.EmpireData.has_new_messages) {
                        output = ["Inbox (" + Game.EmpireData.has_new_messages + " new)"];
                    }
                    else {
                        output = ["Inbox"];
                    }
                    break;
                case "userMenuEssentia":
                    output = ['Essentia'];
                    break;
                case "userMenuInvite":
                    output = ['Invite a Friend'];
                    break;
                case "userMenuTutorial":
                    output = ['Tutorial'];
                    break;
                case "userMenuSupport":
                    output = ['Support'];
                    break;
                case "userMenuDestruct":
                    if(ED.self_destruct_active*1 === 1) {
                        output = ['Disable Destruction Date of : ', Lib.formatServerDate(ED.self_destruct_date)];
                    }
                    else {
                        output = ['Enable Self Destruct'];
                    }
                    break;
                case "userMenuStats":
                    output = ['Stats'];
                    break;
                case "userMenuAbout":
                    output = ['About'];
                    break;
                case "userMenuLogout":
                    output = ['Logout'];
                    break;
                default:
                    output = [];
                    break;
            }
            return output.join('');
        }
    };
    Lang.augmentProto(UserMenu, Util.EventProvider);

    var PlanetMenu = function() {
        this.id = "planetMenu";
        this.container = Dom.get("footer");
        this.clickId = "planetsClick";
        this.elClick = Dom.get(this.clickId);
        this.elText = Dom.get("planets");
    };
    PlanetMenu.prototype = {
        create : function() {
            var planetMenu = new YAHOO.widget.Menu(this.id, {
                zindex: 1006,
                shadow:false,
                //effect:{effect:YAHOO.widget.ContainerEffect.SLIDE,duration:0.5},
                context:[this.clickId, "bl", "tl",[9, 10]]
            });
            planetMenu.subscribe("beforeShow", function() {
                if (this.getRoot() == this) {
                    this.align("bl","tl",[9, 10]);
                    //this.bringToTop();
                }
            });
            planetMenu.render();
            Dom.removeClass(this.container, Lib.Styles.HIDDEN);

            Event.addListener(this.elClick, "click", function(ev){
                //this.align("bl","tl");
                this.show();
                Event.stopEvent(ev);
            }, planetMenu, true);

            this.Menu = planetMenu;

            /*var arrow = document.createElement("div");
            arrow.id = "planetsArrow";
            var pc = Dom.get("planetsCenter");
            pc.insertBefore(arrow, pc.firstChild);*/

            this.createLeft();
            this.createRight();

            var planetMenuTT = new YAHOO.widget.Tooltip("planetMenuTT", {
                zIndex:41011,
                xyoffset:[0,-10],
                context:[this.elFoodOver,this.elOreOver,this.elWaterOver,this.elEnergyOver,this.elWasteOver,this.elHappyOver,this.elPlotsOver]
            });
            // Set the text for the tooltip just before we display it.
            planetMenuTT.contextTriggerEvent.subscribe(function(type, args) {
                var context = args[0];
                this.cfg.setProperty("text", Lacuna.Menu.PlanetMenu.getTextFor(context.id));
            });

            this.planetMenuTT = planetMenuTT;


            this.update();
        },
        createLeft : function() {
            var food = document.createElement("div"),
                foodOver = food.cloneNode(false),
                foodImg = food.appendChild(document.createElement("img")),
                foodTxt = food.appendChild(document.createElement("span")),
                foodPercent = food.appendChild(document.createElement("div")),
                foodHr = food.appendChild(document.createElement("span")),
                ore = document.createElement("div"),
                oreOver = ore.cloneNode(false),
                oreImg = ore.appendChild(document.createElement("img")),
                oreTxt = ore.appendChild(document.createElement("span")),
                orePercent = ore.appendChild(document.createElement("div")),
                oreHr = ore.appendChild(document.createElement("span")),
                water = document.createElement("div"),
                waterOver = water.cloneNode(false),
                waterImg = water.appendChild(document.createElement("img")),
                waterTxt = water.appendChild(document.createElement("span")),
                waterPercent = water.appendChild(document.createElement("div")),
                waterHr = water.appendChild(document.createElement("span")),
                energy = document.createElement("div"),
                energyOver = energy.cloneNode(false),
                energyImg = energy.appendChild(document.createElement("img")),
                energyTxt = energy.appendChild(document.createElement("span")),
                energyPercent = energy.appendChild(document.createElement("div")),
                energyHr = energy.appendChild(document.createElement("span"));

            foodImg.src = Lib.AssetUrl + 'ui/l/food.png';
            foodImg.alt = foodImg.title = "Food";
            foodOver.id = "planetMenuFood";
            Dom.addClass([food,foodOver], "food");
            Dom.addClass([food,foodOver], "menuItem");
            Dom.addClass(foodOver, "click");
            Dom.addClass(foodTxt, "stored");
            Dom.addClass(foodHr, "perHr");

            oreImg.src = Lib.AssetUrl + 'ui/l/ore.png';
            oreImg.alt = oreImg.title = "Ore";
            oreOver.id = "planetMenuOre";
            Dom.addClass([ore,oreOver], "ore");
            Dom.addClass([ore,oreOver], "menuItem");
            Dom.addClass(oreOver, "click");
            Dom.addClass(oreTxt, "stored");
            Dom.addClass(oreHr, "perHr");

            waterImg.src = Lib.AssetUrl + 'ui/l/water.png';
            waterImg.alt = waterImg.title = "Water";
            waterOver.id = "planetMenuWater";
            Dom.addClass([water,waterOver], "water");
            Dom.addClass([water,waterOver], "menuItem");
            Dom.addClass(waterOver, "click");
            Dom.addClass(waterTxt, "stored");
            Dom.addClass(waterHr, "perHr");

            energyImg.src = Lib.AssetUrl + 'ui/l/energy.png';
            energyImg.alt = energyImg.title = "Energy";
            energyOver.id = "planetMenuEnergy";
            Dom.addClass([energy,energyOver], "energy");
            Dom.addClass([energy,energyOver], "menuItem");
            Dom.addClass(energyOver, "click");
            Dom.addClass(energyTxt, "stored");
            Dom.addClass(energyHr, "perHr");

            Dom.addClass([foodPercent,orePercent,waterPercent,energyPercent], 'menuPercent');
            foodPercent = foodPercent.appendChild(document.createElement('div'));
            orePercent = orePercent.appendChild(document.createElement('div'));
            waterPercent = waterPercent.appendChild(document.createElement('div'));
            energyPercent = energyPercent.appendChild(document.createElement('div'));
            Dom.addClass([foodPercent,orePercent,waterPercent,energyPercent], 'menuPercentInner');
            foodPercent.innerHTML = '&nbsp;';
            orePercent.innerHTML = '&nbsp;';
            waterPercent.innerHTML = '&nbsp;';
            energyPercent.innerHTML = '&nbsp;';

            this.elFood = this.container.appendChild(food);
            this.elFoodOver = this.container.appendChild(foodOver);
            this.elFoodText = foodTxt;
            this.elFoodPercent = foodPercent;
            this.elFoodHour = foodHr;
            this.elOre = this.container.appendChild(ore);
            this.elOreOver = this.container.appendChild(oreOver);
            this.elOreText = oreTxt;
            this.elOrePercent = orePercent;
            this.elOreHour = oreHr;
            this.elWater = this.container.appendChild(water);
            this.elWaterOver = this.container.appendChild(waterOver);
            this.elWaterText = waterTxt;
            this.elWaterPercent = waterPercent;
            this.elWaterHour = waterHr;
            this.elEnergy = this.container.appendChild(energy);
            this.elEnergyOver = this.container.appendChild(energyOver);
            this.elEnergyText = energyTxt;
            this.elEnergyPercent = energyPercent;
            this.elEnergyHour = energyHr;
        },
        createRight : function() {
            var waste = document.createElement("div"),
                wasteOver = waste.cloneNode(false),
                wasteImg = waste.appendChild(document.createElement("img")),
                wasteTxt = waste.appendChild(document.createElement("span")),
                wastePercent = waste.appendChild(document.createElement("div")),
                wasteHr = waste.appendChild(document.createElement("span")),
                happy = document.createElement("div"),
                happyOver = happy.cloneNode(false),
                happyImg = happy.appendChild(document.createElement("img")),
                happyTxt = happy.appendChild(document.createElement("span")),
                happyHr = happy.appendChild(document.createElement("span")),
                plots = document.createElement("div"),
                plotsOver = plots.cloneNode(false),
                plotsImg = plots.appendChild(document.createElement("img")),
                plotsTxt = plots.appendChild(document.createElement("span"));

            wasteImg.src = Lib.AssetUrl + 'ui/l/waste.png';
            wasteImg.alt = wasteImg.title = "Waste";
            wasteOver.id = "planetMenuWaste";
            Dom.addClass([waste,wasteOver], "waste");
            Dom.addClass([waste,wasteOver], "menuItem");
            Dom.addClass(wasteOver, "click");
            Dom.addClass(wasteTxt, "stored");
            Dom.addClass(wasteHr, "perHr");
            Dom.addClass(wastePercent, 'menuPercent');
            wastePercent = wastePercent.appendChild(document.createElement('div'));
            Dom.addClass(wastePercent, 'menuPercentInner');
            wastePercent.innerHTML = '&nbsp;';

            happyImg.src = Lib.AssetUrl + 'ui/l/happiness.png';
            happyImg.alt = happyImg.title = "Happiness";
            happyOver.id = "planetMenuHappiness";
            Dom.addClass([happy,happyOver], "happiness");
            Dom.addClass([happy,happyOver], "menuItem");
            Dom.addClass(happyOver, "click");
            Dom.addClass(happyTxt, "stored");
            Dom.addClass(happyHr, "perHr");

            plotsImg.src = Lib.AssetUrl + 'ui/l/plots.png';
            plotsImg.alt = plotsImg.title = "plots";
            plotsOver.id = "planetMenuPlots";
            Dom.addClass([plots,plotsOver], "plots");
            Dom.addClass([plots,plotsOver], "menuItem");
            Dom.addClass(plotsOver, "click");
            Dom.addClass(plotsTxt, "stored");

            this.elWaste = this.container.appendChild(waste);
            this.elWasteOver = this.container.appendChild(wasteOver);
            this.elWasteText = wasteTxt;
            this.elWastePercent = wastePercent;
            this.elWasteHour = wasteHr;
            this.elHappy = this.container.appendChild(happy);
            this.elHappyOver = this.container.appendChild(happyOver);
            this.elHappyText = happyTxt;
            this.elHappyHour = happyHr;
            this.elPlots = this.container.appendChild(plots);
            this.elPlotsOver = this.container.appendChild(plotsOver);
            this.elPlotsText = plotsTxt;
        },
        update : function() {
            var ED = Game.EmpireData,
                planets = ED.planets || {},
                cpi = ED.current_planet_id || ED.home_planet_id,
                cp = planets[cpi],
                count = 0;

            this.Menu.clearContent();

            var items = [];
            for(var pKey in planets) {
                if(planets.hasOwnProperty(pKey)) {
                    var p = planets[pKey],
                        pObj = {
                            text: p.name,
                            id: "planetMenuItem"+(count++),
                            onclick: { fn: this.menuClick, obj:p }
                        },
                        submenuItems = [{ text: "Go To Surface", onclick: { fn: this.menuPlanetClick, obj:p } }];
                    if(p.star_name) {
                        submenuItems.push({ text: "Go To Star ("+p.star_name+")", onclick: { fn: this.menuStarClick, obj:p } });
                    }
                    pObj.submenu = {
                        id : "planetMenuItem"+count+"-Sub",
                        itemData : submenuItems
                    };
                    items.push(pObj);
                }
            }

            items.sort(function(a,b){
                var nameA = a.text.toLowerCase( );
                var nameB = b.text.toLowerCase( );
                if (nameA < nameB) {return -1;}
                if (nameA > nameB) {return 1;}
                return 0;
            });

            this.Menu.addItems(items);
            this.Menu.render();

            this.elText.innerHTML = [cp.image ? '<img src="'+Lib.AssetUrl+'star_system/'+cp.image+'.png" class="menuPlanetThumb" />' : '', cp.name].join('');

            this.updateTick();
        },
        updateElm : function(el, newVal, extra) {
            var formatedVal = Lib.convertNumDisplay(newVal) + (extra || '');
            if(el.innerHTML != formatedVal) {
                var fromColor = el.currentValue && el.currentValue > newVal ? '#f00' : '#0f0';
                el.currentValue = newVal;
                el.innerHTML = formatedVal;
                var a = new Util.ColorAnim(el, {color:{from:fromColor,to:'#fff'}}, 1.5);
                a.animate();
            }
        },
        updateTick : function() {
            var ED = Game.EmpireData,
                planets = ED.planets || {},
                cpi = ED.current_planet_id || ED.home_planet_id,
                cp = planets[cpi],
                count = 0;

            if(cp) {
                //this.elText.innerHTML = ['<img src="', Lib.AssetUrl, 'star_system/', cp.image, '.png" class="menuPlanetThumb" />', cp.name].join('');
                this.updateElm(this.elFoodText, cp.food_stored);
                this.updateElm(this.elFoodHour, cp.food_hour, '/hr');
                this.updatePercent(this.elFoodPercent, cp.food_stored/cp.food_capacity||0);
                this.updateElm(this.elOreText, cp.ore_stored);
                this.updateElm(this.elOreHour, cp.ore_hour, '/hr');
                this.updatePercent(this.elOrePercent, cp.ore_stored/cp.ore_capacity||0);
                this.updateElm(this.elWaterText, cp.water_stored);
                this.updateElm(this.elWaterHour, cp.water_hour, '/hr');
                this.updatePercent(this.elWaterPercent, cp.water_stored/cp.water_capacity||0);
                this.updateElm(this.elEnergyText, cp.energy_stored);
                this.updateElm(this.elEnergyHour, cp.energy_hour, '/hr');
                this.updatePercent(this.elEnergyPercent, cp.energy_stored/cp.energy_capacity||0);

                this.updateElm(this.elWasteText, cp.waste_stored);
                this.updateElm(this.elWasteHour, cp.waste_hour, '/hr');
                this.updatePercent(this.elWastePercent, cp.waste_stored/cp.waste_capacity||0);
                this.updateElm(this.elHappyText, cp.happiness);
                this.updateElm(this.elHappyHour, cp.happiness_hour, '/hr');
                this.updateElm(this.elPlotsText, cp.plots_available*1);
            }
            else {
                this.elText.innerHTML = "Planet";

                this.elFoodText.innerHTML = "0";
                this.elFoodHour.innerHTML = "0";
                Dom.setStyle(this.elFoodPercent, 'width', 0);
                this.elOreText.innerHTML = "0";
                this.elOreHour.innerHTML = "0";
                Dom.setStyle(this.elOrePercent, 'width', 0);
                this.elWaterText.innerHTML = "0";
                this.elWaterHour.innerHTML = "0";
                Dom.setStyle(this.elWaterPercent, 'width', 0);
                this.elEnergyText.innerHTML = "0";
                this.elEnergyHour.innerHTML = "0";
                Dom.setStyle(this.elEnergyPercent, 'width', 0);

                this.elWasteText.innerHTML = "0";
                this.elWasteHour.innerHTML = "0";
                Dom.setStyle(this.elWastePercent, 'width', 0);
                this.elHappyText.innerHTML = "0";
                this.elHappyHour.innerHTML = "0";
                this.elPlotsText.innerHTML = "0";
            }
        },
        updatePercent : function(el, perc) {
            if (perc > 1) {
                perc = 1;
            }
            Dom.setStyle(el, 'width', (Math.round(perc*10000)/100) + '%');

            var colorPercent;
            if (perc < 0.8) {
                colorPercent = 0;
            }
            else {
                colorPercent = 5 * perc - 4;
            }

            var color = 'rgb(255,'+Math.round(255 - 127 * colorPercent)+','+Math.round(255 - 255 * colorPercent) + ')';
            Dom.setStyle(el, 'background-color', color);
            Dom.setStyle(el.parentNode, 'border-color', color);
        },
        menuClick : function(p_sType, p_aArgs, planet){
            Lacuna.Menu.PlanetMenu.Menu.hide();
            YAHOO.log(planet, "info", "PlanetMenu.menuClick.click");
            if(Lacuna.MapStar.IsVisible()) {
                Game.PlanetChange(planet);
            }
            else {
                Game.PlanetJump(planet);
            }
        },
        menuStarClick : function(p_sType, p_aArgs, planet){
            Lacuna.Menu.PlanetMenu.Menu.hide();
            YAHOO.log(planet, "info", "PlanetMenu.menuStarClick.click");
            Game.StarJump({id:planet.star_id, name:planet.star_name, x:planet.x, y:planet.y});
        },
        menuPlanetClick : function(p_sType, p_aArgs, planet){
            Lacuna.Menu.PlanetMenu.Menu.hide();
            Game.PlanetJump(planet);
        },

        show : function() {
            Dom.removeClass(this.container, Lib.Styles.HIDDEN);
        },
        hide : function() {
            Dom.addClass(this.container, Lib.Styles.HIDDEN);
        },

        resourceTTText : function(name, icon, iconClass, hour, store, cap) {
            var wantCap = typeof cap !== 'undefined';
            return [
                '<div><strong>',name,'</strong></div>',
                '<div><img alt="" class="',iconClass,'" src="',Lib.AssetUrl,'ui/s/',icon,'.png" /> ',Lib.formatNumber(hour),'/hr</div>',
                '<div><img alt="" class="smallStorage" src="',Lib.AssetUrl,'ui/s/storage.png" />',Lib.formatNumber(Math.round(store)), (wantCap ? '/'+Lib.formatNumber(cap) : ''),'</div>',
                (wantCap ? '<div><img alt="" class="smallTime" src="'+Lib.AssetUrl+'ui/s/time.png" />' + (
                    hour < 0 && store > 0 ?
                        'Empty In '+Lib.formatTime(-3600 * store / hour) :
                    hour >= 0 && cap == store ?
                        'Full' :
                    hour > 0 ?
                        'Full In '+Lib.formatTime(3600 * (cap - store) / hour) :
                    'Will Never Fill'
                ) + '</div>' : '')
            ];
        },
        getTextFor : function(id) {
            var ED = Game.EmpireData,
                planet = ED.planets[ED.current_planet_id || ED.home_planet_id],
                output;
            switch(id){
                case "planetMenuFood":
                    output = this.resourceTTText('Food', 'food', 'smallFood', planet.food_hour, planet.food_stored, planet.food_capacity);
                    break;
                case "planetMenuOre":
                    output = this.resourceTTText('Ore', 'ore', 'smallOre', planet.ore_hour, planet.ore_stored, planet.ore_capacity);
                    break;
                case "planetMenuWater":
                    output = this.resourceTTText('Water', 'water', 'smallWater', planet.water_hour, planet.water_stored, planet.water_capacity);
                    break;
                case "planetMenuEnergy":
                    output = this.resourceTTText('Energy', 'energy', 'smallEnergy', planet.energy_hour, planet.energy_stored, planet.energy_capacity);
                    break;
                case "planetMenuWaste":
                    output = this.resourceTTText('Waste', 'waste', 'smallWaste', planet.waste_hour, planet.waste_stored, planet.waste_capacity);
                    break;
                case "planetMenuHappiness":
                    output = this.resourceTTText('Happiness', 'happiness', 'smallHappy', planet.happiness_hour, planet.happiness);
                    break;
                case "planetMenuPlots":
                    output = [planet.plots_available*1, ' Plots Available'];
                    break;
                default:
                    output = [];
                    break;
            }
            return output.join('');
        }
    };

    var Menu = function() {
        this.UserMenu = new UserMenu();
        this.PlanetMenu = new PlanetMenu();

        this.createEvent("onChangeClick");
        this.createEvent("onInboxClick");
        this.createEvent("onDestructClick");

        this.UserMenu.subscribe("onChangeClick", function() {
            this.fireEvent("onChangeClick");
        }, this, true);
        this.UserMenu.subscribe("onInboxClick", function() {
            this.fireEvent("onInboxClick");
        }, this, true);
        this.UserMenu.subscribe("onDestructClick", function() {
            this.fireEvent("onDestructClick");
        }, this, true);
    };
    Menu.prototype = {
        create : function() {
            if(!this.created) {
                this.created = true;
                this.UserMenu.create();
                this.PlanetMenu.create();
            }
            else {
                this.UserMenu.update();
                this.PlanetMenu.update();
                this.show();
            }
        },
        update : function() {
            if(this.created) {
                this.UserMenu.update();
                this.PlanetMenu.update();
            }
        },
        updateTick : function() {
            if(this.created) {
                this.UserMenu.updateTick();
                this.PlanetMenu.updateTick();
            }
        },
        hide : function() {
            this.UserMenu.hide();
            this.PlanetMenu.hide();
            this._starVisible = false;
            this._planetVisible = false;
        },
        show : function() {
            this.UserMenu.show();
            this.PlanetMenu.show();
        },
        StarVisible : function() {
            this._starVisible = true;
            this._planetVisible = false;
            this.UserMenu.starVisible();
        },
        PlanetVisible : function() {
            this._starVisible = false;
            this._planetVisible = true;
            this.UserMenu.planetVisible();
        },
        IsStarVisible : function() {
            return this._starVisible;
        },
        IsPlanetVisible : function() {
            return this._planetVisible;
        }
    };
    Lang.augmentProto(Menu, Util.EventProvider);

    Lacuna.Menu = new Menu();

})();
YAHOO.register("menu", YAHOO.lacuna.Menu, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/menu.js","/")
},{"buffer":71,"oMfpAn":75}],57:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Messaging == "undefined" || !YAHOO.lacuna.Messaging) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Messaging = function() {
        this.createEvent("onRpc");
        this.createEvent("onShow");
        this.createEvent("onPageLoaded");
        this._buildPanel();
        this._buildAttachmentPanel();
    };
    Messaging.prototype = {
        _buildPanel : function() {
            var panelId = "messagingPanel";
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Messaging</div>',
                '<div class="bd">',
                '    <div id="messagingTabs" class="yui-navset"><ul class="yui-nav">',
                '        <li id="messagingCreate" class="tab"><a href="#"><em>Create</em></a></li>',
                '        <li id="messagingInbox" class="tab"><a href="#"><em>Inbox</em></a></li>',
                '        <li id="messagingSent" class="tab"><a href="#"><em>Sent</em></a></li>',
                '        <li id="messagingArchive" class="tab"><a href="#"><em>Archive</em></a></li>',
                '        <li id="messagingTrash" class="tab"><a href="#"><em>Trash</em></a></li>',
                '        <li id="messagingAnnounce" class="tab"><a href="#"><em>Announcement</em></a></li>',
                '    </ul>',
                '    <div class="yui-content">',
                '        <div id="messagingCreator" class="panelTabContainer" style="display:none">',
                '            <div class="messagingCreatorC"><label><button id="messagingCreateSend" type="button">Send</button></label><span id="messagingCreateResponse"></span></div>',
                '            <div class="messagingCreatorC"><label>To:</label><input id="messagingCreateTo" type="text" /></div>',
                '            <div class="messagingCreatorC"><label>Subject:</label><input id="messagingCreateSubject" type="text" /></div>',
                '            <div class="messagingCreatorC" id="messagingCreateBody">',
                '                <textarea id="messagingCreateText" cols="80" rows="20"></textarea>',
                '            </div>',
                '        </div>',
                '        <div id="messagingReader" class="panelTabContainer yui-gd">',
                '            <div id="messagingArchiver">',
                '                <button id="messagingArchiveSelected" type="button">Archive</button>',
                '                <button id="messagingTrashSelected" type="button">Trash</button>',
                '                <button id="messagingSelectAll" type="button">Select All</button>',
                '                <select id="inboxTag">',
                '                    <option value="">Inbox</option>',
                '                    <option value="Correspondence">Correspondence</option>',
                '                    <option value="Alert">Alerts</option>',
                '                    <option value="Intelligence">Intel</option>',
                '                    <option value="Attack">Attacks</option>',
                '                    <option value="Colonization">Colonization</option>',
                '                    <option value="Complaint">Complaints</option>',
                '                    <option value="Excavator">Excavators</option>',
                '                    <option value="Fissure">Fissure</option>',
                '                    <option value="Mission">Mission</option>',
                '                    <option value="Parliament">Parliament</option>',
                '                    <option value="Probe">Probe</option>',
                '                    <option value="Spies">Spies</option>',
                '                    <option value="Trade">Trade</option>',
                '                    <option value="Medal">Medals</option>',
                '                    <option value="Tutorial">Tutorial</option>',
                '                </select>',
                '            </div>',
                '            <div id="mHt" class="yui-u first" style="width:36%;overflow-y: auto;border-right: 1px solid gray;position:relative;" >',
                '                <div id="messagingPaginator">',
                '                </div>',
                '                <ul id="messagingList"></ul>',
                '            </div>',
                '            <div id="messagingDisplay" class="yui-u" style="width:62%;">',
                '                <div id="messagingActions" style="border-width: 1px;">',
                '                    <span id="messagingReplyC" style="display:none"><button id="messagingReply" type="button">Reply</button><button id="messagingReplyAll" type="button">Reply All</button></span>',
                '                    <button id="messagingForward" type="button">Forward</button>',
                '                    <button id="messagingArchiveDisplayed" type="button">Archive</button>',
                '                    <button id="messagingTrashDisplayed" type="button">Trash</button>',
                '                </div>',
                '                <div id="dHt" style="overflow:auto;">',
                '                    <div><label>Received:</label><span id="messagingTimestamp"></span></div>',
                '                    <div><label>From:</label><span id="messagingFrom"></span></div>',
                '                    <div><label>To:</label><span id="messagingTo"></span></div>',
                '                    <div><label>Subject:</label><span id="messagingSubject"></span></div>',
                '                    <div id="messagingBody"></div>',
                '                </div>',
                '            </div>',
                '        </div>',
                '        <div id="messagingAnnouncement" class="panelTabContainer" style="display:none">',
                '            <iframe id="messagingAnnounceFrame" style="width:100%;height:300px;background-color:white;border:0;" src=""></iframe>',
                '        </div>',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.messagingPanel = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:true,
                modal:true,
                close:true,
                underlay:false,
                width:"700px",
                zIndex:9999
            });
            this.messagingPanel.renderEvent.subscribe(function(){
                //tabs
                this.create = Dom.get("messagingCreate");
                this.inbox = Dom.get("messagingInbox");
                this.inboxTag = Dom.get("inboxTag");
                this.tag = this.inboxTag.options[this.inboxTag.selectedIndex].value;
                Event.on("inboxTag", "change", this.updateTag, this, true);
                this.sent = Dom.get("messagingSent");
                this.archive = Dom.get("messagingArchive");
                this.trash = Dom.get("messagingTrash");
                this.announce = Dom.get("messagingAnnounce");
                //list and display view
                Event.on("messagingReply", "click", this.replyMessage, this, true);
                Event.on("messagingReplyAll", "click", this.replyAllMessage, this, true);
                Event.on("messagingForward", "click", this.forwardMessage, this, true);
                Event.on("messagingArchiveDisplayed", "click", this.archiveMessage, this, true);
                Event.on("messagingTrashDisplayed", "click", this.trashMessage, this, true);
                this.list = Dom.get("messagingList");
                this.timestamp = Dom.get("messagingTimestamp");
                this.from = Dom.get("messagingFrom");
                this.to = Dom.get("messagingTo");
                this.subject = Dom.get("messagingSubject");
                this.body = Dom.get("messagingBody");
                this.display = Dom.get("messagingDisplay");
                Event.delegate(this.display, "click", this.handleProfileLink, "a.profile_link", this, true);
                Event.delegate(this.display, "click", this.handleStarmapLink, "a.starmap_link", this, true);
                Event.delegate(this.display, "click", this.handlePlanetLink, "a.planet_link", this, true);
                Event.delegate(this.display, "click", this.handleAllianceLink, "a.alliance_link", this, true);
                Event.delegate(this.display, "click", this.handleVoteYesLink, "a.voteyes_link", this, true);
                Event.delegate(this.display, "click", this.handleVoteNoLink, "a.voteno_link", this, true);
                //archiving setup
                this.archiver = Dom.get("messagingArchiver");
                this.archiveButton = Dom.get("messagingArchiveSelected");
                Event.on(this.archiveButton, "click", this.archiveMessages, this, true);
                this.trashButton = Dom.get("messagingTrashSelected");
                Event.on(this.trashButton, "click", this.trashMessages, this, true);
                this.select = Dom.get("messagingSelectAll");
                Event.on(this.select, "click", this.selectAllMessages, this, true);
                //create
                this._createToSelect();
                //this.createTo = Dom.get("messagingCreateTo");
                this.createSubject = Dom.get("messagingCreateSubject");
                this.createText = Dom.get("messagingCreateText");
                this.createResponse = Dom.get("messagingCreateResponse");
                Event.on("messagingCreateSend", "click", this.sendMessage, this, true);
                //set start display
                Dom.setStyle(this.display, "visibility", "hidden");
                Event.delegate("messagingTabs", "click", this.tabClick, "li.tab", this, true);
            }, this, true);
            this.messagingPanel.hideEvent.subscribe(function(){
                this.attachmentPanel.hide();
            }, this, true);
            
            this.messagingPanel.render();
            Game.OverlayManager.register(this.messagingPanel);
        },
        _buildAttachmentPanel : function() {
            var panelId = "attachmentPanel";
            
            var panel = document.createElement("div");
            panel.id = panelId;
            panel.innerHTML = ['<div class="hd">Map</div>',
                '<div class="bd" style="height:550px;overflow:auto;">',
                '    <div id="attachmentMap">',
                '    </div>',
                '</div>'].join('');
            document.body.insertBefore(panel, document.body.firstChild);
            Dom.addClass(panel, "nofooter");
            
            this.attachmentPanel = new YAHOO.widget.Panel(panelId, {
                constraintoviewport:true,
                visible:false,
                draggable:true,
                effect:Game.GetContainerEffect(),
                fixedcenter:true,
                modal:true,
                close:true,
                underlay:false,
                width:"575px",
                zIndex:10000
            });
            this.attachmentPanel.renderEvent.subscribe(function(){
                this.map = Dom.get("attachmentMap");
            });
            this.attachmentPanel.hideEvent.subscribe(function(){
                this.map.innerHTML = "";
            });
            this.attachmentPanel.load = function(map) {
                this.map.innerHTML = "";

                if(map) {
                    Dom.setStyle(this.map, "background", ['url("',Lib.AssetUrl,'planet_side/',(map.surface||map.surface_image),'.jpg") repeat scroll 0 0 black'].join(''));
                    
                    var tiles = {},
                        tbody = [];
                        
                    for(var t=0; t<map.buildings.length; t++) {
                        var b = map.buildings[t];
                        if(!tiles[b.y]) { tiles[b.y] = {}; }
                        tiles[b.y][b.x] = b.image;
                    }
                    
                    for(var x=5; x >= -5; x--) {
                        for(var y=-5; y <= 5; y++) {
                            tbody.push('<div class="attachmentMapTile">');
                            if(tiles[x] && tiles[x][y]) {
                                tbody.push(['<img src="',Lib.AssetUrl,'planet_side/50/',tiles[x][y],'.png" style="width:50px;height:50px;" />'].join(''));
                            }
                            tbody.push('</div>');
                        }
                    }
                    
                    this.map.innerHTML = tbody.join('');
                    
                    this.show();
                }
            };
            
            this.attachmentPanel.render();
            Game.OverlayManager.register(this.attachmentPanel);
            
        },
        _createToSelect : function() {
            var dataSource = new Util.XHRDataSource("/empire");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.empires",
                fields : ["name","id"]
            };
            
            var oTextboxList = new YAHOO.lacuna.TextboxList("messagingCreateTo", dataSource, { //config options
                maxResultsDisplayed: 10,
                minQueryLength:3,
                multiSelect:true,
                forceSelection:true,
                formatResultLabelKey:"name",
                formatResultColumnKeys:["name"],
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){
                var s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };
            oTextboxList.doBeforeLoadData = function(sQuery, oResponse, oPayload){
                var tq = decodeURIComponent(sQuery);
                if(tq[0] == "@") {
                    if(tq[1].toLowerCase() == "a") {
                        oResponse.results.push({name:"@ally"});
                    }
                }
                return true;
            };
            
            this.createTo = oTextboxList;
        },
        _setTab : function(el) {
            var list = this.list;
            Event.purgeElement(list, true);
            list.innerHTML = "";
            Dom.removeClass([this.create,this.inbox,this.alerts,this.intel,this.medals,this.tutorial,this.sent,this.archive,this.trash,this.announce], "selected");
            Dom.addClass(el, "selected");
            switch(el.id) {
                case this.create.id:
                    Dom.setStyle("messagingCreator", "display", "");
                    Dom.setStyle("messagingReader", "display", "none");
                    Dom.setStyle("messagingAnnouncement", "display", "none");
                    break;
                case this.announce.id:
                    Dom.setStyle("messagingCreator", "display", "none");
                    Dom.setStyle("messagingReader", "display", "none");
                    Dom.setStyle("messagingAnnouncement", "display", "");
                    Dom.get("messagingAnnounceFrame").src = '/announcement?session_id='+Game.GetSession();
                    break;
                default:
                    this.viewingMessage = null;
                    Dom.setStyle("messagingCreator", "display", "none");
                    Dom.setStyle("messagingReader", "display", "");
                    Dom.setStyle("messagingAnnouncement", "display", "none");
                    break;
            }
            Dom.setStyle(this.display, "visibility", "hidden");
            this.toArchive = {};
            this.toArchiveCount = 0;
        },

        tabClick : function(e, matchedEl, container) {
            var id = matchedEl.id;
            if(this.currentTab != id) {
                this.viewingMessage = null;
                this.currentTab = id;
                this.loadTab();
            }
        },
        loadTab : function(isAll) {
            switch(this.currentTab) {
                case this.create.id:
                    Dom.setStyle(this.archiver,"display","none");
                    this.loadCreate(isAll);
                    break;
                case this.announce.id:
                    this._setTab(this.announce);
                    break;
                case this.sent.id:
                    Dom.setStyle(this.archiver,"display","none");
                    this.loadSentMessages();
                    break;
                case this.archive.id:
                    Dom.setStyle(this.archiver,"display","");
                    Dom.setStyle(this.archiveButton,"display","none");
                    Dom.setStyle(this.trashButton,"display","");
                    Dom.setStyle(this.inboxTag,"display","none");
                    this.loadArchiveMessages();
                    break;
                case this.trash.id:
                    Dom.setStyle(this.archiver,"display","");
                    Dom.setStyle(this.archiveButton,"display","");
                    Dom.setStyle(this.trashButton,"display","none");
                    Dom.setStyle(this.inboxTag,"display","none");
                    this.loadTrashMessages();
                    break;
                default:
                    Dom.setStyle(this.archiver,"display","");
                    Dom.setStyle(this.archiveButton,"display","");
                    Dom.setStyle(this.trashButton,"display","");
                    Dom.setStyle(this.inboxTag,"display","");
                    this.loadInboxMessages();
                    break;
            }
        },
        
        loadCreate : function(isAll) {
            this.createResponse.innerHTML = "";
            if(this.viewingMessage) {
                if(isAll) {
                    var to = [{name:this.viewingMessage.from}];
                    for(var i=0; i<this.viewingMessage.recipients.length; i++) {
                        var nm = this.viewingMessage.recipients[i];
                        if(nm != Game.EmpireData.name) {
                            to.push({name:nm});
                        }
                    }
                    this.createTo.SelectItems(to);
                }
                else {
                    this.createTo.SelectItems([{name:this.viewingMessage.from}]);
                }
                this.createSubject.value = (this.viewingMessage.forwarding ? "Fwd: " : "Re: ") + this.viewingMessage.subject;
                this.createText.value = "\n\n--------------\nOn " + Lib.formatServerDate(this.viewingMessage.date) + " " + this.viewingMessage.from + " wrote:\n" + this.viewingMessage.body;
            }
            else {
                this.createTo.ResetSelections();
                this.createSubject.value = "";
                this.createText.value = "";
            }
            this._setTab(this.create);
        },
        updateTag : function() {
            this.tag = this.inboxTag.options[this.inboxTag.selectedIndex].value;
            this.loadInboxMessages();
        },
        loadInboxMessages : function() {
            this._setTab(this.inbox);
            if(this.pager) {this.pager.destroy();}
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: 1}
                };
            if(this.tag) {
                data.options.tags = [this.tag];
            }
            
            Lacuna.Pulser.Show();
            InboxServ.view_inbox(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    if(o.result.message_count > 25) {
                        this.pager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.message_count,
                            containers  : 'messagingPaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            pageLinks : 5,
                            alwaysVisible : false
                        });
                        this.pager.subscribe('changeRequest',this.handleInboxPagination, this, true);
                        this.pager.render();
                    }
                    else {
                        delete this.pager;
                    }

                    this.processMessages(o.result,{inbox:1});
                    this.fireEvent("onPageLoaded", o);
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        loadSentMessages : function() {
            this._setTab(this.sent);
            if(this.pager) {this.pager.destroy();}
            
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: 1}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_sent(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    if(o.result.message_count > 25) {
                        this.pager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.message_count,
                            containers  : 'messagingPaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.pager.subscribe('changeRequest',this.handleSentPagination, this, true);
                        this.pager.render();
                    }
                    else {
                        delete this.pager;
                    }

                    this.processMessages(o.result, {sent:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        loadArchiveMessages : function() {
            this._setTab(this.archive);
            if(this.pager) {this.pager.destroy();}
            
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: 1}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_archived(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    if(o.result.message_count > 25) {
                        this.pager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.message_count,
                            containers  : 'messagingPaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.pager.subscribe('changeRequest',this.handleArchivePagination, this, true);
                        this.pager.render();
                    }
                    else {
                        delete this.pager;
                    }

                    this.processMessages(o.result,{archive:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },
        loadTrashMessages : function() {
            this._setTab(this.trash);
            if(this.pager) {this.pager.destroy();}
            
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: 1}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_trashed(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    if(o.result.message_count > 25) {
                        this.pager = new Pager({
                            rowsPerPage : 25,
                            totalRecords: o.result.message_count,
                            containers  : 'messagingPaginator',
                            template : "{PreviousPageLink} {PageLinks} {NextPageLink}",
                            alwaysVisible : false

                        });
                        this.pager.subscribe('changeRequest',this.handleTrashPagination, this, true);
                        this.pager.render();
                    }
                    else {
                        delete this.pager;
                    }

                    this.processMessages(o.result,{trash:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
        },

        handleInboxPagination : function (newState) {
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: newState.page}
                };
            if(this.tag) {
                data.options.tags = [this.tag];
            }
            Lacuna.Pulser.Show();
            InboxServ.view_inbox(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    this.processMessages(o.result,{inbox:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pager.setState(newState);
        },
        handleSentPagination : function (newState) {
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: newState.page}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_sent(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    this.processMessages(o.result,{sent:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pager.setState(newState);
        },
        handleArchivePagination : function (newState) {
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: newState.page}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_archived(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    this.processMessages(o.result,{archive:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pager.setState(newState);
        },
        handleTrashPagination : function (newState) {
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    options:{page_number: newState.page}
                };
            Lacuna.Pulser.Show();
            InboxServ.view_trashed(data, {
                success : function(o){
                    this.fireEvent("onRpc", o.result);
                    this.processMessages(o.result,{trash:1});
                    Lacuna.Pulser.Hide();
                },
                scope:this
            });
     
            // Update the Paginator's state
            this.pager.setState(newState);
        },

        processMessages : function(results, is) {
            var list = this.list,
                messages = results.messages,
                li = document.createElement("li"),
                isTab = is || {};
            
            //reset selected
            delete this.selectedAll;
            this.select.innerHTML = "Select All";
                
            //clear list here    
            Event.purgeElement(list, true);
            list.innerHTML = "";
            
            if(messages.length == 0) {
                li.innerHTML = 'No messages to display.';
                list.appendChild(li);
            }
            else {
                for(var i=0; i<messages.length; i++) {
                    var msg = messages[i],
                        nLi = li.cloneNode(false);
                    msg.is = isTab;
                    nLi.Message = msg;
                    Dom.addClass(nLi, "message");
                    var img;
                    if(msg.has_read == "0") {
                        Dom.addClass(nLi, "unread");
                        img = 'unread';
                    }
                    else {
                        img = 'read';
                    }
                    if(msg.has_replied == "1") {
                        img = 'replied';
                    }
                    nLi.innerHTML = [
                        ' <div class="messageSelect"><img width="26" height="26" src="',Lib.AssetUrl,'ui/mail-',img,'.png" /><br />',
                        !isTab.sent ? '    <input type="checkbox" />' : '', '</div>',
                        '    <div class="messageContainer">',
                        '        <div class="messageDate">',Lib.formatServerDate(msg.date),'</div>',
                        '        <div class="messageFrom">',
                        isTab.sent ? msg.to : msg.from,
                        '        </div>',
                        '        <div class="messageSubject">',msg.subject,'</div>',
                        //'        <div class="messageExcerpt">',msg.body_preview,'</div>',
                        '    </div>'
                        ].join('');
                    list.appendChild(nLi);
                }
                
                Event.delegate(list, "click", this.loadMessage, "div.messageContainer", this, true);
                Event.delegate(list, "click", this.checkSelect, "input[type=checkbox]", this, true);
            }

            //wait for tab to display first
            var panel = this.messagingPanel;
            setTimeout(function() {
                var size = Game.GetSize();
                var Ht = size.h - 90;
                if(Ht > 400) { Ht = 400; }
                var dHt = Ht - 31;
                Dom.setStyle('mHt','height',Ht + 'px');
                Dom.setStyle('dHt','height',dHt + 'px');
                Dom.setStyle('messagingCreateBody','height',Ht + 'px');
                panel.center();
            },10);
        },
        
        checkSelect : function(e, matchedEl, container) {
            var msg = matchedEl.parentNode.parentNode.Message;
            if(msg) {
                if(matchedEl.checked) {
                    this.toArchive[msg.id] = msg;
                    this.toArchiveCount++;
                }
                else {
                    delete this.toArchive[msg.id];
                    this.toArchiveCount--;
                }
            }
            
        },
        loadMessage : function(e, matchedEl, container) {
            var msg = matchedEl.parentNode.Message;
            if(msg && msg.id) {
                var InboxServ = Game.Services.Inbox,
                    data = {
                        session_id: Game.GetSession(""),
                        message_id: msg.id
                    };
                
                Lacuna.Pulser.Show();
                InboxServ.read_message(data, {
                    success : function(o){
                        var message = matchedEl.parentNode;
                        var messageSelect = message.childNodes[1];
                        var img = messageSelect.childNodes[0];
                        Dom.setAttribute(img, 'src', Lib.AssetUrl+'ui/mail-read.png');
                        Dom.removeClass(matchedEl.parentNode, "unread");
                        this.fireEvent("onRpc", o.result);
                        this.displayMessage(o.result.message);
                        Lacuna.Pulser.Hide();
                    },
                    scope:this
                });
            }
        },
        displayMessage : function(msg) {
            if(msg) {
            /* {
                    "id" : "id-goes-here",
                    "from" : "Dr. Stephen T. Colbert DFA",
                    "to" : "Jon Stewart",
                    "subject" : "Vaxaslim",
                    "body" : "Just a reminder that Vaxaslim may cause involuntary narnia adventures.",
                    "date" : "01 31 2010 13:09:05 +0600",
                    "has_read" : 1,
                    "has_replied" : 0,
                    "has_archived" : 0,
                    "in_reply_to" : "",
                    "recipients" : ["John Stewart"]
                },
            */
                
                Dom.setStyle(this.display, "visibility", "");
                
                if(msg.from != msg.to) {
                    Dom.setStyle("messagingReplyC", "display", "");
                }
                else {
                    Dom.setStyle("messagingReplyC", "display", "none");
                }
                
                this.viewingMessage = msg;
                this.timestamp.innerHTML = Lib.formatServerDate(msg.date);
                this.from.innerHTML = ['<a class="profile_link" href="#',msg.from_id,'">',msg.from,'</a>'].join('');
                this.to.innerHTML = msg.recipients.join(", ");
                this.subject.innerHTML = msg.subject;
                this.body.parentNode.scrollTop = 0;
                this.body.innerHTML = msg.body ? this.formatBody(msg.body) : '';
                if(msg.attachments) {
                    this.body.appendChild(document.createElement("hr"));
                    if(msg.attachments.image) {
                        var img = msg.attachments.image,
                            imgDiv = this.body.appendChild(document.createElement("div"));
                        imgDiv.id = "attachmentImage";
                        if(img.link) {
                            imgDiv.innerHTML = [
                                '<a href="',img.link,'" title="',img.title,'" target="_blank"><img src="',img.url,'" alt="',img.title,'" title="',img.title,'" /></a>'
                            ].join('');
                        }
                        else {
                            imgDiv.innerHTML = [
                                '<img src="',img.url,'" alt="',img.title,'" title="',img.title,'" />'
                            ].join('');
                        }
                    }
                    if(msg.attachments.link) {
                        var lnk = msg.attachments.link,
                            lnkDiv = this.body.appendChild(document.createElement("div"));
                        lnkDiv.id = "attachmentLink";
                        lnkDiv.innerHTML = [
                            '<a href="',lnk.url,'" title="',lnk.label,'" target="_blank">',lnk.label,'</a>'
                        ].join('');
                    }
                    if(msg.attachments.table) {
                        var tbl = msg.attachments.table,
                            tblDiv = this.body.appendChild(document.createElement("div")),
                            tblOut = ["<table>"],
                            hdRow = tbl[0];
                        tblDiv.id = "attachmentTable";
                        //first row always headers
                        tblOut.push("<thead><tr>");
                        for(var c=0; c<hdRow.length; c++) {
                            tblOut.push("<th>");
                            tblOut.push(hdRow[c]);
                            tblOut.push("</th>");
                        }
                        tblOut.push("</tr></thead><tbody>");
                        
                        for(var i=1; i<tbl.length; i++) {
                            var row = tbl[i];
                            tblOut.push("<tr>");
                            for(var d=0; d<row.length; d++) {
                                tblOut.push("<td>");
                                tblOut.push(row[d]);
                                tblOut.push("</td>");
                            }
                            tblOut.push("</tr>");
                        }
                        tblOut.push("</tbody></table>");
                            
                        tblDiv.innerHTML = tblOut.join('');
                    }
                    if(msg.attachments.map) {
                        this.body.appendChild(document.createElement('br'));
                        var va = document.createElement("button");
                        va.setAttribute("type", "button");
                        va.innerHTML = "Open Map";
                        va = this.body.appendChild(va);
                        Event.on(va, "click", this.displayAttachment, this, true);
                    }
                }
            }
        },
        displayAttachment : function() {
            this.attachmentPanel.load(this.viewingMessage.attachments.map);
        },
        sendMessage : function() {
            var to = this.createTo.Selections();
            if(to.length == 0) {
                this.createResponse.innerHTML = "Must send a message To someone.";
            }
            else {
                var InboxServ = Game.Services.Inbox,
                    data = {
                        session_id: Game.GetSession(""),
                        recipients: to.join(','),
                        subject: this.createSubject.value,
                        body: this.createText.value
                    };
                
                if(this.viewingMessage) {
                    if(this.viewingMessage.forwarding) {
                        data.options = {
                            forward:this.viewingMessage.id
                        };
                    }
                    else {
                        data.options = {
                            in_reply_to:this.viewingMessage.id
                        };
                    }
                }
                
                InboxServ.send_message(data, {
                    success : function(o){
                        this.fireEvent("onRpc", o.result);
                        var u = o.result.message.unknown;
                        if(u && u.length > 0) {
                            this.createResponse.innerHTML = "Unable to send to: " + u.join(', ');                        
                        }
                        else {
                            this.createResponse.innerHTML = "";    
                            this.createTo.ResetSelections();
                            this.createSubject.value = "";
                            this.createText.value = "";
                            this.currentTab = this.inbox.id;
                            this.loadTab();
                        }
                    },
                    failure : function(o){
                        if(o.error.code == 1005) {
                            this.createResponse.innerHTML = o.error.message;
                            return true;
                        }
                    },
                    scope:this
                });
            }
        },
        replyMessage : function(e) {
            this.currentTab = this.create.id;
            this.loadTab();
        },
        replyAllMessage : function(e) {
            this.currentTab = this.create.id;
            this.loadTab(true);
        },
        forwardMessage : function(e) {
            this.currentTab = this.create.id;
            this.viewingMessage.forwarding = true;
            this.loadTab();
        },
        archiveMessage : function(e) {
            if(!this.toArchive[this.viewingMessage.id]) {
                this.toArchive[this.viewingMessage.id] = this.viewingMessage;
                this.toArchiveCount++;
            }
            
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    message_ids: [this.viewingMessage.id]
                };
            InboxServ.archive_messages(data, {
                success : function(o){
                    this.archiveProcess(o.result);
                    this.fireEvent("onRpc", o.result);
                },
                scope:this
            });
        },
        archiveMessages : function() {
            if(this.toArchiveCount > 0) {
                var mIds = [];
                for(var key in this.toArchive) {
                    if(this.toArchive.hasOwnProperty(key)) {
                        mIds.push(key);
                    }
                }
                var InboxServ = Game.Services.Inbox,
                    data = {
                        session_id: Game.GetSession(""),
                        message_ids: mIds
                    };
                InboxServ.archive_messages(data, {
                    success : function(o){
                        this.archiveProcess(o.result);
                        this.fireEvent("onRpc", o.result);
                    },
                    scope:this
                });
            }
        },
        archiveProcess : function(results) {
            Dom.batch(Sel.query("li.message", this.list), function(el){
                if(results.success.indexOf(el.Message.id) >= 0) {
                    delete this.toArchive[el.Message.id];
                    if (el.Message.has_read*1 == 0) {
                        Game.EmpireData.has_new_messages--;
                        if(Game.EmpireData.has_new_messages < 0) {
                            Game.EmpireData.has_new_messages = 0;
                        }
                    }
                    this.toArchiveCount--;
                    Event.purgeElement(el);
                    el.parentNode.removeChild(el);
                }
            }, this, true);
            
            if(this.pager) {
                //reload messages if we had a pager
                this.loadTab();
            }
            
            Dom.setStyle(this.display, "visibility", "hidden");
            delete this.selectedAll;
            this.select.innerHTML = "Select All";
        },
        trashMessage : function(e) {
            if(!this.toArchive[this.viewingMessage.id]) {
                this.toArchive[this.viewingMessage.id] = this.viewingMessage;
                this.toArchiveCount++;
            }
            
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    message_ids: [this.viewingMessage.id]
                };
            InboxServ.trash_messages(data, {
                success : function(o){
                    this.trashProcess(o.result);
                    this.fireEvent("onRpc", o.result);
                },
                scope:this
            });
        },
        trashMessages : function() {
            if(this.toArchiveCount > 0) {
                var mIds = [];
                for(var key in this.toArchive) {
                    if(this.toArchive.hasOwnProperty(key)) {
                        mIds.push(key);
                    }
                }
                var InboxServ = Game.Services.Inbox,
                    data = {
                        session_id: Game.GetSession(""),
                        message_ids: mIds
                    };
                InboxServ.trash_messages(data, {
                    success : function(o){
                        this.trashProcess(o.result);
                        this.fireEvent("onRpc", o.result);
                    },
                    scope:this
                });
            }
        },
        trashProcess : function(results) {
            Dom.batch(Sel.query("li.message", this.list), function(el){
                if(results.success.indexOf(el.Message.id) >= 0) {
                    delete this.toArchive[el.Message.id];
                    if (el.Message.has_read*1 == 0) {
                        Game.EmpireData.has_new_messages--;
                        if(Game.EmpireData.has_new_messages < 0) {
                            Game.EmpireData.has_new_messages = 0;
                        }
                    }
                    this.toArchiveCount--;
                    Event.purgeElement(el);
                    el.parentNode.removeChild(el);
                }
            }, this, true);
            
            if(this.pager) {
                //reload messages if we had a pager
                this.loadTab();
            }
            
            Dom.setStyle(this.display, "visibility", "hidden");
            delete this.selectedAll;
            this.select.innerHTML = "Select All";
        },
        selectAllMessages : function() {
            var els = Sel.query("input[type=checkbox]",this.list);
            Dom.batch(els, function(el) {
                el.checked = !this.selectedAll;
                this.checkSelect(null,el);
            }, this, true);
            if(this.selectedAll) {
                delete this.selectedAll;
                this.select.innerHTML = "Select All";
            }
            else {
                this.selectedAll = 1;
                this.select.innerHTML = "Select None";
            }
        },
        
        formatBody : function(body) {
            body = body.replace(/&/g,'&amp;');
            body = body.replace(/</g,'&lt;');
            body = body.replace(/>/g,'&gt;');
            body = body.replace(/\n/g,'<br />');
            body = body.replace(/\*([^*]+)\*/gi,'<b>$1</b>');
            body = body.replace(/\{(food|water|ore|energy|waste|happiness|time|essentia|plots|build)\}/gi, function(str,icon){
                var cl = 'small' + icon.substr(0,1).toUpperCase() + icon.substr(1);
                return '<img src="' + Lib.AssetUrl + 'ui/s/' + icon + '.png" class="' + cl + '" />';
            });
            body = body.replace(/\[(https?:\/\/[a-z0-9_.\/\-]+)\]/gi,'<a href="$1">$1</a>');
            body = body.replace(/\{Empire\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="profile_link" href="#$1">$2</a>');
            //body = body.replace(/\{Empire\s+(\d+)\s+([^\}]+)}/gi,'$2');
            body = body.replace(/\{Starmap\s+(-?\d+)\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="starmap_link" href="#$1x$2">$3</a>');
            body = body.replace(/\{Planet\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="planet_link" href="#$1">$2</a>');
            body = body.replace(/\{Alliance\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="alliance_link" href="#$1">$2</a>');
            body = body.replace(/\{VoteYes\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/gi,'<a class="voteyes_link" href="#$1&$2&$3">Yes!</a>');
            body = body.replace(/\{VoteNo\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/gi,'<a class="voteno_link" href="#$1&$2&$3">No!</a>');
            //body = body.replace(/\{Alliance\s+(\d+)\s+([^\}]+)}/gi,'$2');
            return body;
        },
        handleProfileLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            if(res) {
                Lacuna.Info.Empire.Load(res[1]);
            }
        },
        handleStarmapLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)x(-?\d+)$/);
            Game.StarJump({x:res[1],y:res[2]});
            //this.hide();
            //Lacuna.MapPlanet.MapVisible(false);
            //Lacuna.MapStar.MapVisible(true);
            //Lacuna.Menu.StarVisible();
            //Lacuna.MapStar.Jump(res[1]*1,res[2]*1);
        },
        handlePlanetLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            this.hide();
            var planet = Game.EmpireData.planets[res[1]];
            Game.PlanetJump(planet);
        },
        handleAllianceLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            Lacuna.Info.Alliance.Load(res[1]);
        },
        handleVoteYesLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)&(-?\d+)&(-?\d+)$/);
            Game.Services.Modules.Parliament.cast_vote({
                session_id:Game.GetSession(""),
                building_id:res[2],
                proposition_id:res[3],
                vote:1
            },{
                success : function(o){
                    alert("Voted Yes!");
                },
                scope:this
            });
        },
        handleVoteNoLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)&(-?\d+)&(-?\d+)$/);
            Game.Services.Modules.Parliament.cast_vote({
                session_id:Game.GetSession(""),
                building_id:res[2],
                proposition_id:res[3],
                vote:0
            },{
                success : function(o){
                    alert("Voted No!");
                },
                scope:this
            });
        },
        
        isVisible : function() {
            return this.messagingPanel.cfg.getProperty("visible");
        },
        show : function() {
            Game.OverlayManager.hideAll();
            this.messagingPanel.show();
            this.currentTab = this.inbox.id;
            this.loadTab();
            this.fireEvent("onShow");
        },
        sendTo : function(empireName) {
            Game.OverlayManager.hideAll();
            delete this.viewingMessage;
            this.messagingPanel.show();
            this.currentTab = this.create.id;
            this.loadTab();
            this.createTo.SelectItems([{name:empireName}]);
            this.fireEvent("onShow");
        },
        showMessage : function(msg) {
            Game.OverlayManager.hideAll();
            this.messagingPanel.show();
            var InboxServ = Game.Services.Inbox,
                data = {
                    session_id: Game.GetSession(""),
                    message_id: msg
                };
            InboxServ.read_message(data, {
                success : function(o){
                    var message = o.result.message;
                    if (message.has_archived != "0") {
                        this.currentTab = this.archive.id;
                    }
                    else {
                        this.currentTab = this.inbox.id;
                    }
                    this.fireEvent("onRpc", o);
                    this.loadTab();
                    this.displayMessage(message);
                },
                scope:this
            });
        },
        hide : function() {
            this.messagingPanel.hide();
        }
    };
    Lang.augmentProto(Messaging, Util.EventProvider);
            
    Lacuna.Messaging = new Messaging();
})();
YAHOO.register("messaging", YAHOO.lacuna.Messaging, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/messaging.js","/")
},{"buffer":71,"oMfpAn":75}],58:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.modules");

if (typeof YAHOO.lacuna.modules.Parliament == "undefined" || !YAHOO.lacuna.modules.Parliament) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Parliament = function(result, locationId){
        Parliament.superclass.constructor.call(this, result);
        
        this.locationId = locationId;
        this.service = Game.Services.Modules.Parliament;
        
        this.canRepealLaw = this.building.level >= 5;
    };
    
    Lang.extend(Parliament, Lacuna.buildings.Building, {
        getChildTabs : function() {
            if(this.building.level >= 4) {
                return [this._getCreateTab(), this._getLawsTab(), this._getPropsTab()];
            }
            else {
                return [this._getLawsTab(), this._getPropsTab()];
            }
        },
        _getLawsTab : function() {
            var tab = new YAHOO.widget.Tab({ label: "Laws", content: [
                '<div>',
                '    <div style="overflow:auto;"><ul id="lawsDetails"></ul></div>',
                '</div>'
            ].join('')});
            tab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    if(!this.laws) {
                        Lacuna.Pulser.Show();
                        this.service.view_laws({session_id:Game.GetSession(),body_id:this.locationId}, {
                            success : function(o){
                                Lacuna.Pulser.Hide();
                                this.rpcSuccess(o);
                                this.laws = o.result.laws;
                                
                                this.LawsPopulate();
                            },
                            scope:this
                        });
                    }
                }
            }, this, true);
            
            Event.delegate("lawsDetails", "click", this.LawClick, "button", this, true);
            Event.delegate("lawsDetails", "click", this.handleProfileLink, "a.profile_link", this, true);
            Event.delegate("lawsDetails", "click", this.handleStarmapLink, "a.starmap_link", this, true);
            Event.delegate("lawsDetails", "click", this.handlePlanetLink, "a.planet_link", this, true);
            Event.delegate("lawsDetails", "click", this.handleAllianceLink, "a.alliance_link", this, true);
            
            return tab;
        },
        _getPropsTab : function() {
            var tab = new YAHOO.widget.Tab({ label: "Propositions", content: [
                '<div>',
                '    <div style="overflow:auto;"><ul id="propsDetails"></ul></div>',
                '</div>'
            ].join('')});
            tab.subscribe("activeChange", function(e) {
                if(e.newValue) {
                    if(!this.props) {
                        Lacuna.Pulser.Show();
                        this.service.view_propositions({session_id:Game.GetSession(),building_id:this.building.id}, {
                            success : function(o){
                                Lacuna.Pulser.Hide();
                                this.rpcSuccess(o);
                                this.props = o.result.propositions;
                                
                                this.PropsPopulate();
                            },
                            scope:this
                        });
                    }
                }
            }, this, true);
            
            Event.delegate("propsDetails", "click", this.PropClick, "button", this, true);
            Event.delegate("propsDetails", "click", this.handleProfileLink, "a.profile_link", this, true);
            Event.delegate("propsDetails", "click", this.handleStarmapLink, "a.starmap_link", this, true);
            Event.delegate("propsDetails", "click", this.handlePlanetLink, "a.planet_link", this, true);
            Event.delegate("propsDetails", "click", this.handleAllianceLink, "a.alliance_link", this, true);
            
            return tab;
        },
        _getCreateTab : function() {
            this.createEvent("onAllianceMembers");

            var opts = ['<option value="proposeWrit" selected>Writ</option>'],
                dis = [], getAllianceMembers;
            if(this.building.level >= 6) {
                opts[opts.length] = '<option value="proposeTransfer">Transfer Station Ownership</option>';
                dis[dis.length] = [
                '    <div id="proposeTransfer" class="proposeOption" style="display:none;">',
                '        <label>Empire:</label><select id="proposeTransferTo"></select><br />',
                '        <button type="button" id="proposeTransferSubmit">Propose Transfer</button>',
                '    </div>'
                ].join('');
                getAllianceMembers = true;
                this.subscribe("onLoad", function() {
                    this.subscribe("onAllianceMembers", function() {
                        var sel = Dom.get("proposeTransferTo"),
                            opts = [];
                        for(var n=0; n<this.allianceMembers.length; n++) {
                            var member = this.allianceMembers[n];
                            if(member.id != Game.EmpireData.id) {
                                opts[opts.length] = '<option value="'+member.id+'">'+member.name+'</option>';
                            }
                        }
                        sel.innerHTML = opts.join('');
                        sel.selectedIndex = -1;
                    }, this, true);
                    Event.on("proposeTransferSubmit", "click", this.TransferOwner, this, true);
                }, this, true);
            }
            if(this.building.level >= 7) {
                opts[opts.length] = '<option value="proposeSeizeStar">Seize Star</option>';
                dis[dis.length] = [
                '    <div id="proposeSeizeStar" class="proposeOption" style="display:none;">',
                '        <label>Star:</label><input type="text" id="proposeSeizeStarFind" /><br />',
                '        <button type="button" id="proposeSeizeStarSubmit">Propose Seize Star</button>',
                '    </div>'
                ].join('');
                this.subscribe("onLoad", function() {
                    this.seizeStarTextboxList = this.CreateStarSearch("proposeSeizeStarFind");
                    Event.on("proposeSeizeStarSubmit", "click", this.SeizeStar, this, true);
                }, this, true);
            }
            if(this.building.level >= 8) {
                opts[opts.length] = '<option value="proposeRenameStar">Rename Star</option>';
                dis[dis.length] = [
                '    <div id="proposeRenameStar" class="proposeOption" style="display:none;">',
                '        <ul><li><label>Star:</label><select id="proposeRenameStarSelect"></select></li>',
                '        <li><label>New Name:</label><input type="text" id="proposeRenameStarName" /></li></ul><br />',
                '        <button type="button" id="proposeRenameStarSubmit">Propose Rename Star</button>',
                '    </div>'
                ].join('');
                this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({session_id:Game.GetSession(""),building_id:this.building.id},{
                        success:function(o){
                            var el = Dom.get('proposeRenameStarSelect');
                            if(el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m=0; m<stars.length; m++) {
                                    var obj = stars[m];
                                    opts[opts.length] = '<option value="'+obj.id+'">'+obj.name+'</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope:this
                    });
                    Event.on("proposeRenameStarSubmit", "click", this.RenameStar, this, true);
                }, this, true);
            }
            if(this.building.level >= 9) {
                opts[opts.length] = '<option value="proposeBroadcast">Broadcast on Net19</option>';
                dis[dis.length] = [
                '    <div id="proposeBroadcast" class="proposeOption" style="display:none;">',
                '        <label>Message:</label><input type="text" id="proposeBroadcastMessage" maxlength="100" size="50" /><br />',
                '        <button type="button" id="proposeBroadcastSubmit">Propose Broadcast</button>',
                '    </div>'
                ].join('');
                this.subscribe("onLoad", function() {
                    Event.on("proposeBroadcastSubmit", "click", this.Broadcast, this, true);
                }, this, true);
            }
            if(this.building.level >= 10) {
                opts[opts.length] = '<option value="proposeInduct">Induct Member</option>';
                opts[opts.length] = '<option value="proposeExpel">Expel Member</option>';
                dis[dis.length] = [
                '    <div id="proposeInduct" class="proposeOption" style="display:none;">',
                '        <ul><li><label>Empire:</label><input type="text" id="proposeInductMember" /></li>',
                '        <li><label>Message:</label><textarea id="proposeInductMessage" rows="4" cols="80"></textarea></li></ul><br />',
                '        <button type="button" id="proposeInductSubmit">Propose Induct Member</button>',
                '    </div>',
                '    <div id="proposeExpel" class="proposeOption" style="display:none;">',
                '        <ul><li><label>Empire:</label><select id="proposeExpelMember"></select></li>',
                '        <li><label>Reason:</label><textarea id="proposeExpelReason" rows="4" cols="80"></textarea></li></ul><br />',
                '        <button type="button" id="proposeExpelSubmit">Propose Expel Member</button>',
                '    </div>'
                ].join('');
                getAllianceMembers = true;
                this.subscribe("onLoad", function() {
                    this.inductMemberTextboxList = this.CreateEmpireSearch("proposeInductMember");
                    Event.on("proposeInductSubmit", "click", this.MemberInduct, this, true);

                    this.subscribe("onAllianceMembers", function() {
                        var sel = Dom.get("proposeExpelMember"),
                            opts = [];
                        for(var n=0; n<this.allianceMembers.length; n++) {
                            var member = this.allianceMembers[n];
                            if(!member.isLeader && member.id != Game.EmpireData.id) {
                                opts[opts.length] = '<option value="'+member.id+'">'+member.name+'</option>';
                            }
                        }
                        sel.innerHTML = opts.join('');
                        sel.selectedIndex = -1;
                    }, this, true);
                    Event.on("proposeExpelSubmit", "click", this.MemberExpel, this, true);
                }, this, true);
            }
            if(this.building.level >= 11) {
                opts[opts.length] = '<option value="proposeElectLeader">Elect New Leader</option>';
                dis[dis.length] = [
                '    <div id="proposeElectLeader" class="proposeOption" style="display:none;">',
                '        <label>Empire:</label><select id="proposeElectLeaderMember"></select><br />',
                '        <button type="button" id="proposeElectLeaderSubmit">Propose as New Leader</button>',
                '    </div>'
                ].join('');
                getAllianceMembers = true;
                this.subscribe("onLoad", function() {
                    this.subscribe("onAllianceMembers", function() {
                        var sel = Dom.get("proposeElectLeaderMember"),
                            opts = [];
                        for(var n=0; n<this.allianceMembers.length; n++) {
                            var member = this.allianceMembers[n];
                            if(!member.isLeader && member.id != Game.EmpireData.id) {
                                opts[opts.length] = '<option value="'+member.id+'">'+member.name+'</option>';
                            }
                        }
                        sel.innerHTML = opts.join('');
                        sel.selectedIndex = -1;
                    }, this, true);
                    Event.on("proposeElectLeaderSubmit", "click", this.MemberNewLeader, this, true);
                }, this, true);
            }
            if(this.building.level >= 12) {
                opts[opts.length] = '<option value="proposeRenameAsteroid">Rename Asteroid</option>';
                dis[dis.length] = [
                '    <div id="proposeRenameAsteroid" class="proposeOption" style="display:none;">',
				'		<ul><li><label>Star:</label><select id="proposeRenameAsteroidStar"></select></li>',
                '        <li><label>Asteroid:</label><select id="proposeRenameAsteroidName"></select></li>',
                '        <li><label>Name:</label><input type="text" id="proposeRenameAsteroidNewName" /></li></ul><br />',
                '        <button type="button" id="proposeRenameAsteroidSubmit">Propose Rename Asteroid</button>',
                '    </div>'
                ].join('');

				this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({
						session_id: Game.GetSession(),
						building_id: this.building.id,
					}, {
                        success: function(o){
                            var el = Dom.get('proposeRenameAsteroidStar');
                            if (el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m = 0; m < stars.length; m++) {
                                    var obj = stars[m];
                                   	opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope: this
                    });
                }, this, true);

				Event.on('proposeRenameAsteroidStar', 'change', this.PopulateBodiesForStar, {
					starElement: 'proposeRenameAsteroidStar',
					bodyElement: 'proposeRenameAsteroidName',
					type: 'asteroid',
					Self: this}, true);

				Event.on('proposeRenameAsteroidSubmit', 'click', this.RenameAsteroid, this, true);
            }
            if(this.building.level >= 13) {
                opts[opts.length] = '<option value="proposeMembersMining">Members Only Mining Rights</option>';
                dis[dis.length] = [
                '    <div id="proposeMembersMining" class="proposeOption" style="display:none;">',
                '        Allow only members to mine on asteroids under this stations jurisdiction.<br />',
                '        <button type="button" id="proposeMembersMiningSubmit">Propose</button>',
                '    </div>'
                ].join('');
                Event.on("proposeMembersMiningSubmit", "click", this.MiningOnly, this, true);
            }
            if(this.building.level >= 14) {
				opts[opts.length] = '<option value="proposeEvictMining">Evict Mining Platform</option>';
                dis[dis.length] = [
                '    <div id="proposeEvictMining" class="proposeOption" style="display:none;">',
				'		<ul><li><label>Star:</label><select id="proposeEvictMiningStar"></select></li>',
				'		 <li><label>Body:</label><select id="proposeEvictMiningBody"></select></li>',
                '        <li><label>Empire Mining:</label><select id="proposeEvictMiningId"></select></li><br />',
                '        <button type="button" id="proposeEvictMiningSubmit">Propose Eviction</button></ul>',
                '    </div>'
                ].join('');

				this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({
						session_id: Game.GetSession(),
						building_id: this.building.id,
					},{
                        success: function(o){
                            var el = Dom.get('proposeEvictMiningStar');
                            if (el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m = 0; m < stars.length; m++) {
                                    var obj = stars[m];
                                    opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope: this
                    });
                }, this, true);

				Event.on("proposeEvictMiningStar", "change", this.PopulateBodiesForStar, {
					starElement: 'proposeEvictMiningStar',
					bodyElement: 'proposeEvictMiningBody',
					type: 'asteroid',
					Self: this}, true);
				Event.on('proposeEvictMiningBody', 'change', this.LoadMining, this, true);
				Event.on('proposeEvictMiningSubmit', 'click', this.EvictMining, this, true);

            }
            if(this.building.level >= 17) {
                opts[opts.length] = '<option value="proposeRenameUninhabited">Rename Uninhabited</option>';
                dis[dis.length] = [
                '    <div id="proposeRenameUninhabited" class="proposeOption" style="display:none;">',
				'		<ul><li><label>Star:</label><select id="proposeRenameUninhabitedStar"></select></li>',
                '        <li><label>Planet:</label><select id="proposeRenameUninhabitedName"></select></li>',
                '        <li><label>Name:</label><input type="text" id="proposeRenameUninhabitedNewName" /></li></ul><br />',
                '        <button type="button" id="proposeRenameUninhabitedSubmit">Propose Rename Uninhabited</button>',
                '    </div>'
                ].join('');

				this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({
						session_id: Game.GetSession(),
						building_id: this.building.id,
					},{
                        success: function(o){
                            var el = Dom.get('proposeRenameUninhabitedStar');
                            if (el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m = 0; m < stars.length; m++) {
                                    var obj = stars[m];
									opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope: this
                    });
                }, this, true);

				Event.on('proposeRenameUninhabitedStar', 'change', this.PopulateBodiesForStar, {
					starElement: 'proposeRenameUninhabitedStar',
					bodyElement: 'proposeRenameUninhabitedName',
					type: 'habitable planet',
					Self: this}, true);

				Event.on('proposeRenameUninhabitedSubmit', 'click', this.RenameUninhabited, this, true);
            }
            if(this.building.level >= 18) {
                opts[opts.length] = '<option value="proposeMembersColonize">Members Only Colonization</option>';
                dis[dis.length] = [
                '    <div id="proposeMembersColonize" class="proposeOption" style="display:none;">',
                '        Allow only members to colonize planets under this stations jurisdiction.<br />',
                '        <button type="button" id="proposeMembersColonizeSubmit">Propose</button>',
                '    </div>'
                ].join('');
                Event.on("proposeMembersColonizeSubmit", "click", this.ColonizeOnly, this, true);
            }
            if(this.building.level >= 20) {
                opts[opts.length] = '<option value="proposeMembersExcavation">Members Only Excavation</option>';
                dis[dis.length] = [
                '    <div id="proposeMembersExcavation" class="proposeOption" style="display:none;">',
                '        Allow only members to excavate on bodies under this stations jurisdiction.<br />',
                '        <button type="button" id="proposeMembersExcavationSubmit">Propose</button>',
                '    </div>'
                ].join('');
                Event.on("proposeMembersExcavationSubmit", "click", this.ExcavationOnly, this, true);
            }
            if(this.building.level >= 21) {
                opts[opts.length] = '<option value="proposeEvictExcav">Evict Excavator</option>';
                dis[dis.length] = [
                '    <div id="proposeEvictExcav" class="proposeOption" style="display:none;">',
				'		<ul><li><label>Star:</label><select id="proposeEvictExcavStar"></select></li>',
				'		 <li><label>Body:</label><select id="proposeEvictExcavBody"></select></li>',
                '        <li><label>Excavator:</label><select id="proposeEvictExcavId"></select></li><br />',
                '        <button type="button" id="proposeEvictExcavSubmit">Propose Eviction</button></ul>',
                '    </div>'
                ].join('');

				/* Server doesn't return Excavator Id Anywhere.
				this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({
						session_id: Game.GetSession(),
						building_id: this.building.id,
					},{
                        success: function(o){
                            var el = Dom.get('proposeEvictExcavStar');
                            if (el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m = 0; m < stars.length; m++) {
                                    var obj = stars[m];
                                    opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope: this
                    });
                }, this, true);

				Event.on("proposeEvictExcavStar", "change", this.PopulateBodiesForStar, {
					starElement: 'proposeEvictExcavStar',
					bodyElement: 'proposeEvictExcavBody',
					Self: this}, true);
				Event.on('proposeEvictExcavBody', 'change', this.LoadExcavs, this, true);
				*/

            }
            if(this.building.level >= 23) {
                opts[opts.length] = '<option value="proposeNeutralizeBHG">Neutralize BHG</option>';
                dis[dis.length] = [
                '    <div id="proposeNeutralizeBHG" class="proposeOption" style="display:none;">',
                '        Neutralizes all Black Hole Generators under this stations jurisdiction.<br />',
                '        <button type="button" id="proposeNeutralizeBHGSubmit">Propose</button>',
                '    </div>'
                ].join('');
                Event.on("proposeNeutralizeBHGSubmit", "click", this.NeutralizeBHG, this, true);
            }
            if(this.building.level >= 25) {
                opts[opts.length] = '<option value="proposeFireBfg">Fire BFG</option>';
                dis[dis.length] = [
                '    <div id="proposeFireBfg" class="proposeOption" style="display:none;">',
				'		<ul><li><label>Star:</label><select id="proposeFireBfgStars"></select></li>',
                '        <li><label>Body:</label><select id="proposeFireBfgBody"></select></li>',
                '        <li><label>Reason:</label><textarea id="proposeFireBfgReason" rows="4" cols="80"></textarea></li></ul><br />',
                '        <button type="button" id="proposeFireBfgSubmit">Propose to Fire BFG!</button>',
                '    </div>'
                ].join('');
				
				this.subscribe("onLoad", function() {
                    this.service.get_stars_in_jurisdiction({
						session_id: Game.GetSession(),
						building_id: this.building.id,
					},{
                        success: function(o){
                            var el = Dom.get('proposeFireBfgStars');
                            if (el) {
                                var stars = o.result.stars;
                                var opts = [];
                                for(var m = 0; m < stars.length; m++) {
                                    var obj = stars[m];
                                    opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
                                }
                                
                                el.innerHTML = opts.join('');
                                el.selectedIndex = -1;
                            }
                        },
                        scope: this
                    });
                }, this, true);
				
				Event.on("proposeFireBfgStars", "change", this.PopulateBodiesForStar, {
					starElement: 'proposeFireBfgStars',
					bodyElement: 'proposeFireBfgBody',
					Self: this}, true);
				Event.on("proposeFireBfgSubmit", "click", this.FireBFG, this, true);
            }
            
            if (getAllianceMembers) {
                Game.Services.Alliance.view_profile({
					session_id: Game.GetSession(),
					alliance_id: Game.GetCurrentPlanet().alliance.id
				}, {
                    success: function(o) {
                        var el = Dom.get('proposeTransferTo');
                        if (el) {
                            var profile = o.result.profile;
                            var memberArray = [];
                            for (var m = 0; m < profile.members.length; m++) {
                                var member = profile.members[m];
                                member.isLeader = member.id == profile.leader_id
                                memberArray[memberArray.length] = member;
                            }
                            this.allianceMembers = memberArray;
                            this.fireEvent("onAllianceMembers");
                        }
                    },
                    scope: this
                });
            }
            
            var tab = new YAHOO.widget.Tab({ label: "Propose", content: [
                '<div id="proposeContainer">',
                '    <div style="border-bottom:1px solid #52acff;padding-bottom:5px; margin-bottom:5px;">',
                '        Propose: <select id="proposeSelect">',
                opts.join(''),
                '    </select></div>',
                '    <div id="proposeMessage"></div>',
                '    <div id="proposeWrit" class="proposeOption">',
                '        <ul><li><label>Template:</label><select id="proposeWritTemplates"></select></li>',
                '        <li><label>Title:</label><input type="text" id="proposeTitle" size="50" maxlength="30" /></li>',
                '        <li><label>Description:</label><textarea id="proposeDesc" rows="4" cols="80"></textarea></li></ul><br />',
                '        <button type="button" id="proposeWritSubmit">Propose Writ</button>',
                '    </div>',
                dis.join(''),
                '</div>'
            ].join('')});

            this.subscribe("onLoad", function() {
                this.proposeOptions = Sel.query("div.proposeOption", "proposeContainer");
                this.proposeMessage = Dom.get("proposeMessage");
                
                Event.on("proposeSelect", "change", function(e) {
                    Dom.setStyle(this.proposeOptions, "display", "none");
                    Dom.setStyle(Lib.getSelectedOptionValue("proposeSelect"), "display", "");
                }, this, true);

                //Propose Writ
                var t = Dom.get("proposeWritTemplates"),
                    templates = Game.Resources.writ_templates,
                    opts = [];
                for(var n=0; n<templates.length; n++) {
                    var tmp = templates[n];
                    opts.push('<option value="');
                    opts.push(n);
                    opts.push('">');
                    opts.push(tmp.title);
                    opts.push('</option>');
                }
                t.innerHTML = opts.join('');
                Dom.get("proposeTitle").value = templates[0].title;
                Dom.get("proposeDesc").value = templates[0].description;
                
                Event.on(t, "change", this.ProposeWritTemplateChange, this, true);
                
                Event.on("proposeWritSubmit", "click", this.ProposeWrit, this, true);
            }, this, true);

            return tab;
        },
        
        ProposeWritTemplateChange : function() {
            var opt = Game.Resources.writ_templates[Lib.getSelectedOption("proposeWritTemplates").value];
            Dom.get("proposeTitle").value = opt.title;
            Dom.get("proposeDesc").value = opt.description;
        },
        CreateStarSearch : function(id) {
            var dataSource = new Util.XHRDataSource("/map");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.stars",
                fields : ["name","id","zone","color","x","y"]
            };
            
            var oTextboxList = new YAHOO.lacuna.TextboxList(id, dataSource, { //config options
                maxResultsDisplayed: 25,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:false,
                useIndicator:true
            });
            oTextboxList.formatResult = function(oResultData, sQuery, sResultMatch) {
                return [
                    '<div class="yui-gf">',
                    '    <div class="yui-u first" style="background-color:black;">',
                    '        <img src="',Lib.AssetUrl,'star_map/',oResultData.color,'.png" alt="',oResultData,name,'" style="width:50px;height:50px;" />',
                    '    </div>',
                    '    <div class="yui-u">',
                    '        <div>',oResultData.name,'</div>',
                    '        <div>',oResultData.x,' : ',oResultData.y,'</div>',
                    '    </div>',
                    '</div>'].join("");
            };
            oTextboxList.generateRequest = function(sQuery){                
                var s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "search_stars",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };

            return oTextboxList;
        },
        CreateEmpireSearch : function(id) {
            var dataSource = new Util.XHRDataSource("/empire");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.empires",
                fields : ["name","id"]
            };
            
            var oTextboxList = new YAHOO.lacuna.TextboxList(id, dataSource, { //config options
                maxResultsDisplayed: 10,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:true,
                formatResultLabelKey:"name",
                formatResultColumnKeys:["name"],
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){
                var s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };
            
            return oTextboxList;
        },
        
        Broadcast : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_broadcast_on_network19({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                message : Dom.get("proposeBroadcastMessage").value
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal of Broadcast successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    Dom.get("proposeBroadcastMessage").value = "";
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        ColonizeOnly : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_members_only_colonization({
                session_id : Game.GetSession(''),
                building_id : this.building.id
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal for Members Only Colonization successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
		EvictMining: function(e) {
			var button   = Event.getTarget(e),
				platform = Lib.getSelectedOptionValue('proposeEvictMiningId');

			button.disabled = true;
			if (platform) {
				Lacuna.Pulser.Show();
				this.service.propose_evict_mining_platform({
					session_id: Game.GetSession(''),
					building_id: this.building.id,
					platform_id: platform
				}, {
					success: function(o) {
						Lacuna.Pulsar.Hide();
						this.rpcSuccess(o);
						this.proposeMessage.innerHTML = "Proposal for Eviction of Mining Platform successful.";
						Lib.fadeOutElm(this.proposeMessage);
            			button.disabled = false;
					},
					failure: function(o) {
						button.disabled = false;
					},
					scope: this
				});
			}
			else {
				alert('Must selected a Mining Platform to Evict.');
				button.disabled = false;
			}
		},
		FireBFG : function(e) {
			var button = Event.getTarget(e),
				body   = Lib.getSelectedOptionValue('proposeFireBfgBody'),
				reason = Dom.get('proposeFireBfgReason').value;
			
			if (body && reason) {
				if (confirm('WARNING: The BFG is an extremly powerful weapon - do not point at face!!\n Are you sure you want to fire it?')) {
					button.disabled = true;
				
					Lacuna.Pulser.Show();
					this.service.propose_fire_bfg({
						session_id: Game.GetSession(),
						building_id: this.building.id,
						body_id: body,
						reason: reason
					}, {
						success : function(o) {
							Lacuna.Pulser.Hide();
							this.rpcSuccess(o);
							this.proposeMessage.innerHTML = "Proposal to Fire BFG successful.";
							Lib.fadeOutElm(this.proposeMessage);
							button.disabled = false;
						},
						failure : function(o) {
							button.disabled = false;
						},
						scope: this
					});
				}
			}
			else {
				alert('Must provide a body and a reason!');
			}
		},
		LoadMining: function(e) {
			var bodyId       = Lib.getSelectedOptionValue('proposeEvictMiningBody'),
				miningIdElem = Dom.get('proposeEvictMiningId');

			if (bodyId) {
				Lacuna.Pulser.Show();
				this.service.get_mining_platforms_for_asteroid_in_jurisdiction({
					session_id: Game.GetSession(''),
					building_id: this.building.id,
					asteroid_id: bodyId
				}, {
					success: function(o) {
						Lacuna.Pulser.Hide();
						var optionValues = [];
						var platforms = o.result.platforms;

						for (var i = 0; i < platforms.length; i++) {
							var platform = platforms[i];
							optionValues[optionValues.length] = '<option value="' + platform.id + '">' + platform.empire.name + '</option>';
						}

						miningIdElem.innerHTML = optionValues.join('');
					},
					scope: this
				});
			}
		},
		/* There currently isn't a way to get the Excavator Id.
		LoadExcavs: function(e) {
			var bodyId = Lib.getSelectedOptionValue('proposeEvictExcavBody'),
				excavElem = Dom.get('proposeEvictExcavId');

			if (bodyId) {
				Game.Services.Buildings.SpacePort.get_ships_for({
					session_id: Game.GetSession(''),
					from_body_id: Game.GetCurrentPlanet().id,
					target: {body_id: bodyId}
				}, {
					success: function(o) {
						this.rpcSuccess(o);

						var el = Dom.get('proposeEvictExcavId');
						if (el) {
							var excavs = o.result.excavators;
							console.log(excavs);
							var optionValues = [];

							for (var i = 0; i < excavs.length; i++) {
								var excav = excavs[i];
								
								//optionValues[optionvalues.length] = opts[opts.length] = '<option value="' + excav.id + '">' + excav.name + '</option>';
							}

							el.innerHTML = optionValues.join('');
						}
					},
					scope: this
				});
			}
		},*/
        NeutralizeBHG : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_neutralize_bhg({
                session_id : Game.GetSession(''),
                building_id : this.building.id
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal for Neutralize Black Hold Generators successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        MemberExpel : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_expel_member({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                empire_id : Lib.getSelectedOptionValue("proposeExpelMember"),
                message : Dom.get('proposeExpelReason').value
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal to Expel Member successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    Dom.get("proposeExpelMember").selectedIndex = -1;
                    Dom.get('proposeExpelReason').value = "";
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        MemberInduct : function(e) {
            if(this.inductMemberTextboxList._oTblSingleSelection) {
                var btn = Event.getTarget(e);
                btn.disabled = true;
                var selObj = this.inductMemberTextboxList._oTblSingleSelection.Object;
                
                this.service.propose_induct_member({
                    session_id : Game.GetSession(''),
                    building_id : this.building.id,
                    empire_id : selObj.id,
                    message : Dom.get('proposeInductMessage').value
                },
                {
                    success : function(o) {
                        this.rpcSuccess(o);
                        this.proposeMessage.innerHTML = "Proposal to Induct Member successful.";
                        Lib.fadeOutElm(this.proposeMessage);
                        this.inductMemberTextboxList.ResetSelections();
                        Dom.get('proposeInductMessage').value = "";
                        btn.disabled = false;
                    },
                    failure : function(o) {
                        btn.disabled = false;
                    },
                    scope:this
                });
            }
        },
        MemberNewLeader : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_elect_new_leader({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                to_empire_id : Lib.getSelectedOptionValue("proposeElectLeaderMember")
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal to Elect New Leader successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    Dom.get("proposeElectLeaderMember").selectedIndex = -1;
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        MiningOnly : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_members_only_mining_rights({
                session_id : Game.GetSession(''),
                building_id : this.building.id
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal for Members Only Mining Rights successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        ExcavationOnly : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_members_only_excavation({
                session_id : Game.GetSession(''),
                building_id : this.building.id
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal for Members Only Excavation successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
		PopulateBodiesForStar : function(e) {
			var starId   = Lib.getSelectedOptionValue(this.starElement),
				bodyList = Dom.get(this.bodyElement);
			
			Lacuna.Pulser.Show()
			this.Self.service.get_bodies_for_star_in_jurisdiction({
				session_id: Game.GetSession(''),
				building_id: this.Self.building.id,
				star_id: starId
			}, {
				success: function(o) {
					Lacuna.Pulser.Hide();
					this.Self.rpcSuccess(o);
					
					if (bodyList) {
						var bodies = o.result.bodies;
					
						var opts = [];
						for (var i = 0; i < bodies.length; i++) {
							var obj = bodies[i];
							
							if (this.type) {
								if (obj.type == this.type) {
									opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
								}
							}
							else {
								opts[opts.length] = '<option value="' + obj.id + '">' + obj.name + '</option>';
							}
						}
					
						bodyList.innerHTML = opts.join('');
						bodyList.selectedIndex = -1;
					}
				},
				scope: this
			});
		},
        ProposeWrit : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_writ({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                title : Dom.get("proposeTitle").value,
                description : Dom.get("proposeDesc").value
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal of Writ successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    this.ProposeWritTemplateChange();
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
		RenameAsteroid: function(e) {
			var button = Event.getTarget(e),
				body = Lib.getSelectedOptionValue('proposeRenameAsteroidName'),
				newName = Dom.get('proposeRenameAsteroidNewName').value;

			button.disabled = true;

			if (body && newName) {
				Lacuna.Pulser.Show();
				this.service.propose_rename_uninhabited({
					session_id: Game.GetSession(''),
					building_id: this.building.id,
					planet_id: body,
					name: newName
				}, {
					success: function(o) {
						Lacuna.Pulser.Hide();
						this.rpcSuccess(o);

						this.proposeMessage.innerHTML = "Proposal to Rename asteroid successful.";
                    	Lib.fadeOutElm(this.proposeMessage);

						button.disabled = false;
						Dom.get('proposeRenameAsteroidNewName').value = '';
						Dom.get('proposeRenameAsteroidName').selectedIndex = -1;
					},
					failure: function(o) {
						button.disabled = false;
					},
					scope: this
				});
			}
			else {
				alert('Must select a body and chose a new name!');
				button.disabled = false;
			}
		},		
        RenameStar : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
            
            this.service.propose_rename_star({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                star_id : Lib.getSelectedOptionValue("proposeRenameStarSelect"),
                name : Dom.get("proposeRenameStarName").value
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal to Rename star successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    Dom.get("proposeRenameStarSelect").selectedIndex = -1;
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
		RenameUninhabited: function(e) {
			var button = Event.getTarget(e),
				body = Lib.getSelectedOptionValue('proposeRenameUninhabitedName'),
				newName = Dom.get('proposeRenameUninhabitedNewName').value;

			
			button.disabled = true;

			if (body && newName) {
				Lacuna.Pulser.Show();
				this.service.propose_rename_uninhabited({
					session_id: Game.GetSession(''),
					building_id: this.building.id,
					planet_id: body,
					name: newName
				}, {
					success: function(o) {
						Lacuna.Pulser.Hide();
						this.rpcSuccess(o);

						this.proposeMessage.innerHTML = "Proposal to Rename uninhabited successful.";
                    	Lib.fadeOutElm(this.proposeMessage);

						button.disabled = false;
						Dom.get('proposeRenameUninhabitedNewName').value = '';
						Dom.get('proposeRenameUninhabitedName').selectedIndex = -1;
					},
					failure: function(o) {
						button.disabled = false;
					},
					scope: this
				});
			}
			else {
				alert('Must select a body and chose a new name!');
				button.disabled = false;
			}
		},
        SeizeStar : function(e) {
            if(this.seizeStarTextboxList._oTblSingleSelection) {
                var btn = Event.getTarget(e);
                btn.disabled = true;
                var selObj = this.seizeStarTextboxList._oTblSingleSelection.Object;
                
                this.service.propose_seize_star({
                    session_id : Game.GetSession(''),
                    building_id : this.building.id,
                    star_id : selObj.id
                },
                {
                    success : function(o) {
                    this.rpcSuccess(o);
                        this.proposeMessage.innerHTML = "Proposal to Seize star successful.";
                        Lib.fadeOutElm(this.proposeMessage);
                        this.seizeStarTextboxList.ResetSelections();
                        btn.disabled = false;
                    },
                    failure : function(o) {
                        btn.disabled = false;
                    },
                    scope:this
                });
            }
        },
        TransferOwner : function(e) {
            var btn = Event.getTarget(e);
            btn.disabled = true;
        
            this.service.propose_transfer_station_ownership({
                session_id : Game.GetSession(''),
                building_id : this.building.id,
                to_empire_id : Lib.getSelectedOptionValue("proposeTransferTo")
            },
            {
                success : function(o) {
                    this.rpcSuccess(o);
                    this.proposeMessage.innerHTML = "Proposal to Transfer Ownership successful.";
                    Lib.fadeOutElm(this.proposeMessage);
                    Dom.get("proposeTransferTo").selectedIndex = -1;
                    btn.disabled = false;
                },
                failure : function(o) {
                    btn.disabled = false;
                },
                scope:this
            });
        },
        
        
        LawsPopulate : function(){
            var details = Dom.get("lawsDetails");
            
            if(details) {
                var laws = this.laws,
                    parentEl = details.parentNode,
                    li = document.createElement("li");
                    
                //Event.purgeElement(details, true);
                details = parentEl.removeChild(details);
                details.innerHTML = "";

                for(var i=0; i<laws.length; i++) {
                    var law = laws[i],
                        nLi = li.cloneNode(false);
                    
                    nLi.Law = law;
                    nLi.innerHTML = ['<div style="margin-bottom:2px;">',
                        '<div class="yui-gb" style="border-bottom:1px solid #52acff;">',
                        '    <div class="yui-u first"><label>',law.name,'</label></div>',
                        '    <div class="yui-u" >',(this.canRepealLaw ? '<button type="button">Repeal</button>' : '&nbsp;'),'</span></div>',
                        '    <div class="yui-u" style="text-align:right;">Enacted ',Lib.formatServerDate(law.date_enacted),'</span></div>',
                        '</div>',
                        '<div class="lawDesc">',this.formatBody(law.description),'</div>',
                        '</div>'].join('');
                                
                    details.appendChild(nLi);
                    
                }
                
                //add child back in
                parentEl.appendChild(details);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 230;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        LawClick : function(e, matchedEl, container){
            if(matchedEl.innerHTML == "Repeal") {
                matchedEl.disabled = true;
                var el = Dom.getAncestorByTagName(matchedEl, "li");
                if(el) {
                    this.service.propose_repeal_law({
                        session_id:Game.GetSession(""),
                        building_id:this.building.id,
                        law_id:el.Law.id
                    },{
                        success : function(o) {
                            delete this.props;
                            matchedEl.parentNode.removeChild(matchedEl);
                        },
                        failure : function() {
                            matchedEl.disabled = false;
                        },
                        scope:this
                    });
                }
            }
            
        },
        
        PropsPopulate : function() {
            var details = Dom.get("propsDetails");
            
            if(details) {
                var props = this.props,
                    parentEl = details.parentNode,
                    li = document.createElement("li");
                    
                //Event.purgeElement(details, true);
                details = parentEl.removeChild(details);
                details.innerHTML = "";
                
                var serverTime = Lib.getTime(Game.ServerData.time);

                for(var i=0; i<props.length; i++) {
                    var prop = props[i],
                        nLi = li.cloneNode(false),
                        sec = (Lib.getTime(prop.date_ends) - serverTime) / 1000;
                
                    nLi.Prop = prop;
                    nLi.innerHTML = this.PropLineDetails(prop, sec);
                    
                    this.addQueue(sec, this.PropQueue, nLi);
                                
                    details.appendChild(nLi);
                    
                }
                
                //add child back in
                parentEl.appendChild(details);
                
                //wait for tab to display first
                setTimeout(function() {
                    var Ht = Game.GetSize().h - 230;
                    if(Ht > 300) { Ht = 300; }
                    var tC = details.parentNode;
                    Dom.setStyle(tC,"height",Ht + "px");
                    Dom.setStyle(tC,"overflow-y","auto");
                },10);
            }
        },
        PropLineDetails : function(prop, sec) {
            if(prop.status == "Passed" || prop.status == "Failed") {
                return ['<div style="margin-bottom:2px;">',
                    '<div class="yui-gb">',
                    '    <div class="yui-u first"><label>',prop.name,'</label></div>',
                    '    <div class="yui-u">Proposed by <a class="profile_link" href="#',prop.proposed_by.id,'">',prop.proposed_by.name,'</a></div>',
                    '    <div class="yui-u"><label>',prop.status,'</label></div>',
                    '</div>',
                    '<div class="yui-gc">',
                    '    <div class="yui-u first"><div class="propDesc">',this.formatBody(prop.description),'</div></div>',
                    '    <div class="yui-u"><div class="propMyVote">',this.PropVoteDetails(prop),'</div></div>',
                    '</div>',
                    '<table style="width:100%"><col style="width:25%;text-align:center;"><col style="width:25%;text-align:center;"><col style="width:25%;text-align:center;">',
                    '<tr><th>Needed</th><th>Yes</th><th>No</th></tr>',
                    '<tr><td>',prop.votes_needed,'</td><td>',prop.votes_yes,'</td><td>',prop.votes_no,'</td></tr>',
                    '</table>',
                    '</div>'].join('');

            }
            else {
                return ['<div style="margin-bottom:2px;">',
                    '<div class="yui-gb">',
                    '    <div class="yui-u first"><label>',prop.name,'</label></div>',
                    '    <div class="yui-u">Proposed by <a class="profile_link" href="#',prop.proposed_by.id,'">',prop.proposed_by.name,'</a></div>',
                    '    <div class="yui-u">',prop.status,': <span class="propTime">',Lib.formatTime(sec),'</span></div>',
                    '</div>',
                    '<div class="yui-gc">',
                    '    <div class="yui-u first"><div class="propDesc">',this.formatBody(prop.description),'</div></div>',
                    '    <div class="yui-u"><div class="propMyVote">',this.PropVoteDetails(prop),'</div></div>',
                    '</div>',
                    '<table style="width:100%"><col style="width:25%;text-align:center;"><col style="width:25%;text-align:center;"><col style="width:25%;text-align:center;">',
                    '<tr><th>Needed</th><th>Yes</th><th>No</th></tr>',
                    '<tr><td>',prop.votes_needed,'</td><td>',prop.votes_yes,'</td><td>',prop.votes_no,'</td></tr>',
                    '</table>',
                    '</div>'].join('');
            }
        },
        PropVoteDetails : function(prop) {
            if(prop.my_vote !== undefined) {
                return '<label>Voted ' + (prop.my_vote*1 === 1 ? 'Yes' : 'No') + '</label>';
            }
            else {
                return '<button type="button">Yes</button><button type="button">No</button>';
            }
        },
        PropQueue : function(remaining, elLine){
            var arrTime;
            if(remaining <= 0) {
                arrTime = 'Overdue ' + Lib.formatTime(Math.round(-remaining));
            }
            else {
                arrTime = Lib.formatTime(Math.round(remaining));
            }
            var el = Sel.query("span.propTime",elLine,true);
            if(el) {
                el.innerHTML = arrTime;
            }
            else {
                return true;
            }
        },
        PropClick : function(e, matchedEl, container){
            var type = matchedEl.innerHTML;
            if(type == "Yes" || type == "No") {
                var el = Dom.getAncestorByTagName(matchedEl, "li"),
                    func = this["PropVote"+type];
                if(el && func) {
                    func.call(this, el.Prop, el);
                }
            }
            
        },
        PropVoteYes : function(prop, line) {
            this.service.cast_vote({
                session_id:Game.GetSession(""),
                building_id:this.building.id,
                proposition_id:prop.id,
                vote:1
            },{
                success : this.PropVoteSuccess,
                scope:{Self:this,Line:line}
            });
        },
        PropVoteNo : function(prop, line) {
            this.service.cast_vote({
                session_id:Game.GetSession(""),
                building_id:this.building.id,
                proposition_id:prop.id,
                vote:0
            },{
                success : this.PropVoteSuccess,
                scope:{Self:this,Line:line}
            });
        },
        PropVoteSuccess  : function(o){
            this.Self.rpcSuccess(o);
            var newProp = o.result.proposition;
            for(var i=0; i<this.Self.props.length; i++) {
                if(this.Self.props[i].id == newProp.id) {
                    this.Self.props[i] = newProp;
                    break;
                }
            }
            this.Line.Prop = newProp;
            this.Line.innerHTML = this.Self.PropLineDetails(newProp, 0);
        },
        
        formatBody : function(body) {
            body = body.replace(/&/g,'&amp;');
            body = body.replace(/</g,'&lt;');
            body = body.replace(/>/g,'&gt;');
            body = body.replace(/\n/g,'<br />');
            body = body.replace(/\*([^*]+)\*/gi,'<b>$1</b>');
            body = body.replace(/\{(food|water|ore|energy|waste|happiness|time|essentia|plots|build)\}/gi, function(str,icon){
                var cl = 'small' + icon.substr(0,1).toUpperCase() + icon.substr(1);
                return '<img src="' + Lib.AssetUrl + 'ui/s/' + icon + '.png" class="' + cl + '" />';
            });
            body = body.replace(/\[(https?:\/\/[a-z0-9_.\/\-]+)\]/gi,'<a href="$1">$1</a>');
            body = body.replace(/\{Empire\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="profile_link" href="#$1">$2</a>');
            //body = body.replace(/\{Empire\s+(\d+)\s+([^\}]+)}/gi,'$2');
            body = body.replace(/\{Starmap\s+(-?\d+)\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="starmap_link" href="#$1x$2">$3</a>');
            body = body.replace(/\{Planet\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="planet_link" href="#$1">$2</a>');
            body = body.replace(/\{Alliance\s+(-?\d+)\s+([^\}]+)\}/gi,'<a class="alliance_link" href="#$1">$2</a>');
            body = body.replace(/\{VoteYes\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/gi,'<a class="voteyes_link" href="#$1&$2&$3">Yes!</a>');
            body = body.replace(/\{VoteNo\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/gi,'<a class="voteno_link" href="#$1&$2&$3">No!</a>');
            //body = body.replace(/\{Alliance\s+(\d+)\s+([^\}]+)}/gi,'$2');
            return body;
        },
        handleProfileLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            if(res) {
                Lacuna.Info.Empire.Load(res[1]);
            }
        },
        handleStarmapLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)x(-?\d+)$/);
            Game.StarJump({x:res[1],y:res[2]});
        },
        handlePlanetLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            this.hide();
            var planet = Game.EmpireData.planets[res[1]];
            Game.PlanetJump(planet);
        },
        handleAllianceLink : function(e, el) {
            Event.stopEvent(e);
            var res = el.href.match(/\#(-?\d+)$/);
            Lacuna.Info.Alliance.Load(res[1]);
        }

    });
    
    Lacuna.modules.Parliament = Parliament;

})();
YAHOO.register("Parliament", YAHOO.lacuna.modules.Parliament, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/module/parliament.js","/module")
},{"buffer":71,"oMfpAn":75}],59:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.modules");

if (typeof YAHOO.lacuna.modules.PoliceStation == "undefined" || !YAHOO.lacuna.modules.PoliceStation) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Pager = YAHOO.widget.Paginator,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var PoliceStation = function(result){
        PoliceStation.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Modules.PoliceStation;
        
        this.foreignSpiesMessage = "There may be spies on your station that we don't know about.";
    };
    
    Lang.extend(PoliceStation, Lacuna.buildings.Security);
    
    YAHOO.lacuna.modules.PoliceStation = PoliceStation;

})();
YAHOO.register("policestation", YAHOO.lacuna.modules.PoliceStation, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/module/policeStation.js","/module")
},{"buffer":71,"oMfpAn":75}],60:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna.modules");

if (typeof YAHOO.lacuna.modules.StationCommand == "undefined" || !YAHOO.lacuna.modules.StationCommand) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var StationCommand = function(result){
        StationCommand.superclass.constructor.call(this, result);
        
        this.service = Game.Services.Modules.StationCommand;
    };
    
    Lang.extend(StationCommand, Lacuna.buildings.PlanetaryCommand);

    Lacuna.modules.StationCommand = StationCommand;

})();
YAHOO.register("StationCommand", YAHOO.lacuna.modules.StationCommand, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/module/stationCommand.js","/module")
},{"buffer":71,"oMfpAn":75}],61:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Notify == "undefined" || !YAHOO.lacuna.Notify) {
    
(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;
        
    var Notify = function(){
        this.skip_incoming_ships = {};
        this.incoming_own = {};
        this.num_incoming_own = {};
        this.incoming_ally = {};
        this.num_incoming_ally = {};
        this.incoming_enemy = {};
        this.num_incoming_enemy = {};
    };
    Notify.prototype = {
        _createDisplay : function() {
            if(!this.Display) {
                var container = document.createElement("div");
                container.id = "notify";
                Dom.addClass(container, Lib.Styles.HIDDEN);
                Dom.addClass(container, "nofooter");
                container.innerHTML = this._getHtml();
                document.body.insertBefore(container, document.body.firstChild);
                
                this.Display = new YAHOO.widget.Panel("notify", {
                    constraintoviewport:true,
                    visible:false,
                    draggable:true,
                    effect:Game.GetContainerEffect(),
                    close:false,
                    underlay:false,
                    modal:false,
                    width:"180px",
                    context:["header","tr","br", ["beforeShow", "windowResize"], [0,40]]
                });
                this.Display.renderEvent.subscribe(function(){
                    this.notifyList = Dom.get('notifyList');
                    this.notify = Dom.get("notify");
                    
                    Dom.removeClass(this.notify, Lib.Styles.HIDDEN);
                });
                this.Display.showEvent.subscribe(function(){
                    Dom.setStyle(this.notifyList.parentNode, "max-height", (Game.GetSize().h - 125) + "px");
                });
                this.Display.render();
            }
        },
        _getHtml : function() {
            return [
            '    <div class="hd" style="background:transparent;">Incoming Ships.</div>',
            '    <div class="bd" style="background: url(',Lib.AssetUrl,'ui/transparent_black.png) repeat scroll 0pt 0pt transparent;">',
            '        <div style="overflow:auto;">',
            '            <ul id="notifyList"></ul>',
            '        </div>',
            '    </div>'
            ].join('');
        },
        _updating : function() {
            var list = this.Display.notifyList;
            var incoming_own = this.incoming_own[this.planetId] || [],
                incoming_ally = this.incoming_ally[this.planetId] || [],
                incoming_enemy = this.incoming_enemy[this.planetId] || [],
                skip_incoming_ships = this.skip_incoming_ships[this.planetId] || 0,
                num_incoming_own = this.num_incoming_own[this.planetId] || 0,
                num_incoming_ally = this.num_incoming_ally[this.planetId] || 0,
                num_incoming_enemy = this.num_incoming_enemy[this.planetId] || 0;
                arr = [];
            if(skip_incoming_ships==1) {
                arr = arr.concat(['<li><span style="color:#f00">DISABLED (see profile)</span></li>']);
            }

            if(num_incoming_enemy > 0) {
                arr = arr.concat(['<li><span style="color:#fff">',num_incoming_enemy,' foreign</span></li>']);
                var serverTime = Lib.getTime(Game.ServerData.time),
                    len = incoming_enemy.length;
                for(var s=0; s<len; s++) {
                    var ship = incoming_enemy[s],
                    ms = Lib.getTime(ship.date_arrives) - serverTime,
                    arrTime;
                    if(ms > 0) {
                        arrTime = Lib.formatMillisecondTime(ms);
                    }
                    else {
                        arrTime = 'Overdue ' + Lib.formatMillisecondTime(-ms);
                    }
                    arr = arr.concat(['<li><span style="color:#fff;">',arrTime,'</span></li>']);
                }
            }
            if(num_incoming_ally > 0) {
                arr = arr.concat(['<li><span style="color:#b0b">',num_incoming_ally,' allied</span></li>']);
                var serverTime = Lib.getTime(Game.ServerData.time),
                    len = incoming_ally.length;
                for(var s=0; s<len; s++) {
                    var ship = incoming_ally[s],
                    ms = Lib.getTime(ship.date_arrives) - serverTime,
                    arrTime;
                    if(ms > 0) {
                        arrTime = Lib.formatMillisecondTime(ms);
                    }
                    else {
                        arrTime = 'Overdue ' + Lib.formatMillisecondTime(-ms);
                    }
                    arr = arr.concat(['<li><span style="color:#b0b;">',arrTime,'</span></li>']);
                }
            }
            if(num_incoming_own > 0) {
                arr = arr.concat(['<li><span style="color:#0f0">',num_incoming_own,' own</span></li>']);
                var serverTime = Lib.getTime(Game.ServerData.time),
                    len = incoming_own.length;
                for(var s=0; s<len; s++) {
                    var ship = incoming_own[s],
                    ms = Lib.getTime(ship.date_arrives) - serverTime,
                    arrTime;
                    if(ms > 0) {
                        arrTime = Lib.formatMillisecondTime(ms);
                    }
                    else {
                        arrTime = 'Overdue ' + Lib.formatMillisecondTime(-ms);
                    }
                    arr = arr.concat(['<li><span style="color:#0f0;">',arrTime,'</span></li>']);
                }
            }
            if(num_incoming_own + num_incoming_ally + num_incoming_enemy + skip_incoming_ships == 0) {
                arr = arr.concat(['<li><span style="color:#0f0">none</span></li>']);
            }            
            list.innerHTML = arr.join('');
            this.Display.show();
        },
        Load : function(planet) {
            var incoming_own        = planet.incoming_own_ships || [],
                incoming_ally       = planet.incoming_ally_ships || [],
                incoming_enemy      = planet.incoming_enemy_ships || [],
                skip_incoming_ships = planet.skip_incoming_ships || 0,
                num_incoming_own    = planet.num_incoming_own || 0,
                num_incoming_ally   = planet.num_incoming_ally || 0,
                num_incoming_enemy  = planet.num_incoming_enemy || 0;
                planet_skip_incoming_ships = this.skip_incoming_ships[planet.id] || 0;
                planet_num_own      = this.num_incoming_own[planet.id] || 0;
                planet_num_ally     = this.num_incoming_ally[planet.id] || 0;
                planet_num_enemy    = this.num_incoming_enemy[planet.id] || 0;

                this._createDisplay();
                this.skip_incoming_ships[planet.id] = skip_incoming_ships;
                this.incoming_own[planet.id] = incoming_own;
                this.num_incoming_own[planet.id] = num_incoming_own;
                this.incoming_ally[planet.id] = incoming_ally;
                this.num_incoming_ally[planet.id] = num_incoming_ally;
                this.incoming_enemy[planet.id] = incoming_enemy;
                this.num_incoming_enemy[planet.id] = num_incoming_enemy;
                this.planetId = planet.id;

                if(!this.subscribed) {
                    Game.onTick.subscribe(this._updating, this, true);
                    this.subscribed = 1;
                }
                this.Display.show();
                this.Display.bringToTop();
        },

        Show : function(planetId) {
            this.planetId = planetId;
            if(this.Display) {
                this.Display.show();
                this.Display.bringToTop();
            }
        },
        Hide : function() {
            if(this.Display) {
                this.Display.hide();
            }
            delete this.planetId;
        }
    };
    
    Lacuna.Notify = new Notify();
        
})();
YAHOO.register("notify", YAHOO.lacuna.Notify, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/notify.js","/")
},{"buffer":71,"oMfpAn":75}],62:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Profile == "undefined" || !YAHOO.lacuna.Profile) {

(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Profile = function() {
        this.createEvent("onRpc");
        this.id = "profile";

        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);

        this.Dialog = new YAHOO.widget.Dialog(this.id, {
            constraintoviewport:true,
            postmethod:"none",
            buttons:[ { text:"Update", handler:{fn:this.handleUpdate, scope:this}, isDefault:true } ],
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"500px",
            zIndex:9999
        });
        this.Dialog.renderEvent.subscribe(function(){
            this.description = Dom.get("profileDescription");
            this.status = Dom.get("profileStatus");
            this.email = Dom.get("profileEmail");
            this.city = Dom.get("profileCity");
            this.country = Dom.get("profileCountry");
            this.skype = Dom.get("profileSkype");
            this.player_name = Dom.get("profilePlayerName");
            this.skipFacebook = Dom.get("profileSkipFacebookWallPosts");
            this.skipMedal = Dom.get("profileSkipMedal");
            this.skipHappiness = Dom.get("profileSkipHappiness");
            this.skipResource = Dom.get("profileSkipResource");
            this.skipPollution = Dom.get("profileSkipPollution");
            this.skipFoundNothing = Dom.get("profileSkipFoundNothing");
            this.skipExcavatorResources = Dom.get("profileSkipExcavatorResources");
            this.skipExcavatorGlyph = Dom.get("profileSkipExcavatorGlyph");
            this.skipExcavatorPlan = Dom.get("profileSkipExcavatorPlan");
            this.skipExcavatorArtifact = Dom.get("profileSkipExcavatorArtifact");
            this.skipExcavatorDestroyed = Dom.get("profileSkipExcavatorDestroyed");
            this.skipAllExcavator = Dom.get("profileSkipAllExcavator");
            this.skipSpyRecovery = Dom.get("profileSkipSpyRecovery");
            this.skipProbeDetected = Dom.get("profileSkipProbeDetected");
            this.skipAttackMessages = Dom.get("profileSkipAttackMessages");
            this.skipIncomingShips = Dom.get("profileSkipIncomingShips");
            this.skipExcavatorReplaceMsg = Dom.get("profileSkipExcavatorReplaceMsg");
            this.dontReplaceExcavator = Dom.get("profileDontReplaceExcavator");
            Event.on(this.skipFoundNothing, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorResources, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorGlyph, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorPlan, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorArtifact, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorDestroyed, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipAllExcavator").checked = false;
                }
            });
            Event.on(this.skipExcavatorReplaceMsg, 'change', function() {
                if(!this.checked) {
                    Dom.get("profileSkipExcavatorReplaceMsg").checked = false;
                }
            });
            Event.on(this.skipAllExcavator, 'change', function() {
                if(this.checked) {
                    Dom.get("profileSkipFoundNothing").checked = true;
                    Dom.get("profileSkipExcavatorResources").checked = true;
                    Dom.get("profileSkipExcavatorGlyph").checked = true;
                    Dom.get("profileSkipExcavatorPlan").checked = true;
                    Dom.get("profileSkipExcavatorArtifact").checked = true;
                    Dom.get("profileSkipExcavatorDestroyed").checked = true;
                    Dom.get("profileSkipExcavatorReplaceMsg").checked = true;
                }
            });

            this.rpc = Dom.get("profileRpc");

            this.medals = Dom.get("profileMedalsList");
            this.species = Dom.get("profileSpecies");
            this.notes = Dom.get("profileNotes");
            this.sitter_password = Dom.get("profileSitterPassword");
            this.new_password = Dom.get("profileNewPassword");
            this.confirm_password = Dom.get("profileConfirmPassword");
            this.account_tab = Dom.get('detailsAccount');
            Event.on(this.sitter_password, 'focus', function() {
                this.type = 'text';
            });
            Event.on(this.sitter_password, 'blur', function() {
                this.type = 'password';
            });

            this.stopAnim = Dom.get("profileDisableDialogAnim");
            this.showLevels = Dom.get("profileShowBuildingLevels");
            this.hidePlanets = Dom.get("profileHidePlanets");
            this.hideTips = Dom.get("profileHideTips");
            this.assetsPath = Dom.get("assetsPath");

            this.tabView = new YAHOO.widget.TabView("profileTabs");
            //species tab
            this.hasSpecies = false;
            this.tabView.getTab(2).subscribe("activeChange", function(e) {
                if(e.newValue && !this.hasSpecies) {
                    this.hasSpecies = true;
                    var requests = 0;
                    Game.Services.Empire.view_species_stats({session_id:Game.GetSession("")},{
                        success : function(o){
                            YAHOO.log(o, "info", "Profile.show.view_stats.success");
                            this.fireEvent('onRpc', o.result);
                            this.speciesStats = o.result.species;
                            requests++;
                            if (requests == 2) {
                                this.populateSpecies();
                            }
                        },
                        scope:this
                    });
                    Game.Services.Empire.redefine_species_limits({session_id:Game.GetSession("")},{
                        success : function(o){
                            YAHOO.log(o, "info", "Profile.redefine_species_limits.success");
                            this.fireEvent('onRpc', o.result);
                            this.speciesRedefineLimits = o.result;
                            requests++;
                            if (requests == 2) {
                                this.populateSpecies();
                            }
                        },
                        scope:this
                    });
                }
            }, this, true);
            this.tabView.set('activeIndex',0);
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
        }, this, true);
        this.Dialog.render();
        Game.OverlayManager.register(this.Dialog);

        this.speciesId = 'profileSpeciesRedefine';
        var speciesContainer = document.createElement("div");
        speciesContainer.id = this.speciesId;
        Dom.addClass(speciesContainer, Lib.Styles.HIDDEN);
        speciesContainer.innerHTML = [
            '    <div class="hd">Redefine Species</div>',
            '    <div class="bd">',
            '        <div id="profileSpeciesRedefineWarning">',
            '            Changing your species affinities is risky business and will affect the game in many ways you cannot foresee. ',
            '            In addition, you can only change your affinities once per month. Use at your own risk!',
            '        </div>',
            '        <form name="profileSpeciesRedefineForm">',
            '            <div id="profileSpeciesDesigner"></div>',
            '            <div id="profileSpeciesMessage" class="hidden"></div>',
            '        </form>',
            '    </div>',
            '    <div class="ft"></div>'
        ].join('');
        document.body.insertBefore(speciesContainer, document.body.firstChild);
        this.SpeciesDialog = new YAHOO.widget.Dialog(this.speciesId, {
            constraintoviewport:true,
            postmethod:"none",
            buttons:[
                { text:' <img src="'+Lib.AssetUrl+'ui/s/essentia.png" class="smallEssentia" /> Update', handler: { fn: this.redefineSpecies, scope:this }, isDefault:true },
                { text:"Cancel", handler: { fn: function() { this.hide(); } } }
            ],
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            modal:true,
            close:true,
            width:"735px",
            zIndex:99999
        });
        this.SpeciesDialog.renderEvent.subscribe(function(){
            this.SpeciesDesigner = new Lacuna.SpeciesDesigner({ templates : false });
            this.SpeciesDesigner.render('profileSpeciesDesigner');
            Dom.removeClass(this.speciesId, Lib.Styles.HIDDEN);
        }, this, true);
        this.SpeciesDialog.render();
        Game.OverlayManager.register(this.SpeciesDialog);
    };
    Profile.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">Profile</div>',
            '    <div class="bd">',
            '        <form name="profileForm" autocomplete="off">',
            '            <ul id="profileDetails">',
            '                <li><label style="vertical-align:top;" title="The publicly displayed description for your empire.">Description:</label><textarea id="profileDescription" cols="47"></textarea></li>',
            '                <li><label title="What are you doing right now?">Status:</label><input id="profileStatus" maxlength="100" size="50" /></li>',
            '            </ul>',
            '            <div id="profileTabs" class="yui-navset">',
            '                <ul class="yui-nav">',
            '                    <li><a href="#detailsPlayer"><em>Player</em></a></li>',
            '                    <li><a href="#detailsMedals"><em>Medals</em></a></li>',
            '                    <li><a href="#detailsSpecies"><em>Species</em></a></li>',
            '                    <li><a href="#detailsNotes"><em>Notes</em></a></li>',
            '                    <li><a href="#detailsAccount"><em>Account</em></a></li>',
            '                    <li><a href="#detailsBrowser"><em>Browser</em></a></li>',
            '                </ul>',
            '                <div class="yui-content" style="padding:0;">',
            '                    <div id="detailsPlayer">',
            '                        <ul id="profilePlayer" style="overflow:auto">',
            '                            <li><label>Name:<input id="profilePlayerName" /></label></li>',
            '                            <li><label title="Your email is used to recover your password if it is lost, and to send you any unused essentia if you cancel your account.">Email:<input id="profileEmail" /></label></li>',
            '                            <li><label>City:<input id="profileCity" /></label></li>',
            '                            <li><label>Country:<input id="profileCountry" /></label></li>',
            '                            <li><label>Skype:<input id="profileSkype" /></label></li>',
            '                            <li><hr /><div class="yui-g">',
            '                                <div class="yui-u first">',
            '                                    <ul><li><input id="profileSkipFacebookWallPosts" type="checkbox" /> Stop Facebook Wall posts</li>',
            '                                    <li><input id="profileSkipMedal" type="checkbox" /> Stop Medal Messages</li>',
            '                                    <li><input id="profileSkipProbeDetected" type="checkbox" /> Stop Probe Detected</li>',
            '                                    <li><input id="profileSkipSpyRecovery" type="checkbox" /> Stop Spy Recovery Messages</li>',
            '                                    <li><input id="profileSkipResource" type="checkbox" /> Stop Resource Warnings</li>',
            '                                    <li><input id="profileSkipPollution" type="checkbox" /> Stop Pollution Warnings</li>',
            '                                    <li><input id="profileSkipHappiness" type="checkbox" /> Stop Happiness Warnings</li>',
            '                                    <li><input id="profileSkipAttackMessages" type="checkbox" /> Stop Attack Messages</li>',
      '                 <li><input id="profileSkipIncomingShips" type="checkbox" /> Stop Incoming Ships Notification</li>',
      '                 </ul></div>',
      '               <div class="yui-u">',
      '               <ul id="profileCheckboxes">',
            '                                    <li><input id="profileSkipAllExcavator" type="checkbox" /> Stop All Excavator Messages</li>',
            '                                    <li><input id="profileSkipFoundNothing" type="checkbox" /> Stop Excavator Found Nothing</li>',
            '                                    <li><input id="profileSkipExcavatorGlyph" type="checkbox" /> Stop Excavator Glyph</li>',
            '                                    <li><input id="profileSkipExcavatorResources" type="checkbox" /> Stop Excavator Resources</li>',
            '                                    <li><input id="profileSkipExcavatorPlan" type="checkbox" /> Stop Excavator Plan</li>',
            '                                    <li><input id="profileSkipExcavatorArtifact" type="checkbox" /> Stop Excavator Artifact</li>',
            '                                    <li><input id="profileSkipExcavatorDestroyed" type="checkbox" /> Stop Excavator Destroyed</li>',
            '                                    <li><input id="profileSkipExcavatorReplaceMsg" type="checkbox" /> Stop Excavator Replace Alert</li>',
            '                                    <li><input id="profileDontReplaceExcavator" type="checkbox" /> Do not replace Excavator automatically</li>',
      '               </ul></div>',
            '                            </div></li>',
            '                            <li><hr />Today\'s RPC Usage:<span id="profileRpc" style="margin-left:5px;"></span></li>',
            '                        </ul>',
            '                    </div>',
            '                    <div id="detailsMedals">',
            '                        <div>Select the medals to display on your profile :</div>',
            '                        <ul id="profileMedalsList" style="overflow:auto;">',
            '                        </ul>',
            '                    </div>',
            '                    <div id="detailsSpecies">',
            '                        <ul id="profileSpecies" style="overflow:auto;">',
            '                        </ul>',
            '                    </div>',
            '                    <div id="detailsNotes">',
            '                        <textarea id="profileNotes" title="Write down anything you would like to store with your account."></textarea>',
            '                    </div>',
            '                    <div id="detailsAccount">',
            '                        <ul>',
            '                            <li><label title="The sitter password can be used to allow others to log in to your account to help you manage it, but doesn\'t allow access edit your profile or delete the account.">Sitter Password:<input id="profileSitterPassword" type="password" /></label></li>',
            '                        </ul>',
            '                        <hr />',
            '                        <ul>',
            '                            <li style="text-align: center; margin-bottom: 2px;">Change Account Password:</li>',
            '                            <li><label>New Password:<input id="profileNewPassword" type="password" /></label></li>',
            '                            <li><label>Confirm:<input id="profileConfirmPassword" type="password" /></label></li>',
            '                        </ul>',
            '                    </div>',
            '                    <div id="detailsBrowser">',
            '                        <ul>',
            '                            <li><input id="profileDisableDialogAnim" type="checkbox" /> Stop Dialog Animation</li>',
            '                            <li><input id="profileShowBuildingLevels" type="checkbox" /> Always Show Building Levels</li>',
            '                            <li><input id="profileHidePlanets" type="checkbox" /> Hide Planet Images in Star Map</li>',
            '                            <li><input id="profileHideTips" type="checkbox" /> Hide Tips at Login</li>',
            '                            <li>Assets Path: (Note: make sure it ends in a file separator.)</li>',
            '                            <li><input id="assetsPath" type="text" placeholder="Assets URL" /></li>',
            '                        </ul>',
            '                    </div>',
            '                </div>',
            '            </div>',
            '        </form>',
            '    </div>',
            '    <div class="ft"></div>'
            ].join('');
        },
        handleUpdate : function() {
            var updatesLeft = 1;
            if (this.new_password.value != "") {
                if (this.new_password.value != this.confirm_password.value) {
                    alert("Passwords don't match!");
                    this.tabView.set('activeIndex', 4);
                    this.confirm_password.focus();
                    return;
                }
                else {
                    updatesLeft++;
                    Game.Services.Empire.change_password({
                            session_id:Game.GetSession(""),
                            password1:this.new_password.value,
                            password2:this.confirm_password.value
                        },{
                        success : function(o){
                            YAHOO.log(o, "info", "Profile.handleUpdate.password.success");
                            Dom.removeClass(this.account_tab, 'password-changed');
                            if (--updatesLeft == 0) {
                                this.hide();
                            }
                        },
                        failure : function(o){
                            this.tabView.set('activeIndex', 4);
                            this.new_password.focus();
                            return true;
                        },
                        scope:this
                    });
                }
            }

            var pmc = Sel.query("li", "profileMedalsList"),
                publicMedals = [];
            for(var i=0; i<pmc.length; i++){
                if(Sel.query('input[type="checkbox"]', pmc[i], true).checked) {
                    publicMedals.push(pmc[i].MedalId);
                }
            }

            if(Game.GetCookieSettings("disableDialogAnim","0") != (this.stopAnim.checked ? "1" : "0")) {
                var newEffect;
                if(this.stopAnim.checked) {
                    Game.SetCookieSettings("disableDialogAnim","1");
                }
                else {
                    Game.RemoveCookieSettings("disableDialogAnim");
                    newEffect = Game.GetContainerEffect();
                }
                var cs = Game.OverlayManager.overlays;
                for(var m=0; m<cs.length; m++) {
                    cs[m].cfg.setProperty("effect",newEffect);
                }
            }
            if(Game.GetCookieSettings("showLevels","0") != (this.showLevels.checked ? "1" : "0")) {
                if(this.showLevels.checked) {
                    Game.SetCookieSettings("showLevels","1");
                }
                else {
                    Game.RemoveCookieSettings("showLevels");
                }
                var levels = Sel.query("#planetMap .tileContainer .planetMapTileActionLevel");
                for(var n=0; n<levels.length; n++) {
                    Dom.setStyle(levels[n].parentNode, "visibility", this.showLevels.checked ? "visible" : "");
                }
            }
            if(Game.GetCookieSettings("hidePlanets","0") != (this.hidePlanets.checked ? "1" : "0")) {
                if(this.hidePlanets.checked) {
                    Game.SetCookieSettings("hidePlanets","1");
                }
                else {
                    Game.RemoveCookieSettings("hidePlanets");
                }
                if(YAHOO.lacuna.MapStar.IsVisible()){
                    YAHOO.lacuna.MapStar._map.hidePlanets = Game.GetCookieSettings("hidePlanets", 0)*1;
                    YAHOO.lacuna.MapStar._map.redraw();
                }
            }
            if(Game.GetCookieSettings("hideTips","0") != (this.hideTips.checked ? "1" : "0")) {
                if(this.hideTips.checked) {
                    Game.SetCookieSettings("hideTips","1");
                }
                else {
                    Game.RemoveCookieSettings("hideTips");
                }
            }

            if (Game.GetCookieSettings("assetsPath") != this.assetsPath.value) {
                Game.SetCookieSettings('assetsPath', this.assetsPath.value);
                Lib.AssetUrl = this.assetsPath.value;
            }

            Game.Services.Empire.edit_profile({
                    session_id:Game.GetSession(""),
                    profile:{
                        description:this.description.value,
                        status_message:this.status.value,
                        email:this.email.value,
                        city:this.city.value,
                        country:this.country.value,
                        skype:this.skype.value,
                        player_name:this.player_name.value,
                        notes:this.notes.value,
                        sitter_password:this.sitter_password.value,
                        public_medals:publicMedals,
                        skip_happiness_warnings:this.skipHappiness.checked ? 1 : 0,
                        skip_resource_warnings:this.skipResource.checked ? 1 : 0,
                        skip_pollution_warnings:this.skipPollution.checked ? 1 : 0,
                        skip_medal_messages:this.skipMedal.checked ? 1 : 0,
                        skip_facebook_wall_posts:this.skipFacebook.checked ? 1 : 0,
                        skip_found_nothing:this.skipFoundNothing.checked ? 1 : 0,
                        skip_excavator_resources:this.skipExcavatorResources.checked ? 1 : 0,
                        skip_excavator_glyph:this.skipExcavatorGlyph.checked ? 1 : 0,
                        skip_excavator_plan:this.skipExcavatorPlan.checked ? 1 : 0,
                        skip_excavator_artifact:this.skipExcavatorArtifact.checked ? 1 : 0,
                        skip_excavator_destroyed:this.skipExcavatorDestroyed.checked ? 1 : 0,
                        skip_excavator_replace_msg:this.skipExcavatorReplaceMsg.checked ? 1 : 0,
                        dont_replace_excavator:this.dontReplaceExcavator.checked ? 1 : 0,
                        skip_spy_recovery:this.skipSpyRecovery.checked ? 1 : 0,
                        skip_probe_detected:this.skipProbeDetected.checked ? 1 : 0,
                        skip_attack_messages:this.skipAttackMessages.checked ? 1 : 0,
                        skip_incoming_ships:this.skipIncomingShips.checked ? 1 : 0
                    }
                },{
                success : function(o){
                    YAHOO.log(o, "info", "Profile.handleUpdate.success");
                    if (--updatesLeft == 0) {
                        this.hide();
                    }
                },
                scope:this
            });
        },
        show : function() {
            //this is called out of scope so make sure to pass the correct scope in
            Game.Services.Empire.view_profile({session_id:Game.GetSession("")},{
                success : function(o){
                    YAHOO.log(o, "info", "Profile.show.view_profile.success");
                    this.fireEvent('onRpc', o.result);
                    this.populateProfile(o.result);
                },
                scope:Lacuna.Profile
            });
            Game.OverlayManager.hideAll();
            Lacuna.Profile.tabView.set('activeIndex',0);
            Lacuna.Profile.Dialog.center();
            Lacuna.Profile.Dialog.show();
        },
        hide : function() {
            this.Dialog.hide();
        },

        populateProfile : function(results) {
            var p = results.profile;
            this.description.value = p.description;
            this.status.value = p.status_message;
            this.email.value = p.email;
            this.city.value = p.city;
            this.country.value = p.country;
            this.skype.value = p.skype;
            this.player_name.value = p.player_name;

            this.skipFacebook.checked = p.skip_facebook_wall_posts == "1";
            this.skipMedal.checked = p.skip_medal_messages == "1";
            this.skipHappiness.checked = p.skip_happiness_warnings == "1";
            this.skipResource.checked = p.skip_resource_warnings == "1";
            this.skipPollution.checked = p.skip_pollution_warnings == "1";
            this.skipFoundNothing.checked = p.skip_found_nothing == "1";
            this.skipExcavatorResources.checked = p.skip_excavator_resources == "1";
            this.skipExcavatorGlyph.checked = p.skip_excavator_glyph == "1";
            this.skipExcavatorPlan.checked = p.skip_excavator_plan == "1";
            this.skipExcavatorArtifact.checked = p.skip_excavator_artifact == "1";
            this.skipExcavatorDestroyed.checked = p.skip_excavator_destroyed == "1";
            this.skipSpyRecovery.checked = p.skip_spy_recovery == "1";
            this.skipProbeDetected.checked = p.skip_probe_detected == "1";
            this.skipAttackMessages.checked = p.skip_attack_messages == "1";
            this.skipIncomingShips.checked = p.skip_incoming_ships == "1";
            this.skipExcavatorReplaceMsg.checked = p.skip_excavator_replace_msg == "1";
            this.dontReplaceExcavator.checked = p.dont_replace_excavator == "1";
            this.skipAllExcavator.checked = this.skipFoundNothing.checked &&
                                      this.skipExcavatorResources.checked &&
                                      this.skipExcavatorGlyph.checked &&
                                            this.skipExcavatorPlan.checked &&
                                            this.skipExcavatorArtifact.checked &&
                                            this.skipExcavatorDestroyed.checked &&
                                      this.skipExcavatorReplaceMsg.checked;

            this.stopAnim.checked = Game.GetCookieSettings("disableDialogAnim","0") == "1";
            this.showLevels.checked = Game.GetCookieSettings("showLevels","0") == "1";
            this.hidePlanets.checked = Game.GetCookieSettings("hidePlanets","0") == "1";
            this.hideTips.checked = Game.GetCookieSettings("hideTips","0") == "1";
            this.assetsPath.value = Game.GetCookieSettings("assetsPath") || '';

            this.rpc.innerHTML = [(Game.EmpireData.rpc_count || 0), ' / ', (Game.ServerData.rpc_limit || 0)].join('');

            this.notes.value = p.notes;
            this.sitter_password.value = p.sitter_password;
            this.sitter_password.type = "password";
            this.new_password.value =
                this.confirm_password.value = "";
            Dom.removeClass(this.account_tab, 'password-changed');

            var frag = document.createDocumentFragment(),
                li = document.createElement('li');
            for(var id in p.medals) {
                if(p.medals.hasOwnProperty(id)) {
                    var medal = p.medals[id],
                        nLi = li.cloneNode(false);

                    Dom.addClass(nLi, "medal");
                    nLi.MedalId = id;
                    nLi.innerHTML = [
                    '    <div class="medalPublic"><input type="checkbox"', (medal["public"] == "1" ? ' checked' : ''), ' /></div>',
                    '    <div class="medalContainer">',
                    '        <img src="',Lib.AssetUrl,'medal/',medal.image,'.png" alt="',medal.name,'" title="',medal.name,' on ',Lib.formatServerDate(medal.date),'" />',
                    '    </div>'
                    ].join('');

                    frag.appendChild(nLi);
                }
            }

            this.medals.innerHTML = "";
            this.medals.appendChild(frag);

            var Ht = Game.GetSize().h - 195;
            if(Ht > 270) { Ht = 270; }
            Dom.setStyle('profilePlayer', 'height', Ht + 'px');
            Dom.setStyle(this.notes, 'height', Ht + 'px');
            Dom.setStyle(this.medals, 'height', Ht + 'px');

            this.Dialog.center();
        },
        populateSpecies : function() {
            var frag = document.createDocumentFragment(),
                li = document.createElement('li');
            stat = this.speciesStats;

            var nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Name</label>',
                '<span>', stat.name, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Description</label>',
                '<span>', stat.description, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Habitable Orbits</label>',
                '<span>', stat.min_orbit,
                stat.max_orbit > stat.min_orbit ? ' to '+ stat.max_orbit : '',
                '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Manufacturing</label>',
                '<span>', stat.manufacturing_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Deception</label>',
                '<span>', stat.deception_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Research</label>',
                '<span>', stat.research_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Management</label>',
                '<span>', stat.management_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Farming</label>',
                '<span>', stat.farming_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Mining</label>',
                '<span>', stat.mining_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Science</label>',
                '<span>', stat.science_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Environmental</label>',
                '<span>', stat.environmental_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Political</label>',
                '<span>', stat.political_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Trade</label>',
                '<span>', stat.trade_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            nLi.innerHTML = [
                '<label>Growth</label>',
                '<span>', stat.growth_affinity, '</span>'
            ].join('');
            frag.appendChild(nLi);

            nLi = li.cloneNode(false);
            Dom.addClass(nLi, 'profileSpeciesRedefineButton');
            var redefineButton = document.createElement('button');
            redefineButton.innerHTML = [
                this.speciesRedefineLimits.essentia_cost,
                ' <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia smallImg" /> Redefine Species'
            ].join('');
            nLi.appendChild(redefineButton);
            frag.appendChild(nLi);

            Event.on(redefineButton, 'click', this.showSpeciesRedefine, this, true);

            this.species.innerHTML = "";
            this.species.appendChild(frag);
            var Ht = Game.GetSize().h - 180;
            if(Ht > 290) { Ht = 290; }
            Dom.setStyle(this.species, 'height', Ht + 'px');
        },
        showSpeciesRedefine : function(e) {
            Event.stopEvent(e);
            if (this.speciesRedefineLimits.can) {
                this.Dialog.hide();
                this.SpeciesDesigner.setSpeciesData(this.speciesStats);
                if (this.SpeciesDesigner.needsExpert(this.speciesStats)) {
                    this.SpeciesDesigner.setExpert();
                }
                this.SpeciesDesigner.setSpeciesLocks(this.speciesRedefineLimits);
                this.SpeciesDialog.getButtons()[0].innerHTML = [this.speciesRedefineLimits.essentia_cost,' <img src="',Lib.AssetUrl,'ui/s/essentia.png" class="smallEssentia smallImg" /> Update'].join('');
                this.SpeciesDialog.show();
            }
            else {
                alert("Can't redefine species: " + this.speciesRedefineLimits.reason);
            }
        },
        redefineSpecies : function() {
            var data = this.SpeciesDesigner.getSpeciesData();
            if (this.SpeciesDesigner.compareSpeciesData(data, this.speciesStats)) {
                this.SpeciesDialog.hide();
                return;
            }
            try {
                if ( ! this.SpeciesDesigner.validateSpecies(data) ) {
                    return;
                }
            }
            catch (e) {
                alert(e);
                return;
            }
            Lacuna.Pulser.Show();
            Game.Services.Empire.redefine_species({session_id:Game.GetSession(""), params:data},{
                success : function(o){
                    YAHOO.log(o, "info", "Profile.redefine_species.success");
                    Lacuna.Pulser.Hide();
                    this.hasSpecies = false;
                    this.SpeciesDialog.hide();
                    this.fireEvent('onRpc', o.result);
                },
                scope:this
            });
        }
    };
    Lang.augmentProto(Profile, Util.EventProvider);

    Lacuna.Profile = new Profile();
})();
YAHOO.register("profile", YAHOO.lacuna.Profile, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/profile.js","/")
},{"buffer":71,"oMfpAn":75}],63:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");
 
if (typeof YAHOO.lacuna.Pulse == "undefined" || !YAHOO.lacuna.Pulse) {

(function(){
    var Pulse = function() {        
        var panel = new YAHOO.widget.Panel("pulsing", {
            fixedcenter:true,
            close:false,
            underlay:"none",
            draggable:false, 
            //effect:{effect:YAHOO.widget.ContainerEffect.FADE,duration:0.2},
            modal:false,
            visible:false,
            width:"100px"
        });
        YAHOO.util.Dom.removeClass("pulsing", "hidden");
        panel.render();
        this._panel = panel;
        this.counter = 0;
    };
    Pulse.prototype = {
        Show : function() {
            this._panel.bringToTop();
            this._panel.show();
            //this.counter++;
        },
        
        Hide : function() {
            //this.counter--;
            //if(this.counter <= 0) {
            //    this.counter = 0;
                this._panel.hide();
            //}
        }
    };
    YAHOO.lacuna.Pulse = Pulse;
})();
YAHOO.register("pulse", YAHOO.lacuna.Pulse, {version: "1.0.1", build: "2"});


}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/pulse.js","/")
},{"buffer":71,"oMfpAn":75}],64:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
* Code taken from inputEx's  (http://javascript.neyric.com/inputex/) rpc library and slightly modified
*/

YAHOO.namespace("rpc");

if (typeof YAHOO.rpc.Service == "undefined" || !YAHOO.rpc.Service) {

(function() {

    var Lang = YAHOO.lang, 
        Util = YAHOO.util;

    var Service = function(smd, callback, baseUrl) {

       if( Lang.isString(smd) ) {
          this.smdUrl = smd;
          this.fetch(smd, callback);
       }
       else if( Lang.isObject(smd) ) {
          this._smd = smd;
          this._baseUrl = baseUrl;
          this.process(callback);
       }
       else {
          throw new Error("smd should be an object or an url");
       }
       
    };

    Service.prototype = {
       
        /**
        * Generate the function from a service definition
        * @method _generateService
        * @param {String} serviceName
        * @param {Method definition} method
        */
        _generateService: function(serviceName, method) {

            if(this[method]){
                throw new Error("WARNING: " + serviceName + " already exists for service. Unable to generate function");
            }
            method.name = serviceName;

            var self = this;
            var func = function(oParams, opts) {
                // Note: oParams = Object Parameters.
                var smd = self._smd;
                var baseUrl = self._baseUrl;
                
                var envelope = YAHOO.rpc.Envelope[method.envelope || smd.envelope];

                var callback = {
                    success: function(o) {
                        //YAHOO.log(o, "debug", "RPC.SUCCESS"); //debug
                        var results = envelope.deserialize(o);
                        opts.success.call(opts.scope || self, results);
                    },
                    failure: function(o) {
                        //YAHOO.log(o, "debug", "RPC.FAILURE"); //debug
                        if (Lang.isFunction(opts.failure) ) {
                            var results;
                            try {
                                results = envelope.deserialize(o);
                            }
                            catch(e) {
                                results = o;
                            }
                            opts.failure.call(opts.scope || self, results);
                        }
                    },
                    scope: self
                };
                
                if (opts.timeout) {
                    callback.timeout = opts.timeout;
                }

                var params = [], p;

                // Handle any SMD parameters.
                if (smd.additionalParameters && Lang.isArray(smd.parameters)) {
                    for (var i = 0; i < smd.parameters.length; i++) {
                        p = smd.parameters[i];
//                        console.log('smd.parameters[i]'); //debug
//                        console.log( smd.parameters[i] ); //debug
                        params.push(p["default"]);
                    }
                }

                // Then make sure that all the other params are in order.
                for (var i = 0; i < method.parameters.length; i++) {
                    params.push(oParams[method.parameters[i].name]);
                }

                // Now make sure that it all came out right.
                if (params) {
                    if (!params[0] || params[0].name == 'args') {
                        params = oParams;
                    }
                }
                else {
                    params = oParams;
                }

//                console.log('Calling ' + method.name + ' with the parameters of ' + Lang.JSON.stringify(params) + '.'); //debug
                var url = opts.target || method.target || smd.target;
                var urlRegexp = /^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(([0-9]{1,5})?\/.*)?$/i;
               
                   if(smd.target && !url.match(urlRegexp) && url != smd.target) {
                    url = smd.target+url;
                }

                if (!!this.smdUrl && !url.match(urlRegexp)) {
                    // URL is still relative !
                    var a=this.smdUrl.split('/');
                    a[a.length-1]="";
                    url = a.join("/")+url;
                }
                else if (baseUrl) {
                    baseUrl = baseUrl.replace(/\/?$/,'/');
                    url = url.replace(/^\//, baseUrl);
                }

                var r = {
                    target: url,
                    callback: callback,
                    data: params,
                    origData: oParams,
                    opts: opts,
                    callbackParamName: method.callbackParamName || smd.callbackParamName,
                    transport: method.transport || smd.transport
                };

                //YAHOO.log('Sending ' + r.data + '.', 'debug', 'RPC._generateService');//debug

                var serialized = envelope.serialize(smd, method, params);
                Lang.augmentObject(r, serialized, true);
                
                return YAHOO.rpc.Transport[r.transport].call(self, r); 
            };
        
            func.name = serviceName;
            func.description = method.description;
            func._parameters = method.parameters;
            
            return func;

        },
       
        /**
        * Process the SMD definition.
        * @method process
        */
        process: function(callback) {

            var serviceDefs = this._smd.services;

            // Generate the methods to this object
            for(var serviceName in serviceDefs){
                if( serviceDefs.hasOwnProperty(serviceName) ) {

                    // Get the object that will contain the method.
                    // handles "namespaced" services by breaking apart by '.'
                    var current = this;
                    var pieces = serviceName.split("."); 
                    for(var i=0; i< pieces.length-1; i++){
                        current = current[pieces[i]] || (current[pieces[i]] = {});
                    }

                    current[pieces[pieces.length-1]] =    this._generateService(serviceName, serviceDefs[serviceName]);
                }
            }

            // call the success handler
            if(Lang.isObject(callback) && Lang.isFunction(callback.success)) {
                callback.success.call(callback.scope || this);
            }

        },

        /**
        * Download the SMD at the given url
        * @method fetch
        * @param {String} Absolute or relative url
        */
        fetch: function(url, callback) {
            if(YAHOO.rpc.Service._smdCache[url]) {
                this._smd = YAHOO.rpc.Service._smdCache[url];
                this.process(callback);
            }
            else {
                // TODO: if url is not in the same domain, we should use jsonp !
                Util.Connect.asyncRequest('GET', url, { 
                    success: function(o) {
                        try {
                            this._smd = Lang.JSON.parse(o.responseText);
                            YAHOO.rpc.Service._smdCache[url] = this._smd;
                            this.process(callback);
                        }
                        catch(ex) {
                            //YAHOO.log(ex);
                            if( Lang.isFunction(callback.failure) ) {
                                callback.failure.call(callback.scope || this, {error: ex});
                            }
                        }
                    }, 
                    failure: function(o) {
                        if( Lang.isFunction(callback.failure) ) {
                            callback.failure.call(callback.scope || this, {error: "unable to fetch url "+url});
                        }
                    },
                    scope: this
                });
            }
        }

    };

    Service._smdCache = {}; //collection of smd objects by URL
    Service._requestId = 1;


    /**
     * YAHOO.rpc.Transport
     * @class YAHOO.rpc.Transport
     * @static
     */
    YAHOO.rpc.Transport = {
        /**
        * Build a ajax request using 'POST' method
        * @method POST
        * @param {Object} r Object specifying target, callback and data attributes
        */
        "POST": function(r) {
            return Util.Connect.asyncRequest('POST', r.target, r.callback, r.data );
        },

        /**
        * Build a ajax request using 'GET' method
        * @method GET
        * @param {Object} r Object specifying target, callback and data attributes
        */
        "GET": function(r) {
            return Util.Connect.asyncRequest('GET', r.target + (r.data ? '?'+r.data : ''), r.callback, '');
        },


        jsonp_id: 0,
        /**
        * Receive data through JSONP (insert a script tag within the page)
        * @method JSONP
        * @param {Object} r Object specifying target, callback and data attributes
        */
        "JSONP": function(r) {
            r.callbackParamName = r.callbackParamName || "callback";
            var fctName = encodeURIComponent("YAHOO.rpc.Transport.JSONP.jsonpCallback"+YAHOO.rpc.Transport.jsonp_id);
            YAHOO.rpc.Transport.JSONP["jsonpCallback"+YAHOO.rpc.Transport.jsonp_id] = function(results) {
                if(Lang.isObject(r.callback) && Lang.isFunction(r.callback.success)) {
                    r.callback.success.call(r.callback.scope || this, results);
                }
            };
            YAHOO.rpc.Transport.jsonp_id+=1;
            return Util.Get.script( r.target + ((r.target.indexOf("?") == -1) ? '?' : '&') + r.data + "&"+r.callbackParamName+"="+fctName);
        }   
    };


    /**
     * YAHOO.rpc.Envelope
     * @class YAHOO.rpc.Envelope
     * @static
     */
    YAHOO.rpc.Envelope = {
        /**
        * JSON-RPC-2.0 envelope
        * @class YAHOO.rpc.Envelope.JSON-RPC-2.0
        * @static
        */
        "JSON-RPC-2.0": {
            /**
            * serialize
            */
            serialize: function(smd, method, data) {            
                return {
                    data: Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": method.name,
                        "jsonrpc": "2.0",
                        "params": data
                    })
                };   
            },
            /**
            * deserialize
            */
            deserialize: function(results) {
                if(results.getResponseHeader && (results.getResponseHeader["Content-Type"] == "application/json-rpc" || results.getResponseHeader["Content-Type"] == "application/json")) {
                    return Lang.JSON.parse(results.responseText);
                }
                else {
                    if(results.status == -1) {
                        return {"error":{"message":"The Request has been Aborted because it was taking too long."}};
                    }
                    else if(results.status === 0) {
                        return {"error":{"message":"Communication with the server has been interrupted for an unknown reason."}};
                    }
                    else {
                        // YUI loses headers for Cross-Origin requests, so try as JSON anyway
                        try {
                            return Lang.JSON.parse(results.responseText);
                        }
                        catch(e) {
                            return {"error":{"message":"Response Content-Type is not JSON"}};
                        }
                    }
                }
            }
        }
       
    };

    //set connects post header to json
    Util.Connect.setDefaultPostHeader("application/json");
    Util.Connect.setDefaultPostHeader(true);
    //assign to global
    YAHOO.rpc.Service = Service;
    
})();
YAHOO.register("rpc", YAHOO.rpc.Service, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/rpc.js","/")
},{"buffer":71,"oMfpAn":75}],65:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");
if (typeof YAHOO.lacuna.SMD == "undefined" || !YAHOO.lacuna.SMD) {
        
(function(){
    var smd = {
        Alliance : {
            "SMDVersion":"2.0",
            "description": "Body",
            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/alliance",

            "services": {
                "find" : {
                    "description": "Find an alliance by name. Returns a hash reference containing alliance ids and alliance names",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "view_profile" : {
                    "description": "Provides a list of the data that's publicly known about this alliance.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"alliance_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                }
            }
        },
        Body : {
            "SMDVersion":"2.0",
            "description": "Body",
            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/body",

            "services": {
                "abandon" : {
                    "description": "Abandon's a colony, and destroys everything on the planet.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_buildings" : {
                    "description": "Retrieves a list of the buildings on a planet.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_buildable" : {
                    "description": "Provides a list of all the building types that are available to be built on a given space on a planet.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false},
                        {"name":"x", "type":"string", "optional":false},
                        {"name":"y", "type":"string", "optional":false},
                        {"name":"tag", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_build_queue" : {
                    "description": "Returns a list of the buildings being constructed or upgraded",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_body_status" : {
                    "description" : "Retrieves the status of a body to display in the star map.",
                    "parameters" : [{"name":"args", "type":"object", "optional":false}],
                    "returns" : {"type" : "object"}
                },
                "get_status" : {
                    "description": "Returns detailed statistics about a planet.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "rename" : {
                    "description": "Renames a body, provided the empire attached to the session owns the body. Returns a 1 on success.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"body_id", "type":"string", "optional":false},
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                }

            }
        },
        Buildings : {
            Generic : {
                "SMDVersion":"2.0",
                "description": "Buildings",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                //Target will be passed in "target":"/buildings",

                "services": {
                    "build" : {
                        "description": "Adds this building to the planet's build queue.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"planet_id", "type":"string", "optional":false},
                            {"name":"x", "type":"string", "optional":false},
                            {"name":"y", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "demolish" : {
                        "description": "Allows you to instantly destroy a building provided it wouldn't put you into a negative resource production situation. For example, if you're producing only a net positive of 100 food per hour, and you destroy a corn field that would take away 200 food per hour, then the game won't allow you to demolish that building.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "downgrade" : {
                        "description": "Downgrades a building by one level and then returns view.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view" : {
                        "description": "Retrieves the properties of the building.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "upgrade" : {
                        "description": "Adds the requested upgrade to the build queue. On success returns the view() method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "repair" : {
                        "description": "Repair buildings Efficiency to 100%",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Archaeology : {
                "SMDVersion":"2.0",
                "description": "Archaeology Ministry",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/archaeology",
                
                "services": {
                    "search_for_glyph" : {
                        "description": "Searches through ore looking for glyphs left behind by the ancient race. Takes 10,000 of one type of ore to search.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ore_type", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_glyph_summary" : {
                        "description": "Returns a list of glyphs that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_glyphs" : {
                        "description": "Returns a list of glyphs that have been found by this archaeology ministry.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "assemble_glyphs" : {
                        "description": "Turns glyphs into rare ancient items.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"glyphs", "type":"array", "optional":false},
                            {"name":"quantity", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "item_name" : "Volcano"
                         }
                        */
                    },
                    "get_ores_available_for_processing" : {
                        "description": "Returns a list of ore names that the user has enough of to process for glyphs.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "ore" : {
                                "bauxite" : 39949,
                                "gold" : 19393
                            }
                         }
                        */
                    },
                    "subsidize_search" : {
                        "description": "Will spend 2 essentia to complete the current glyph search immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_excavators" : {
                        "description": "Returns a list of the excavators currently controlled by this ministry.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "max_excavators" : 1,
                            "excavators" : [
                                {
                                    "id" : "id-goes-here",
                                    "artifact" : 15, //Percentage chances
                                    "glyph" : 16,
                                    "plan" : 15,
                                    "resource" : 60,
                                    "body" : {
                                        "id" : "id-goes-here",
                                        "name" : "Kuiper",
                                                                                ...
                                    },
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "abandon_excavator" : {
                        "description": "Close down an existing excavator site.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"excavator_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} //status
                    }
                    
                }
            },
            BlackHoleGenerator : {
                "SMDVersion":"2.0",
                "description": "Black Hole Generator",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/blackholegenerator",
                
                "services": {
                    "get_actions_for" : {
                        "description": "Provides a list of actions that the BHG can do. Use with generate_singularity.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target", "type":"object", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "generate_singularity" : {
                        "description": "Performs action on specified target.",
                        "parameters": [
                            {"name":"params", "type":"object", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_cooldown" : {
                        "description": "Will spend 2 essentia to cool down the BHG immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
                        },
            Capitol : {
                "SMDVersion":"2.0",
                "description": "Capitol",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/capitol",
                
                "services": {
                    "rename_empire" : {
                        "description": "Spend some essentia to rename your empire.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Development : {
                "SMDVersion":"2.0",
                "description": "Development Ministry",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/development",
                
                "services": {
                    "subsidize_one_build" : {
                        "description": "Instantly finish any one building on the build queue.",
                        "parameters": [{"name":"args", "type":"object", "optional":false}],
                        "returns":{"type":"object"}
                    },
                    "cancel_build" : {
                        "description": "Cancel any one building on the build queue.",
                        "parameters": [{"name":"args", "type":"object", "optional":false}],
                        "returns":{"type":"object"}
                    },
                    "subsidize_build_queue" : {
                        "description": "Allows a player to instantly finish all buildings in their build queue. The cost is returned by the view method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            DistributionCenter : {
                "SMDVersion":"2.0",
                "description": "Distribution Center",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/distributioncenter",
                
                "services": {
                    "reserve" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"resources", "type":"array", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "release_reserve" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_stored_resources" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Embassy : {
                "SMDVersion":"2.0",
                "description": "Embassy",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/embassy",
                
                "services": {
                    "create_alliance" : {
                        "description": "Create a new alliance. Returns the same output as get_alliance_status.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        /*
                        # create_alliance ( session_id, building_id, name )

                            * session_id
                            * building_id
                            * name
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "dissolve_alliance" : {
                        "description": "Can only be called by alliance leader. Disbands and existing alliance.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        /*
                        # dissolve_alliance ( session_id, building_id )

                            * session_id
                            * building_id 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "get_alliance_status" : {
                        "description": "Returns everything about an alliance that members should know.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        /*
                        # get_alliance_status ( session_id, building_id )

                            * session_id
                            * building_id 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "alliance" : {
                                "id" : "id-goes-here",
                                "name" : "United Federation of Planets",
                                "members" : [
                                    {
                                        "empire_id" : "id goes here",
                                        "name" : "Klingons",
                                    }
                                    ...
                                ],
                                "leader_id" : "id goes here",
                                "forum_uri" : "http://forum.example.com/",
                                "description" : "This is public information.",
                                "announcements" : "This is private information.",
                                "date_created" : "01 31 2010 13:09:05 +0600"
                             }
                         }
                        */
                    },
                    "send_invite" : {
                        "description": "Can only be called by alliance leader. Invite an empire to an alliance.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"invitee_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # send_invite ( session_id, building_id, invitee_id, [ message ] )

                            * session_id
                            * building_id
                            * invitee_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "withdraw_invite" : {
                        "description": "Can only be called by alliance leader. Delete an invitation.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"invite_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # withdraw_invite ( session_id, building_id, invite_id, [ message ] )

                            * session_id
                            * building_id
                            * invite_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "accept_invite" : {
                        "description": "Accept an invitation. Returns the same output as get_alliance_status.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"invite_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # accept_invite ( session_id, building_id, invite_id, [ message ] )

                            * session_id
                            * building_id
                            * invite_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "get_alliance_status" : { ... },
                         }
                        */
                    },
                    "reject_invite" : {
                        "description": "Delete an invitation.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"invite_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # reject_invite ( session_id, building_id, invite_id, [ message ] )

                            * session_id
                            * building_id
                            * invite_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "get_pending_invites" : {
                        "description": "Can only be called by the alliance leader. Returns a list of invitations that have been sent out, but that have not been accepted, rejected, or withdrawn.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        /*
                        # get_pending_invites ( session_id, building_id )

                            * session_id
                            * building_id 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "invites" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "The Borg",
                                    "empire_id" : "id-goes-here"
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "get_my_invites" : {
                        "description": "Returns a list of invitations that have been offered to this empire.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        /*
                        # get_my_invites ( session_id, building_id )

                            * session_id
                            * building_id 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "invites" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "United Federation of Planets",
                                    "alliance_id" : "id-goes-here"
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "assign_alliance_leader" : {
                        "description": "Sets a new empire to lead the alliance. Can only be called by the current alliance leader. Returns the same thing as get_alliance_status.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"new_leader_id", "type":"string", "optional":false}
                        ],
                        /*
                        # assign_alliance_leader ( session_id, building_id, new_leader_id )

                            * session_id
                            * building_id
                            * new_leader_id 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "get_alliance_status" : { ... },
                         }
                        */
                    },
                    "update_alliance" : {
                        "description": "Updates the properties of an alliance. Returns the same thing as get_alliance_status. Can only be called by the alliance leader.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"params", "type":"object", "optional":false}
                        ],
                        /*
                        # update_alliance ( session_id, building_id, params )

                            * session_id
                            * building_id
                            * params 
                                - forum_uri
                                - description
                                - announcements
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "get_alliance_status" : { ... },
                         }
                        */
                    },
                    "leave_alliance" : {
                        "description": "A member of an alliance revokes their own membership.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # leave_alliance ( session_id, building_id, [ message ] )

                            * session_id
                            * building_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                         }
                        */
                    },
                    "expel_member" : {
                        "description": "Forcibly removes a member from an alliance. Returns the same thing as get_alliance_status. Can only be called by the alliance leader.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"empire_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        /*
                        # expel_member ( session_id, building_id, empire_id, [ message ] )

                            * session_id
                            * building_id
                            * empire_id
                            * message 
                        */
                        "returns":{"type":"object"}
                        /*
                         {
                            "get_alliance_status" : { ... },
                         }
                        */
                    },
                    "view_stash" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "donate_to_stash" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"donation", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "exchange_with_stash" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"donation", "type":"string", "optional":false},
                            {"name":"request", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            EnergyReserve : {
                "SMDVersion":"2.0",
                "description": "Energy Reserve",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/energyreserve",

                "services": {
                    "dump" : {
                        "description": "Converts energy into waste",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"amount", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Entertainment : {
                "SMDVersion":"2.0",
                "description": "Entertainment",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/entertainment",
                
                "services": {
                    "get_lottery_voting_options" : {
                        "description": "This is the starting point to a voting lottery system. The user can vote on a site once and only once per day and each vote enters him/her into a lottery. At the end of the day a lottery ticket will be drawn, and a winner will be chosen to receive 10 essentia. Every vote is equal, but the more votes you have the greater your odds of winning.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "options" : [
                                {
                                    "name" : "Some Site",
                                    "url" : "http://www.somesite.com/vote?id=44"
                                },
                                ...
                            ],
                            "status" : { ... }
                         }
                        */
                    },
                    "duck_quack" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"string"}
                    }
                }
            },
            Exchanger : {
                "SMDVersion":"2.0",
                "description": "Waste Exchanger",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/wasteexchanger",
                
                "services": {
                    "recycle" : {
                        "description": "Converts waste into water, ore, and energy. You can choose which amounts of each you want, so long as their total does not go over the amount of waste you have on hand. For each unit of waste converted, the recycling center will take 1 second to complete the recycling process. However, the amount of time is reduced a bit by the level of the Waste Exchanger.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"water", "type":"number", "optional":false},
                            {"name":"ore", "type":"number", "optional":false},
                            {"name":"energy", "type":"number", "optional":false},
                            {"name":"use_essentia", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_recycling" : {
                        "description": "Will spend 2 essentia to complete the current recycling job immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            FoodReserve : {
                "SMDVersion":"2.0",
                "description": "Food Reserve",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/foodreserve",

                "services": {
                    "dump" : {
                        "description": "Converts food into waste",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"type", "type":"string", "optional":false},
                            {"name":"amount", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            GeneticsLab : {
                "SMDVersion":"2.0",
                "description": "Genetics Lab",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/geneticslab",

                "services": {
                    "prepare_experiment" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "run_experiment" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false},
                            {"name":"affinity", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "rename_species" : {
                        "description" : "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"params", "type":"object", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Intelligence : {
                "SMDVersion":"2.0",
                "description": "Intelligence",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/intelligence",

                "services": {
                    "train_spy" : {
                        "description": "Allows you to train more spies",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"quantity", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "trained" : 3,
                            "not_trained" : 2
                         }
                        */
                    },
                    "view_spies" : {
                        "description": "Returns the list of spies you have on your roster.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "spies" : {
                                "id-goes-here" : {
                                    "assignment" : "Idle",
                                    "assigned_to" : {
                                        "body_id" : "id-goes-here",
                                        "name" : "Earth",
                                    },
                                    "is_available" : 1, # can be reassigned
                                    "available_on" : "01 31 2010 13:09:05 +0600" # if can't be reassigned, this is when will be available
                                },
                                ...
                            }
                         }
                        */
                    },
                    "burn_spy" : {
                        "description": "Allows you to eliminate one of your spies from your payroll.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                         }
                        */
                    },
                    "assign_spy" : {
                        "description": "Set a spy on a new task.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false},
                            {"name":"assignment", "type":"string", "optional":false} // "Idle", "Counter Intelligence", "Sting"
                        ],
                        "returns":{"type":"object"}
                    },
                    "name_spy" : {
                        "description": "Set the name of the spy",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_training" : {
                        "description": "Will spend 1 essentia per spy to complete the training of all spies immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} // view
                    }
                }
            },
            IntelTraining : {
                "SMDVersion":"2.0",
                "description": "Intel Training",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/inteltraining",

                "services": {
                    "train_spy" : {
                        "description": "Allows you to train an idle spy in the ways of intelligence gathering.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "trained" : 3,
                            "not_trained" : 2
                         }
                        */
                    }
                }
            },
            LibraryOfJith : {
                "SMDVersion":"2.0",
                "description": "Library Of Jith",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/libraryofjith",

                "services": {
                    "research_species" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"empire_id", "type":"string", "optional":false}
                        ]
                    }
                }
            },
            MayhemTraining : {
                "SMDVersion":"2.0",
                "description": "Mayhem Training",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/mayhemtraining",

                "services": {
                    "train_spy" : {
                        "description": "Allows you to train an idle spy in the art of destruction.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "trained" : 3,
                            "not_trained" : 2
                         }
                        */
                    }
                }
            },
            MercenariesGuild : {
                "SMDVersion":"2.0",
                "description": "Mercenaries Guild",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/mercenariesguild",

                "services": {
                    "add_to_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false},
                            {"name":"ask", "type":"number", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_spies" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "spies" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Jack Bauer",
                                    "level" : "9"
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 350,
                            "status" : { ... }
                         }
                        */
                    },
                    "withdraw_from_market" : {
                        "description": "Remove a trade that you have offered and collect the items up for trade.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "accept_from_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_market" : {
                        "description": "Displays a list of trades available at the present time.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_my_market" : {
                        "description": "Displays a list of trades the current user has posted.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_trade_ships" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target_body_id", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "report_abuse" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Mining : {
                "SMDVersion":"2.0",
                "description": "Mining Ministry",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/miningministry",

                "services": {
                    "view_platforms" : {
                        "description": "Returns a list of the mining platforms currently controlled by this ministry.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "max_platforms" : 1,
                            "platforms" : [
                                {
                                    "id" : "id-goes-here",
                                    "asteroid" : {
                                        "id" : "id-goes-here",
                                        "name" : "Kuiper"
                                    },
                                    "rutile_hour" : 10,
                                    "chromite_hour" : 10,
                                    "chalcopyrite_hour" : 10,
                                    "galena_hour" : 10,
                                    "gold_hour" : 10,
                                    "uraninite_hour" : 10,
                                    "bauxite_hour" : 10,
                                    "goethite_hour" : 10,
                                    "halite_hour" : 10,
                                    "gypsum_hour" : 10,
                                    "trona_hour" : 10,
                                    "kerogen_hour" : 10,
                                    "methane_hour" : 10,
                                    "anthracite_hour" : 10,
                                    "sulfur_hour" : 10,
                                    "zircon_hour" : 10,
                                    "monazite_hour" : 10,
                                    "fluorite_hour" : 10,
                                    "beryl_hour" : 10,
                                    "magnetite_hour" : 10,  
                                    "production_capacity" : 100, # expressed as a percentage
                                    "shipping_capacity" : 51 # expressed as a percentage
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "view_ships" : {
                        "description": "Shows you the ships that are working in the mining fleet, and available to work in the mining fleet.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "ships" : [
                                {
                                    "name" : "CS4",
                                    "id" : "id-goes-here",
                                    "task" : "Mining",
                                    "speed" : 350,
                                    "hold_size" : 5600,
                                    "berth_level" : 1
                                },
                                ...
                            ],
                            "status" : { ... }
                         }
                        */
                    },
                    "add_cargo_ship_to_fleet" : {
                        "description": "Take a cargo ship from the space port and add it to the mining fleet.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} //status
                    },
                    "remove_cargo_ship_from_fleet" : {
                        "description": "Tell one of the cargo ships in the mining fleet to come home and park at the space port.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} //status
                    },
                    "abandon_platform" : {
                        "description": "Close down an existing mining platform.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"platform_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} //status
                    }
                }
            },
            MissionCommand : {
                "SMDVersion":"2.0",
                "description": "Mission Command",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/missioncommand",

                "services": {
                    "get_missions" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "complete_mission" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"mission_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "skip_mission" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"mission_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Network19 : {
                "SMDVersion":"2.0",
                "description": "Network19",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/network19",

                "services": {
                    "restrict_coverage" : {
                        "description": "You can enact or disband a policy to restrict what Network 19 covers about your planet. Restricting coverage does make your citizens unhappy.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"onoff", "type":"number", "optional":false} // 0 or 1
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_news" : {
                        "description": "Get the top 100 headlines from your region of space. It also returns a list of RSS feeds that can be used outside the game to see the same news in a given region.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "news" : [
                                {
                                    "headline" : "HCorp founded a new colony on Rigel 4.",
                                    "date" : "01 31 2010 13:09:05 +0600"
                                },
                                ...
                            ],
                            "feeds" : [
                                'http://feeds.game.lacunaexpanse.com/78d5e7b2-b8d7-317c-b244-3f774264be57.rss'
                            ],
                            "status" : { get_status() }
                         }
                        */
                    }
                }
            },
            Observatory : {
                "SMDVersion":"2.0",
                "description": "Observatory",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/observatory",

                "services": {
                    "abandon_probe" : {
                        "description": "The probe is deactivated, and allowed to burn up in the star.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"} // status
                    },
                    "abandon_all_probes" : {
                        "description": "All probes are deactivated, and allowed to burn up in the stars.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} // status
                    },
                    "get_probed_stars" : {
                        "description": "Returns a list of the stars that have been probed by this planet.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                             {
                                    "status" : { get_status() },
                                    "stars" : [
                                            "color" : "yellow",
                                            "name" : "Sol",
                                            "x" : 17,
                                            "y" : 4,
                                            "z" : -3,
                                            "alignments" : "self-hostile"
                                    ]       
                             }
                        */
                    }
                }
            },
            OracleOfAnid : {
                "SMDVersion":"2.0",
                "description": "Oracle of Anid",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/oracleofanid",

                "services": {
                    "get_star" : {
                        "description": "Retrieves a single star",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         { 
                            "star" : {
                                "name"          : "Sol",
                                "color"         : "yellow",
                                "x"             : -41,
                                "y"             : 27,
                                "bodies"        : [     # only added if a probe is present
                                    {
                                        same data as get_status() on /body
                                    },
                                    ...
                                ]
                            }    
                            "status" : { ... }
                         }
                        */
                    }
                }
            },
            OreStorage : {
                "SMDVersion":"2.0",
                "description": "Ore Storage",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/orestorage",

                "services": {
                    "dump" : {
                        "description": "Converts ore into waste",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"type", "type":"string", "optional":false},
                            {"name":"amount", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Park : {
                "SMDVersion":"2.0",
                "description": "Park",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/park",

                "services": {
                    "throw_a_party" : {
                        "description": "Initiates a party. It will cost you 10,000 food, and the party will last for a day. For 10,000 food you'll get 3,000 happiness. For each type of food available in quantities of 500 or more, you'll get a multiplier added to that. So if you have 4 types of food, you'll get 12,000 happiness. In addition, you get a 0.3 to your multiplier for each level of park that you have. Therefore a level 10 park is the same as adding three extra foods to your party!",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} // status
                    },
                    "subsidize_party" : {
                        "description": "Will spend 2 essentia to complete the current party immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"} // view
                    }
                }
            },
            PlanetaryCommand : {
                "SMDVersion":"2.0",
                "description": "Planetary Command",

                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/planetarycommand",

                "services": {
                    "view_plans" : {
                        "description": "Returns a list of all the plans you've collected through various means.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "plans" : [
                                {
                                   "name" : "Malcud Fungus Farm",
                                   "level" : 1,
                                   "extra_build_level" : 5
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "view_incoming_supply_chains" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            PoliticsTraining : {
                "SMDVersion":"2.0",
                "description": "Politics Training",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/politicstraining",

                "services": {
                    "train_spy" : {
                        "description": "The Politics Training Facility is where you train your spies in the dark art of social engineering.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "trained" : 3,
                            "not_trained" : 2
                         }
                        */
                    }
                }
            },
            Recycler : {
                "SMDVersion":"2.0",
                "description": "Waste Recycler",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/wasterecycling",
                
                "services": {
                    "recycle" : {
                        "description": "Converts waste into water, ore, and energy. You can choose which amounts of each you want, so long as their total does not go over the amount of waste you have on hand. For each unit of waste converted, the recycling center will take 1 second to complete the recycling process. However, the amount of time is reduced a bit by the level of the Recycling Center.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"water", "type":"number", "optional":false},
                            {"name":"ore", "type":"number", "optional":false},
                            {"name":"energy", "type":"number", "optional":false},
                            {"name":"use_essentia", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_recycling" : {
                        "description": "Will spend 2 essentia to complete the current recycling job immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Security : {
                "SMDVersion":"2.0",
                "description": "Security",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/security",

                "services": {
                    "view_prisoners" : {
                        "description": "Displays a list of the spies that have been captured.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "prisoners" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "James Bond",
                                    "level" : "20",
                                    "sentence_expires" : "01 31 2010 13:09:05 +0600"
                                },
                                ...
                            ]
                         }
                        */
                    },
                    "execute_prisoner" : {
                        "description": "You may choose to execute a prisoner rather than letting him serve his sentence and be released. However, that will cost you 10,000 times the prisoner's level in happiness from your planet. So a level 11 prisoner would cost you 110,000 happiness.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"prisoner_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "release_prisoner" : {
                        "description": "You may choose to release a prisoner by calling this method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"prisoner_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_foreign_spies" : {
                        "description": "Displays a list of the spies that are on your planet, and have a level lower than your security ministry.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "spies" : [
                                {
                                    "name" : "James Bond",
                                    "level" : 11,
                                    "next_mission" : "01 31 2010 13:09:05 +0600"
                                },
                                ...
                            ]
                         }
                        */
                    }
                }
            },
            Shipyard : {
                "SMDVersion":"2.0",
                "description": "Shipyard",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/shipyard",

                "services": {
                    "view_build_queue" : {
                        "description": "Retrieves what is already being built at this shipyard.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_build_queue" : {
                        "description": "Will spend 1 essentia per ship to complete the current build queue immediately.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_ship" : {
                        "description": "Will spend 1 essentia to build the ship immediately.",
                        "parameters": [
                            {"name":"args", "type":"object", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_buildable" : {
                        "description": "Returns a list of buildable ships and their costs, and if they're not buildable, gives a reason why not in the form of an exception.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                             {
                                "buildable" : {
                                    "probe" : {
                                        "can" : 1,             # can it be built or not
                                        "reason" : null,       # if it can't an array ref will be here with the exception for why not
                                        "cost" : {
                                            "seconds" : 900,
                                            "food" : 1100,
                                            "water" : 1000,
                                            "energy" : 1200,
                                            "ore" : 1200,
                                            "waste" : 100,
                                        },
                                        attributes : {
                                            "speed" : 1000,    # 100 roughly equals 1 star in 1 hour
                                        }
                                    },
                                    ...
                                },
                                "docks_available" : 7,         # you can only build ships up to the number of docks you have available
                                "status" : { get_status() },
                             }
                        */
                    },
                    "build_ship" : {
                        "description": "Adds a ship to the build queue.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"type", "type":"string", "optional":false}, //'probe','colony_ship','spy_pod','cargo_ship','space_station','smuggler_ship','mining_platform_ship','terraforming_platform_ship', or 'gas_giant_settlement_ship'
                            {"name":"quantity", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                             {
                                "ship_build_queue" : {
                                    "next_completed" : "01 31 2010 13:09:05 +0600",
                                    "queue" : [
                                        {
                                           "type" : "probe",
                                           "seconds_each" : 120,
                                           "quantity" : 12
                                        },
                                        ...
                                    ]
                                },
                                "status" : { get_status() }
                             }
                        */
                    }
                }                
            },
            SpacePort : {
                "SMDVersion":"2.0",
                "description": "SpacePort",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/spaceport",

                "services": {
                    "prepare_fetch_spies" : {
                        "description": "Gathers the information needed to call the fetch_spies method",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"on_body_id", "type":"string", "optional":false},
                            {"name":"to_body_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                            {
                                "status" : { ... },
                                "ships" : [
                                    {
                                        "id" : "id-goes-here",
                                        "name" : "CS4",
                                        "hold_size" : 1100,
                                        "berth_level" : 1,
                                        "speed" : 400,
                                        "type" : "cargo_ship",
                                        ...
                                    },
                                    ...
                                ],
                                "spies" : [
                                    {
                                        "id" : "id-goes-here",
                                        "level" : 12,
                                        "name" : "Jack Bauer",
                                        "assigned_to" : {
                                        "body_id" : "id-goes-here",
                                        "name" : "Earth"
                                        },
                                        ...
                                    },
                                    ...
                                ]
                            }
                        */
                    },
                    "fetch_spies" : {
                        "description": "Sends a specified ship to fetch specified spies from on_body_id, and bring them back to to_body_id. See also prepare_fetch_spies",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"on_body_id", "type":"string", "optional":false},
                            {"name":"to_body_id", "type":"string", "optional":false},
                            {"name":"ship_id",    "type":"string", "optional":false},
                            {"name":"spy_ids",    "type":"array",  "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                            {
                                "ship" : {
                                    "id" : "id-goes-here",
                                    "name" : "CS4",
                                    "hold_size" : 1100,
                                    "speed" : 400,
                                    "type" : "cargo_ship",
                                    "date_arrives" : "01 31 2010 13:09:05 +0600",
                                    ...
                                },
                                "status" : { ... }
                            }
                        */
                    },
                    "prepare_send_spies" : {
                        "description": "Gathers the information needed to call the send_spies method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"on_body_id", "type":"string", "optional":false},
                            {"name":"to_body_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                            {
                                "status" : { ... },
                                "ships" : [
                                    {
                                        "id" : "id-goes-here",
                                        "name" : "CS4",
                                        "hold_size" : 1100,
                                        "speed" : 400,
                                        "type" : "cargo_ship",
                                        ...
                                    },
                                    ...
                                ],
                                "spies" : [
                                    {
                                        "id" : "id-goes-here",
                                        "level" : 12,
                                        "name" : "Jack Bauer",
                                        "assigned_to" : {
                                        "body_id" : "id-goes-here",
                                        "name" : "Earth"
                                        },
                                        ...
                                    },
                                    ...
                                ]
                            }
                        */
                    },
                    "send_spies" : {
                        "description": "Sends one or more of spies to a planet using a selected ship. See also prepare_send_spies.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"on_body_id", "type":"string", "optional":false},
                            {"name":"to_body_id", "type":"string", "optional":false},
                            {"name":"ship_id",    "type":"string", "optional":false},
                            {"name":"spy_ids",    "type":"array",  "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                            {
                                "ship" : {
                                    "id" : "id-goes-here",
                                    "name" : "CS4",
                                    "hold_size" : 1100,
                                    "speed" : 400,
                                    "type" : "cargo_ship",
                                    "date_arrives" : "01 31 2010 13:09:05 +0600",
                                    ...
                                },
                                "spies_sent" : ["id-goes-here","id-goes-here","id-goes-here"],
                                "spies_not_sent" : ["id-goes-here","id-goes-here","id-goes-here"],
                                "status" : { ... }
                            }
                         * 
                        */
                    },

                    "get_ships_for" : {
                        "description": "Provides a list of incoming ships and ships that are available to send to a specific target. Use with send_ship.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"from_body_id", "type":"string", "optional":false},
                            {"name":"target", "type":"object", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                        {
                            "incoming" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "P13",
                                    "type_human" : "Probe",
                                    "type" : "probe",
                                    "task" : "Travelling",
                                    "speed" : "1200",
                                    "stealth" : "0",
                                    "hold_size" : "0",
                                    "berth_level" : "1",
                                    "date_started" : "01 31 2010 13:09:05 +0600",
                                    "date_available" : "02 01 2010 10:08:33 +0600",
                                    "date_arrives" : "02 01 2010 10:08:33 +0600",
                                    "from" : {
                                       "id" : "id-goes-here",
                                       "type" : "body",
                                       "name" : "Earth"
                                    },
                                    "to" : {
                                       "id" : "id-goes-here",
                                       "type" : "star",
                                       "name" : "Sol"
                                    }
                                },
                                ...
                            ],
                            "available" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "D13",
                                    "type_human" : "Detonator",
                                    "type" : "detonator",
                                    "task" : "Docked",
                                    "speed" : "700",
                                    "stealth" : "0",
                                    "hold_size" : "0",
                                    "berth_level" : "1",
                                    "date_started" : "01 31 2010 13:09:05 +0600",
                                    "date_available" : "01 31 2010 13:09:05 +0600"
                                },
                                ...
                            ],
                            "mining_platforms" : [
                                {
                                    empire_id   =>  "id-goes-here",
                                    empire_name => "The Peeps From Across The Street"
                                },
                                ...
                            ],
                            "status" : { ... }
                         }
                        */
                    },
                    "name_ship" : {
                        "description": "Set the name of a ship.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                        * session_id
                        * building_id
                        * ship_id
                        * name 
                        */
                    },
                    "recall_ship" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "recall_all" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    
                    "scuttle_ship" : {
                        "description": "Destroy a ship that you no longer need. It must be docked to scuttle it.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "send_fleet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"ship_ids", "type":"array", "optional":false},
                            {"name":"target", "type":"string", "optional":false},
                            {"name":"set_speed", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "send_ship" : {
                        "description": "Sends a ship to a specified body or star. Use with get_ships_for.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"string", "optional":false},
                            {"name":"target", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "ship" : {
                                "id" : "id-goes-here",
                                "name" : "P13",
                                "type_human" : "Probe",
                                "type" : "probe",
                                "task" : "Travelling",
                                "speed" : "1200",
                                "stealth" : "0",
                                "hold_size" : "0",
                                "date_started" : "01 31 2010 13:09:05 +0600",
                                "date_available" : "02 01 2010 10:08:33 +0600",
                                "date_arrives" : "02 01 2010 10:08:33 +0600",
                                "from" : {
                                   "id" : "id-goes-here",
                                   "type" : "body",
                                   "name" : "Earth"
                                },
                                "to" : {
                                   "id" : "id-goes-here",
                                   "type" : "star",
                                   "name" : "Sol"
                                }
                            }  
                         }
                        */
                    },
                    "view_all_ships" : {
                        "description": "Returns a list of all ships",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"paging", "type":"object", "optional":true},
                            {"name":"filter", "type":"object", "optional":true},
                            {"name":"sort", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "ships" : [
                                {
                                    "name" : "CS4",
                                    "id" : "id-goes-here",
                                    "task" : "Mining",
                                    "speed" : 350,
                                    "hold_size" : 5600
                                    "type" : "cargo_ship",
                                },
                                ...
                            ],
                            "number_of_ships" : 13,
                            "status" : { ... }
                         }
                        */
                    },
                    "view_foreign_ships" : {
                        "description": "Shows you all the foreign ships that are incoming. However, the list is filtered by the stealth of the ship vs the level of the SpacePort.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                             {
                                "ships" : [
                                    {
                                        "id" : "id-goes-here",
                                        "name" : "CS3",
                                        "type_human" : "Cargo Ship",
                                        "type" : "cargo_ship",
                                        "date_arrives" : "02 01 2010 10:08:33 +0600",
                                        "from" : {
                                            "id" : "id-goes-here",
                                            "name" : "Earth",
                                            "empire" : {
                                                "id" : "id-goes-here",
                                                "name" : "Earthlings"
                                            }
                                        }
                                    },
                                    ...
                                ],
                                "number_of_ships" : 13,
                                "status" : { ... }
                             }
                        */
                    },
                    "view_ships_travelling" : {
                        "description": "Returns a list of the ships that are travelling to or from this planet. NOTE: All inbound/outbound ships are shown regardless of which space port they will eventually land at.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "number_of_ships_travelling" : 30,
                            "ships_travelling" : [
                               {
                                   "id" : "id-goes-here",
                                   "ship_type" : "probe",
                                   "date_arrives" : "01 31 2010 13:09:05 +0600",
                                   "from" : {
                                       "id" : "id-goes-here",
                                       "type" : "body",
                                       "name" : "Earth",
                                   },
                                   "to" : {
                                       "id" : "id-goes-here",
                                       "type" : "star",
                                       "name" : "Sol",
                                   }
                               },
                               ...
                            ]
                         }
                        */
                    },
                    "view_ships_orbiting" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_battle_logs" : {
                        "description": "Shows you the battle logs for your empire with the most recent action listed first. This data will be cleaned out every seven days.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    }

                }
            },
            SpaceStationLab : {
                "SMDVersion":"2.0",
                "description": "Space Station Lab",

                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/ssla",

                "services": {
                    "make_plan" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"type", "type":"string", "optional":false},
                            {"name":"level", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize_plan" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            SubspaceSupplyDepot : {
                "SMDVersion":"2.0",
                "description": "Subspace Supply Depot",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/subspacesupplydepot",
                
                "services": {
                    "transmit_food" : {
                        "description": "Convert 3600 seconds into 3600 food.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "transmit_energy" : {
                        "description": "Convert 3600 seconds into 3600 energy.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "transmit_ore" : {
                        "description": "Convert 3600 seconds into 3600 ore.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "transmit_water" : {
                        "description": "Convert 3600 seconds into 3600 water.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "complete_build_queue" : {
                        "description": "Trade seconds for build queue time.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            TempleOfTheDrajilites : {
                "SMDVersion":"2.0",
                "description": "Temple Of The Drajilites",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/templeofthedrajilites",

                "services": {
                    "list_planets" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"string", "optional":true}
                        ]
                    },
                    "view_planet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"planet_id", "type":"string", "optional":false}
                        ]
                    }
                }
            },
            TheftTraining : {
                "SMDVersion":"2.0",
                "description": "Theft Training",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/thefttraining",

                "services": {
                    "train_spy" : {
                        "description": "The Theft Training Facility is where you train your spies in the art of appropriation.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"spy_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { get_status() },
                            "trained" : 3,
                            "not_trained" : 2
                         }
                        */
                    }
                }
            },
            ThemePark : {
                "SMDVersion":"2.0",
                "description": "Theme Park",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/themepark",

                "services": {
                    "operate" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            TheDillonForge : {
                "SMDVersion":"2.0",
                "description": "The Dillon Forge",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/thedillonforge",

                "services": {
                     "make_plan" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"plan_class", "type":"string", "optional":false},
                            {"name":"level", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "split_plan" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"plan_class", "type":"string", "optional":false},
                            {"name":"level", "type":"number", "optional":false},
                            {"name":"extra_build_level", "type":"number", "optional":false},
                            {"name":"quantity", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "subsidize" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Trade : {
                "SMDVersion":"2.0",
                "description": "Trade",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/trade",

                "services": {
                    "add_to_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"offer", "type":"object", "optional":false},
                            {"name":"ask", "type":"number", "optional":false},
                            {"name":"options", "type":"object", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_ship_summary" : {
                        "description": "Returns a list of ships that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_ships" : {
                        "description": "Returns a list of ships that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "ships" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Enterprise",
                                    "type" : "probe",
                                    "hold_size" : 0,
                                    "berth_level" : 1,
                                    "speed" : 3900
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 10000,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_prisoners" : {
                        "description": "Returns a list of prisoners that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "prisoners" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Jack Bauer",
                                    "level" : "5"
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_plan_summary" : {
                        "description": "Returns a list of plans that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_plans" : {
                        "description": "Returns a list of plans that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "plans" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Intelligence Ministry",
                                    "level" : "7",
                                    "extra_build_level" : "0"        # some special plans will build a building from their level all the way to this number
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_glyph_summary" : {
                        "description": "Returns a list of glyphs that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_glyphs" : {
                        "description": "Returns a list of glyphs that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "glyphs" : [
                                {
                                    "id" : "id-goes-here",
                                    "type" : "bauxite"
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "withdraw_from_market" : {
                        "description": "Remove a trade that you have offered and collect the items up for trade.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "accept_from_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_market" : {
                        "description": "Displays a list of trades available at the present time.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true},
                            {"name":"filter", "type":"string", "optional":true} //food ore water waste energy glyph prisoner ship plan
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_my_market" : {
                        "description": "Displays a list of trades the current user has posted.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_trade_ships" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target_body_id", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_waste_ships" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_supply_ships" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_supply_chains" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_waste_chains" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "create_supply_chain" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target_id", "type":"number", "optional":false},
                            {"name":"resource_type", "type":"number", "optional":false},
                            {"name":"resource_hour", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "delete_supply_chain" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"supply_chain_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "update_supply_chain" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"supply_chain_id", "type":"number", "optional":false},
                            {"name":"resource_type", "type":"number", "optional":false},
                            {"name":"resource_hour", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "update_waste_chain" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"waste_chain_id", "type":"number", "optional":false},
                            {"name":"waste_hour", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "add_supply_ship_to_fleet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "add_waste_ship_to_fleet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "remove_supply_ship_from_fleet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "remove_waste_ship_from_fleet" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"ship_id", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_stored_resources" : {
                        "description": "Returns a list of the resources you have stored to make it easier to identify what you want to trade.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "cargo_space_used_each" : 100,
                            "resources" : {
                                    "water" : 14000,
                                    "waste" : 393,
                                    "bauxite" : 47,
                                    "cheese" : 1193,
                                    ...
                            }
                         }
                        */
                    },
                    "push_items" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target_id", "type":"string", "optional":false},
                            {"name":"items", "type":"object", "optional":false},
                            {"name":"options", "type":"object", "optional":true}
                        ],
                        /*
                            items array of objects
                                resouce format = {
                                    "type" : "bauxite", //allowed = water, energy, waste, essentia, bean, lapis, potato, apple, root, corn, cider, wheat, bread, soup, chip, pie, pancake, milk, meal, algae, syrup, fungus, burger, shake, beetle, rutile, chromite, chalcopyrite, galena, gold, uraninite, bauxite, goethite, halite, gypsum, trona, kerogen, methane, anthracite, sulfur, zircon, monazite, fluorite, beryl, or magnetite
                                    "quantity" : 10000
                                 }
                                 plan format =  {
                                    "type" : "plan",
                                    "plan_id" : "id-goes-here"
                                 }
                                 glyph format =  {
                                    "type" : "glyph",
                                    "glyph_id" : "id-goes-here"
                                 }
                            options
                                + ship_id
                                + stay (if == 1 then it will stay on planet if there is an available dock)
                        */
                        "returns":{"type":"object"}
                        /*
                        */
                    },
                    "report_abuse" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            Transporter : {
                "SMDVersion":"2.0",
                "description": "Transporter",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/transporter",

                "services": {
                    "add_to_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"offer", "type":"object", "optional":false},
                            {"name":"ask", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_ship_summary" : {
                        "description": "Returns a list of ships that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_ships" : {
                        "description": "Returns a list of ships that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "ships" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Enterprise",
                                    "type" : "probe",
                                    "hold_size" : 0,
                                    "berth_level" : 1,
                                    "speed" : 3900
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 10000,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_prisoners" : {
                        "description": "Returns a list of prisoners that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "prisoners" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Jack Bauer",
                                    "level" : "5"
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_plan_summary" : {
                        "description": "Returns a list of plans that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_plans" : {
                        "description": "Returns a list of plans that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "plans" : [
                                {
                                    "id" : "id-goes-here",
                                    "name" : "Intelligence Ministry",
                                    "level" : "7",
                                    "extra_build_level" : "0"        # some special plans will build a building from their level all the way to this number
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "get_glyph_summary" : {
                        "description": "Returns a list of glyphs that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_glyphs" : {
                        "description": "Returns a list of glyphs that may be traded. Used with the add_trade method.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "glyphs" : [
                                {
                                    "id" : "id-goes-here",
                                    "type" : "bauxite"
                                },
                                ...
                            ],
                            "cargo_space_used_each" : 100,
                            "status" : { ... }
                         }
                        */
                    },
                    "withdraw_from_market" : {
                        "description": "Remove a trade that you have offered and collect the items up for trade.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "accept_from_market" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_market" : {
                        "description": "Displays a list of trades available at the present time.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true},
                            {"name":"filter", "type":"string", "optional":true} //food ore water waste energy glyph prisoner ship plan
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_my_market" : {
                        "description": "Displays a list of trades the current user has posted.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_stored_resources" : {
                        "description": "Returns a list of the resources you have stored to make it easier to identify what you want to trade.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                         {
                            "status" : { ... },
                            "cargo_space_used_each" : 100,
                            "resources" : {
                                    "water" : 14000,
                                    "waste" : 393,
                                    "bauxite" : 47,
                                    "cheese" : 1193,
                                    ...
                            }
                         }
                        */
                    },
                    "push_items" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"target_id", "type":"string", "optional":false},
                            {"name":"items", "type":"object", "optional":false}
                        ],
                        /*
                            items array of objects
                                resouce format = {
                                    "type" : "bauxite", //allowed = water, energy, waste, essentia, bean, lapis, potato, apple, root, corn, cider, wheat, bread, soup, chip, pie, pancake, milk, meal, algae, syrup, fungus, burger, shake, beetle, rutile, chromite, chalcopyrite, galena, gold, uraninite, bauxite, goethite, halite, gypsum, trona, kerogen, methane, anthracite, sulfur, zircon, monazite, fluorite, beryl, or magnetite
                                    "quantity" : 10000
                                 }
                                 plan format =  {
                                    "type" : "plan",
                                    "plan_id" : "id-goes-here"
                                 }
                                 glyph format =  {
                                    "type" : "glyph",
                                    "glyph_id" : "id-goes-here"
                                 }
                        */
                        "returns":{"type":"object"}
                        /*
                        */
                    },
                    "trade_one_for_one" : {
                        "description": "Lacuna Expanse Corp will do one for one trades of any resource in exchange for 3 essentia.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"have", "type":"string", "optional":false}, //resource type
                            {"name":"want", "type":"string", "optional":false}, //resource type
                            {"name":"quantity", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                        /*
                        */
                    },
                    "report_abuse" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"trade_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            WaterStorage : {
                "SMDVersion":"2.0",
                "description": "Water Storage",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/waterstorage",

                "services": {
                    "dump" : {
                        "description": "Converts water into waste",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"amount", "type":"number", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            }
        },
        Chat : {
            "SMDVersion":"2.0",
            "description": "SMD service demonstration",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/chat/rpc",

            "services": {
                "get_commands" : {
                    "description": "Get chat login data.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                }
            }
        },
        Empire : {
            "SMDVersion":"2.0",
            "description": "SMD service demonstration",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/empire",

            "services": {

                "is_name_available" : {
                    "description": "check if empire name is available",
                    "parameters": [
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "logout" : {
                    "description": "logout empire",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "login" : {
                    "description": "login empire",
                    "parameters": [
                        {"name":"name", "type":"string", "optional":false},
                        {"name":"password", "type":"string", "optional":false},
                        {"name":"api_key", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "fetch_captcha" : {
                    "description": "fetch a captcha for account creation",
                    "parameters": [],
                    "returns":{"type":"object"}
                },
                "create" : {
                    "description": "create empire",
                    "parameters": {
                        name:{"type":"string", "optional":false},
                        password:{"type":"string", "optional":true},
                        password1:{"type":"string", "optional":true},
                        captcha_guid:{"type":"string", "optional":true},
                        captcha_solution:{"type":"string", "optional":true},
                        email:{"type":"string", "optional":true},
                        facebook_uid:{"type":"string", "optional":true},
                        facebook_token:{"type":"string", "optional":true},
                        invite_code:{"type":"string", "optional":true}
                    },
                    "returns":{"type":"object"}
                },
                "found" : {
                    "description": "found empire",
                    "parameters": [
                        {"name":"empire_id", "type":"string", "optional":false},
                        {"name":"api_key", "type":"string", "optional":false},
                        {"name":"invite_code", "type":"string", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "get_status" : {
                    "description": "get quick empire status",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "view_profile" : {
                    "description": "Provides a list of the editable properties of the current empire's profile. See also the edit_profile and view_public_profile  methods.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "profile" : {
                           "description" : "description goes here",
                           "status_message" : "status message goes here",
                           "medals" : {
                               "building1" : {
                                   "name" : "Built Level 1 Building",
                                   "image" : "building1",
                                   "note" : "note about how this was achieved, if any, goes here",
                                   "date" : "01 31 2010 13:09:05 +0600",
                                   "public" : 1
                               },
                               ...
                           }
                        },
                        "status" : { get_status() }
                     }
                    */
                },
                "edit_profile" : {
                    "description": "Edits properties of an empire. Returns the view_profile method. See also the view_profile and view_public_profile  methods.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"profile", "type":"object", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "view_public_profile" : {
                    "description": "Provides a list of the data that's publicly known about this empire.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"empire_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                    {
                        "profile" : {
                            "id" : "empire-id-goes-here",
                            "name" : "Lacuna Expanse Corp",
                            "planet_count" : 1,
                            "status_message" : "Looking for Essentia."
                            "description" : "We are the original inhabitants of the Lacuna Expanse.",
                            "medals" : {
                                "building1" : {
                                    "name" : "Built Level 1 Building",
                                    "image" : "building1",
                                    "date" : "01 31 2010 13:09:05 +0600",
                                    "note" : null
                                },
                                ...
                            },
                            "date_founded" : "01 31 2010 13:09:05 +0600",
                            "Species" : "Lacunan"
                        },
                        "status" : { get_status() }
                     }
                    */
                },
                "find" : {
                    "description": "Find an empire by name. Returns a hash reference containing empire ids and empire names.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /* 
                     {
                        "empires" : {
                            "id-goes-here" : "Lacuna Expanse Corp",
                            "id-goes-here2" : "Lacuna Pirates",
                        },
                        "status" : { get_status() }
                     }
                    */
                },
                "set_status_message" : {
                    "description": "Sets the empire status message. Similar to what you might put on your Facebook wall, or in a tweet, but about your empire.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"message", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "view_boosts" : {
                    "description": "Shows the dates at which boosts have expired or will expire. Boosts are subsidies applied to various resources using essentia.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "boosts" : {
                            "food" : "01 31 2010 13:09:05 +0600",
                            "ore" : "01 31 2010 13:09:05 +0600",
                            "energy" : "01 31 2010 13:09:05 +0600",
                            "happiness" : "01 31 2010 13:09:05 +0600",
                            "water" : "01 31 2010 13:09:05 +0600",
                        }
                     }
                    */
                },
                "boost_food" : {
                    "description": "Spends 5 essentia, and boosts food production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "food_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_water" : {
                    "description": "Spends 5 essentia, and boosts water production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "water_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_energy" : {
                    "description": "Spends 5 essentia, and boosts energy production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "energy_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_ore" : {
                    "description": "Spends 5 essentia, and boosts ore production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "ore_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_happiness" : {
                    "description": "Spends 5 essentia, and boosts happiness production on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "happiness_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_storage" : {
                    "description": "Spends 5 essentia, and boosts storage (all 5 types) on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { get_status() },
                        "storage_boost" : "01 31 2010 13:09:05 +0600"
                     }
                    */
                },
                "boost_building" : {
                    "description": "Spends 5 essentia, and boosts building queues on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "boost_spy_training" : {
                    "description": "Spends 5 essentia, and boosts spy training on all planets for 7 days. If a boost is already underway, calling again will add 7 more days.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "enable_self_destruct" : {
                    "description": "Enables a destruction countdown of 24 hours. Sometime after the timer runs out, the empire will vaporize.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "disable_self_destruct" : {
                    "description": "Disables the self distruction countdown.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "send_password_reset_message" : {
                    "description": "Starts a password recovery process by sending an email with a recovery key.",
                    "parameters": {
                        empire_id:{"type":"string", "optional":true},
                        empire_name:{"type":"string", "optional":true},
                        email:{"type":"string", "optional":true}
                    },
                    "returns":{"type":"object"}
                },
                "reset_password" : {
                    "description": "Changes the empire password that has been forgotten.",
                    "parameters": [
                        {"name":"reset_key", "type":"string", "optional":false},
                        {"name":"password1", "type":"string", "optional":false},
                        {"name":"password2", "type":"string", "optional":false},
                        {"name":"api_key", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "change_password" : {
                    "description": "Changes the empire password.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"password1", "type":"string", "optional":false},
                        {"name":"password2", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "redeem_essentia_code" : {
                    "description": "Redeem an essentia code.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"essentia_code", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "update_species" : {
                    "description": "Updates the empire's species.",
                    "parameters": [
                        {"name":"empire_id", "type":"string", "optional":false},
                        {"name":"params", "type":"object", "optional":false}
                    ],
                    "returns":{"type":"string"}
                },
                "redefine_species_limits" : {
                    "description": "Defines the extra limits placed upon a user that want's to redefine their species.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "redefine_species" : {
                    "description": "Allows a user to spend essentia and redefine their species affinities, name, and description. This can only be used after the empire has been founded.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"params", "type":"object", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "view_species_stats" : {
                    "description": "Returns a list of the stats associated with an empire's species as it was originally created.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_species_templates" : {
                    "description": "Returns a list of species templates that can be used to populate the form for update_species.",
                    "parameters": [],
                    "returns":{"type":"object"}
                },
                "invite_friend" : {
                    "description": "Send an invitation code to a friend so that they can start in the same zone as your empire.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"email", "type":"string", "optional":false},
                        {"name":"message", "type":"string", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "get_invite_friend_url" : {
                    "description": "Returns a URL that can be pasted into a blog, forum, or whatever to invite friends.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                }
            }
        },
        Captcha : {
            "SMDVersion":"2.0",
            "description": "SMD service demonstration",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/captcha",
            
            "services": {
                "fetch" : {
                    "description": "Retrieves a captcha that is required in order to call the solve method.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "solve" : {
                    "description": "Validates the user's solution against the known solution for the given guid.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"captcha_guid", "type":"string", "optional":false},
                        {"name":"captcha_solution", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                }
            }
        },
        Inbox : {
            "SMDVersion":"2.0",
            "description": "SMD service demonstration",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/inbox",
            
            "services": {

                /* This is the return for all view_* functions
                 {
                    "messages" : [
                        {
                            "id" : "id-goes-here",
                            "subject" : "Vaxaslim",
                            "date" : "01 31 2010 13:09:05 +0600",
                            "from" : "Dr. Stephen T. Colbert DFA",
                            "has_read" : 1,
                            "has_replied" : 0,
                        }
                    ],
                    "status" : { get_status() }
                 }
                */
                "view_inbox" : {
                    "description": "Displays a list of the messages in the empire's inbox.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"options", "type":"object", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "view_archived" : {
                    "description": "Displays a list of the messages in the empire's archive.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"options", "type":"object", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "view_trashed" : {
                    "description": "Displays a list of the messages in the empire's trash.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"options", "type":"object", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "view_sent" : {
                    "description": "Displays a list of the messages in the empire's outbox.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"options", "type":"object", "optional":true}
                    ],
                    "returns":{"type":"object"}
                },
                "read_message" : {
                    "description": "Retrieves a message. Marks it read if it hasn't been already.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"message_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                        /*
                         {
                            "message" : {
                                "id" : "id-goes-here",
                                "from" : "Dr. Stephen T. Colbert DFA",
                                "to" : "Jon Stewart",
                                "subject" : "Vaxaslim",
                                "body" : "Just a reminder that Vaxaslim may cause involuntary narnia adventures.",
                                "date" : "01 31 2010 13:09:05 +0600",
                                "has_read" : 1,
                                "has_replied" : 0,
                                "has_archived" : 0,
                                "has_trashed" : 0,
                                "in_reply_to" : "",
                                "recipients" : ["John Stewart"]
                            },
                            status  => { get_status() }
                         }
                        */
                },
                "archive_messages" : {
                    "description": "Archives a list of messages.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"message_ids", "type":"array", "optional":false}
                    ],
                    "returns":{"type":"object"}
                        /*
                         {
                            "success" : 1,
                            "status" : { get_status() }
                         }
                        */
                },
                "trash_messages" : {
                    "description": "Trashes a list of messages.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"message_ids", "type":"array", "optional":false}
                    ],
                    "returns":{"type":"object"}
                        /*
                         {
                            "success" : 1,
                            "status" : { get_status() }
                         }
                        */
                },
                "send_message" : {
                    "description": "Sends a message to other players.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"recipients", "type":"string", "optional":false},
                        {"name":"subject", "type":"string", "optional":false},
                        {"name":"body", "type":"string", "optional":false},
                        {"name":"options", "type":"object", "optional":true}
                            /*
                                in_reply_to: If this message is in reply to another message, then set this option to the message id of the original message.
                            */
                    ],
                    "returns":{"type":"object"}
                    /*
                        {
                            "message": {
                                "sent":[],
                                "unknown":[]
                            },
                            "status" : { get_status() }
                        }
                    */
                }
            
            }
        },
        Map : {
            "SMDVersion":"2.0",
            "description": "",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/map",

            "services": {
                "check_star_for_incoming_probe" : {
                    "description": "Retrieves a chunk of the map and returns it as an array of hashes.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"star_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_star" : {
                    "description": "Retrieves a single star",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"star_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     { 
                        "star" : {
                            "name"          : "Sol",
                            "color"         : "yellow",
                            "x"             : -41,
                            "y"             : 27,
                            "bodies"        : [     # only added if a probe is present
                                {
                                    same data as get_status() on /body
                                },
                                ...
                            ]
                        }    
                        "status" : { ... }
                     }
                    */
                },
                "get_star_map" : {
                    "description" : "Retrieves a chunk of the star map (lite version).",
                    "parameters" : [{"name":"args", "type":"object", "optional":false}],
                    "returns" : {"type" : "object"}
                },
                "get_stars" : {
                    "description": "Retrieves a chunk of the map and returns it as an array of hashes.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"x1", "type":"number", "optional":false},
                        {"name":"y1", "type":"number", "optional":false},
                        {"name":"x2", "type":"number", "optional":false},
                        {"name":"y2", "type":"number", "optional":false},
                        {"name":"z", "type":"number", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                     { 
                        "stars" : [
                            {
                                "name"          : "Sol",
                                "can_name"      : 1,
                                "color"         : "yellow",
                                "x"             : -41,
                                "y"             : 27,
                                "z"             : 14,
                                "alignment"     : "self-ally"
                            }.
                            {
                                "name"          : "X143S",
                                "can_name"      : 0,
                                "color"         : "green",
                                "x"             : -42,
                                "y"             : 27,
                                "z"             : 14,
                                "alignments"    : "unprobed"
                            }
                        ],
                        "status" : {...}
                    }
                    */
                },
                "get_star_by_name" : {
                    "description": "Retrieves info on a single star.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "get_star_by_xy" : {
                    "description": "Retrieves info on a single star.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"x", "type":"number", "optional":false},
                        {"name":"y", "type":"number", "optional":false}
                    ],
                    "returns":{"type":"object"}
                },
                "search_stars" : {
                    "description": "If you know a partial name of a star you can search for it. Returns up to 25 results. No body data is returned with this search.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"name", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"number"}
                    /*
                     { 
                        "stars" : [
                            {
                                "name"          : "Sol",
                                "color"         : "yellow",
                                "x"             : -41,
                                "y"             : 27
                            },
                            {
                                "name"          : "Minsol",
                                "color"         : "green",
                                "x"             : -42,
                                "y"             : 27
                            }
                         ],
                        "status" : { ... }
                     }
                    */
                }
            }
        },
        Modules : {
            Parliament : {
                "SMDVersion":"2.0",
                "description": "Parliament",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/parliament",

                "services": {
                    "view_laws" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"body_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_propositions" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_stars_in_jurisdiction" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_bodies_for_star_in_jurisdiction" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "get_mining_platforms_for_asteroid_in_jurisdiction" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"asteroid_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "cast_vote" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"proposition_id", "type":"string", "optional":false},
                            {"name":"vote", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_writ" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"title", "type":"string", "optional":false},
                            {"name":"description", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_repeal_law" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"law_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_transfer_station_ownership" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"to_empire_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_seize_star" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_rename_star" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"star_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_broadcast_on_network19" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_induct_member" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"empire_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_expel_member" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"empire_id", "type":"string", "optional":false},
                            {"name":"message", "type":"string", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_elect_new_leader" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"to_empire_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_rename_asteroid" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"asteroid_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    
                    "propose_rename_uninhabited" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"planet_id", "type":"string", "optional":false},
                            {"name":"name", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_members_only_mining_rights" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_evict_mining_platform" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"platform_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_members_only_excavation" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_evict_excavator" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"platform_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_members_only_colonization" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_neutralize_bhg" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "propose_fire_bfg" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"body_id", "type":"string", "optional":false},
                            {"name":"reason", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            PoliceStation : {
                "SMDVersion":"2.0",
                "description": "Police Station",
                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/policestation",

                "services": {
                    "view_prisoners" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    },
                    "execute_prisoner" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"prisoner_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "release_prisoner" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"prisoner_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_foreign_spies" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false},
                            {"name":"page_number", "type":"number", "optional":true}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            },
            StationCommand : {
                "SMDVersion":"2.0",
                "description": "Station Command",

                "envelope":"JSON-RPC-2.0",
                "transport":"POST",
                "target":"/stationcommand",

                "services": {
                    "view_plans" : {
                        "description": "Returns a list of all the plans you've collected through various means.",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    },
                    "view_incoming_supply_chains" : {
                        "description": "",
                        "parameters": [
                            {"name":"session_id", "type":"string", "optional":false},
                            {"name":"building_id", "type":"string", "optional":false}
                        ],
                        "returns":{"type":"object"}
                    }
                }
            }
        },
        Stats : {
            "SMDVersion":"2.0",
            "description": "SMD service demonstration",

            "envelope":"JSON-RPC-2.0",
            "transport":"POST",
            "target":"/stats",
            
            "services": {

                "credits" : {
                    "description": "Retrieves a list of the game credits. It is an array of hashes of arrays.",
                    "parameters": [],
                    "returns":{"type":"array"}
                },
                
                "empire_rank" : {
                    "description": "Returns a sorted list of empires ranked according to various stats.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"sort_by", "type":"string", "optional":true}, //Defaults to empire_size_rank. Possible values are: empire_size_rank, university_level_rank, offense_success_rate_rank, defense_success_rate_rank, and dirtiest_rank
                        {"name":"page_number", "type":"number", "optional":true}
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { ... },
                        "empires" : [
                            {
                                "empire_id" : "id-goes-here",                   # unique id
                                "empire_name" : "Earthlings",                   # empire name
                                "colony_count" : "1",                           # number of planets colonized
                                "population" : "7000000000",                    # number of citizens on all planets in the empire
                                "empire_size" : "7000000000",                   # size of entire empire
                                "building_count" : "50",                        # number of buildings across all colonies
                                "average_building_level" : "20",                # average level of all buildings across all colonies
                                "offense_success_rate" : "0.793",               # the offense rate of success of spies at all colonies
                                "defense_success_rate" : "0.49312",             # the defense rate of success of spies at all colonies
                                "dirtiest" : "7941"                            # the number of times a spy has attempted to hurt another empire
                              },
                            ...
                        ],
                        "total_empires" : 5939,
                        "page_number" : 3
                     }
                    */
                },
                "find_empire_rank" : {
                    "description": "Search for a particular empire in the empire_rank().",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"sort_by", "type":"string", "optional":false},
                        {"name":"empire_name", "type":"string", "optional":false} //Must be at least 3 characters to search.
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { ... },
                        "empires" : [
                            {
                                "empire_id" : "id-goes-here",
                                "empire_name" : "Earthlings",
                                "page_number" : "54",
                            }
                            ...
                        ]
                     }
                    */
                },
                
                "colony_rank" : {
                    "description": "Returns a sorted list of planets ranked according to various stats.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"sort_by", "type":"string", "optional":true} //Defaults to population_rank. Possible values are: population_rank
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { ... },
                        "colonies" : [
                            {
                                "empire_id" : "id-goes-here",                   # unique id
                                "empire_name" : "Earthlings",                   # empire name
                                "planet_id" : "id-goes-here",                   # unique id
                                "planet_name" : "Earth",                        # name of the planet
                                "population" : "7000000000",                    # number of citizens on planet
                                "building_count" : "50",                        # number of buildings at this colony
                                "average_building_level" : "20",                # average level of all buildings at this colony
                                "highest_building_level" : "26"                 # highest building at this colony
                              },
                            ...
                        ]
                     }
                    */
                },
                "spy_rank" : {
                    "description": "Returns a sorted list of spies ranked according to various stats.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false},
                        {"name":"sort_by", "type":"string", "optional":true} //Defaults to level_rank. Possible values are: level_rank  success_rate_rank and dirtiest_rank
                    ],
                    "returns":{"type":"object"}
                    /*
                     {
                        "status" : { ... },
                        "spies" : [
                            {            
                                "empire_id" : "id-goes-here",                   # unique id
                                "empire_name" : "Earthlings",                   # empire name
                                "spy_id" : "id-goes-here",                      # unique id
                                "spy_name" : "Agent Null",                      # the name of this spy
                                "age" : "3693",                                 # how old is this guy in seconds
                                "level" : "18",                                 # the level of this spy
                                "success_rate" : "0.731",                       # the rate of success this spy has had for both offense and defensive tasks
                                "dirtiest" : "7941",                            # the number of times a spy has attempted to hurt another empire
                            },
                            ...
                        ]
                     }
                    */
                },
                "weekly_medal_winners" : {
                    "description": "Returns a list of the empires who won this week's weekly medals.",
                    "parameters": [
                        {"name":"session_id", "type":"string", "optional":false}
                    ],
                    "returns":{"type":"object"}
                    /*
                    {
                        "status" : { ... },
                        "winners" : [
                            {
                                "empire_id" : "id-goes-here",
                                "empire_name" : "Earthlings",
                                "medal_name" : "Dirtiest Player In The Game",
                                "medal_image" : "dirtiest1",
                                "times_earned" : 4,
                            },
                            ...
                        ]
                     }
                    */
                }
        
            }
        }
    };

    YAHOO.lacuna.SMD = { Services:smd };
})();
YAHOO.register("smd", YAHOO.lacuna.SMD, {version: "1", build: "0"}); 

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/smd.js","/")
},{"buffer":71,"oMfpAn":75}],66:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.SpeciesDesigner == "undefined" || !YAHOO.lacuna.SpeciesDesigner) {

(function(){
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Slider = YAHOO.widget.Slider,
        Lib = Lacuna.Library;

    var SpeciesDesigner = function( config ) {
        if ( (typeof config !== 'undefined') && (typeof config.templates !== 'undefined') && ! config.templates ) {
            this.speciesTemplates = [];
        }
        else {
            this.speciesTemplates = [
                {
                    name : 'Average',
                    description : 'Not specializing in any area, but without any particular weaknesses.',
                    min_orbit: 3,
                    max_orbit: 3,
                    manufacturing_affinity: 4,
                    deception_affinity: 4,
                    research_affinity: 4,
                    management_affinity: 4,
                    farming_affinity: 4,
                    mining_affinity: 4,
                    science_affinity: 4,
                    environmental_affinity: 4,
                    political_affinity: 4,
                    trade_affinity: 4,
                    growth_affinity : 4
                },
                {
                    name : 'Resilient',
                    description : 'Resilient and able to colonize most any planet.  Somewhat docile, but very quick learners and above average at producing any resource.',
                    min_orbit: 2,
                    max_orbit: 7,
                    manufacturing_affinity: 3,
                    deception_affinity: 3,
                    research_affinity: 3,
                    management_affinity: 5,
                    farming_affinity: 5,
                    mining_affinity: 5,
                    science_affinity: 5,
                    environmental_affinity: 5,
                    political_affinity: 1,
                    trade_affinity: 1,
                    growth_affinity : 3
                },
                {
                    name : 'Warmonger',
                    description : 'Adept at ship building and espionage. They are bent on domination.',
                    min_orbit: 4,
                    max_orbit: 5,
                    manufacturing_affinity: 4,
                    deception_affinity: 7,
                    research_affinity: 2,
                    management_affinity: 4,
                    farming_affinity: 2,
                    mining_affinity: 2,
                    science_affinity: 7,
                    environmental_affinity: 2,
                    political_affinity: 7,
                    trade_affinity: 1,
                    growth_affinity : 5
                },
                {
                    name : 'Viral',
                    description : 'Proficient at growing at the most expedient pace like a virus in the Expanse.',
                    min_orbit: 1,
                    max_orbit: 7,
                    manufacturing_affinity: 1,
                    deception_affinity: 4,
                    research_affinity: 7,
                    management_affinity: 7,
                    farming_affinity: 1,
                    mining_affinity: 1,
                    science_affinity: 1,
                    environmental_affinity: 1,
                    political_affinity: 7,
                    trade_affinity: 1,
                    growth_affinity : 7
                },
                {
                    name : 'Trader',
                    description : 'Masters of commerce and ship building.',
                    min_orbit: 2,
                    max_orbit: 3,
                    manufacturing_affinity: 5,
                    deception_affinity: 4,
                    research_affinity: 7,
                    management_affinity: 7,
                    farming_affinity: 1,
                    mining_affinity: 1,
                    science_affinity: 7,
                    environmental_affinity: 1,
                    political_affinity: 1,
                    trade_affinity: 7,
                    growth_affinity : 2
                }
            ];
        }
    };
    SpeciesDesigner.prototype = {
        render : function(el) {
            el = Dom.get(el);
            var container = document.createElement('div');
            this.container = container;
            container.innerHTML = this._getHtml();
            
            this.elMessage = Sel.query(".speciesMessage", container, true);
            this.elName = Sel.query(".speciesName", container, true);
            this.elDesc = Sel.query(".speciesDesc", container, true);
            this.elTemplates = Sel.query(".speciesTemplates", container, true);
            if (this.speciesTemplates.length > 0) {
                Event.delegate(this.elTemplates, 'click', function(e, matchedEl) {
                    Event.stopEvent(e);
                    this.selectTemplate(matchedEl.TemplateIndex);
                }, '.speciesTemplate', this, true);
                
                for (var i = 0; i < this.speciesTemplates.length; i++) {
                    var template = this.speciesTemplates[i];
                    var tButton = document.createElement('button');
                    tButton.innerHTML = template.name;
                    tButton.title = template.description;
                    tButton.TemplateIndex = i;
                    Dom.addClass(tButton, 'speciesTemplate');
                    this.elTemplates.appendChild(tButton);
                }
            }
            else {
                Dom.setStyle(Sel.query(".speciesButtons", container, true), 'display', 'none');
            }
            el.appendChild(container);
            this._createSliders();
            this._createTooltips();
            if (this.speciesTemplates.length > 0) {
                this.selectTemplate(0);
            }
        },
        _createSliders : function() {
            this.speciesHO = this._createHabitableOrbits();
            this.speciesConst = this._createHorizSingle("speciesConst", "speciesConst_thumb", "speciesConst_num");
            this.speciesDecep = this._createHorizSingle("speciesDecep", "speciesDecep_thumb", "speciesDecep_num");
            this.speciesResearch = this._createHorizSingle("speciesResearch", "speciesResearch_thumb", "speciesResearch_num");
            this.speciesManagement = this._createHorizSingle("speciesManagement", "speciesManagement_thumb", "speciesManagement_num");
            this.speciesFarming = this._createHorizSingle("speciesFarming", "speciesFarming_thumb", "speciesFarming_num");
            this.speciesMining = this._createHorizSingle("speciesMining", "speciesMining_thumb", "speciesMining_num");
            this.speciesScience = this._createHorizSingle("speciesScience", "speciesScience_thumb", "speciesScience_num");
            this.speciesEnviro = this._createHorizSingle("speciesEnviro", "speciesEnviro_thumb", "speciesEnviro_num");
            this.speciesPolitical = this._createHorizSingle("speciesPolitical", "speciesPolitical_thumb", "speciesPolitical_num");
            this.speciesTrade = this._createHorizSingle("speciesTrade", "speciesTrade_thumb", "speciesTrade_num");
            this.speciesGrowth = this._createHorizSingle("speciesGrowth", "speciesGrowth_thumb", "speciesGrowth_num");
            
            this.elTotal = Sel.query(".speciesPointTotal", this.container, true);
            this.elTotal.innerHTML = 45;
            this.elTotalLine = Sel.query(".speciesPointLine", this.container, true);
            
            var updateTotal = function() {
                var total = this.getSpeciesData().affinity_total;
                this.elTotal.innerHTML = total;
                
                if(total > 45) {
                    Dom.removeClass(this.elTotalLine, "speciesPointsValid");
                    Dom.removeClass(this.elTotalLine, "speciesPointsLow");
                    Dom.addClass(this.elTotalLine, "speciesPointsInvalid");
                }
                else if(total == 45) {
                    Dom.addClass(this.elTotalLine, "speciesPointsValid");
                    Dom.removeClass(this.elTotalLine, "speciesPointsLow");
                    Dom.removeClass(this.elTotalLine, "speciesPointsInvalid");
                }
                else {
                    Dom.removeClass(this.elTotalLine, "speciesPointsValid");
                    Dom.addClass(this.elTotalLine, "speciesPointsLow");
                    Dom.removeClass(this.elTotalLine, "speciesPointsInvalid");
                }
            };
            
            this.speciesHO.subscribe('change', updateTotal, this, true);
            this.speciesConst.subscribe('change', updateTotal, this, true);
            this.speciesDecep.subscribe('change', updateTotal, this, true);
            this.speciesResearch.subscribe('change', updateTotal, this, true);
            this.speciesManagement.subscribe('change', updateTotal, this, true);
            this.speciesFarming.subscribe('change', updateTotal, this, true);
            this.speciesMining.subscribe('change', updateTotal, this, true);
            this.speciesScience.subscribe('change', updateTotal, this, true);
            this.speciesEnviro.subscribe('change', updateTotal, this, true);
            this.speciesPolitical.subscribe('change', updateTotal, this, true);
            this.speciesTrade.subscribe('change', updateTotal, this, true);
            this.speciesGrowth.subscribe('change', updateTotal, this, true);
        },
        _createTooltips : function() {
            this._affinityTooltip = new YAHOO.widget.Tooltip(Dom.generateId(), {
                //iframe:true,
                zIndex:1,
                container: this.container,
                xyoffset:[0,10],
                context: Sel.query('.speciesAffinities label', this.container)
            });
        },
        _createHabitableOrbits : function () {
            var range = 180,
                tickSize = 30,
                from = Sel.query(".speciesHO_from", this.container, true),
                to = Sel.query(".speciesHO_to", this.container, true);

            // Create the DualSlider
            var YW = YAHOO.widget;

            var elMinThumb = Sel.query('.speciesHO_min_thumb', this.container, true);
            elMinThumb.id = Dom.generateId();
            var elMin = Sel.query('.speciesHO_min', this.container, true);
            elMin.id = Dom.generateId();
            var elMaxThumb = Sel.query('.speciesHO_max_thumb', this.container, true);
            elMaxThumb.id = Dom.generateId();
            var elMax = Sel.query('.speciesHO_max', this.container, true);
            elMax.id = Dom.generateId();
            var elSlider = Sel.query(".speciesHO", this.container, true);
            elSlider.id = Dom.generateId();

            var mint = new YW.SliderThumb(elMinThumb.id, elMin.id, 0, range, 0, 0, tickSize);
            var maxt = new YW.SliderThumb(elMaxThumb.id, elMax.id, 0, range, 0, 0, tickSize);

            var mins = new YW.Slider(elSlider.id, elSlider.id, mint, "horiz");
            var maxs = new YW.Slider(elSlider.id, elSlider.id, maxt, "horiz");
            var slider = new YW.DualSlider(mins, maxs, range, [90,90]);
            var mintSetX = mint.setXConstraint;
            mint.setXConstraint = function (iLeft, iRight, iTickSize) {
                if (slider.minLock) {
                    iRight = ( slider.minLock - 1 ) * iTickSize;
                }
                else {
                    iRight += iTickSize * 1.5;
                }
                mintSetX.apply(mint, [iLeft, iRight, iTickSize]);
            };
            var maxtSetX = maxt.setXConstraint;
            maxt.setXConstraint = function (iLeft, iRight, iTickSize) {
                if (slider.maxLock) {
                    iLeft = ( 1 - slider.maxLock ) * iTickSize;
                }
                else {
                    iLeft += iTickSize;
                }
                maxtSetX.apply(maxt, [iLeft, iRight, iTickSize]);
            };
            
            // slider.minRange = -15;
            // Decorate the DualSlider instance with some new properties and
            // methods to maintain the highlight element
            YAHOO.lang.augmentObject(slider, {
                setLocks : function(min, max) {
                    this.minLock = min;
                    this.maxLock = max;
                    var delta = max - min;
                    Dom.setStyle(this._lock,'display', 'block');
                    Dom.setStyle(this._lock,'left', ( min * tickSize - 23 ) + 'px');
                    Dom.setStyle(this._lock,'width', Math.max(delta * tickSize,0) + 'px');
                },
                minLock : undefined,
                maxLock : undefined,
                _lock : Sel.query('.speciesSlider_lock', elSlider, true),
                // The highlight element
                _highlight : Sel.query('.speciesHO_highlight', this.container, true),
                // A method to update the status and update the highlight
                updateHighlight : function () {
                    var delta = this.maxVal - this.minVal;
                    Dom.setStyle(this._highlight,'left', (this.minVal - 5) + 'px');
                    Dom.setStyle(this._highlight,'width', Math.max(delta + 27,0) + 'px');
                },
                getMinOrbit : function() {
                    return Math.round((this.minVal - 14) / tickSize) + 1;
                },
                getMaxOrbit : function() {
                    return Math.round((this.maxVal + 14) / tickSize) + 1;
                },
                setMinOrbit : function(orbit, skipAnim, force, silent) {
                    var value = (orbit - 1) * tickSize + 14;
                    this.setMinValue(value, skipAnim, force, silent);
                    return orbit;
                },
                setMaxOrbit : function(orbit, skipAnim, force, silent) {
                    var value = (orbit - 1) * tickSize - 14;
                    this.setMaxValue(value, skipAnim, force, silent);
                    return orbit;
                },
                setOrbits : function(minOrbit, maxOrbit, skipAnim, force, silent) {
                    var min = (minOrbit - 1) * tickSize + 14;
                    var max = (maxOrbit - 1) * tickSize - 14;
                    this.setValues(min, max, skipAnim, force, silent);
                }
            },true);
            // Attach the highlight method to the slider's change event
            slider.subscribe('change',slider.updateHighlight,slider,true);
            //this.Dialog.showEvent.subscribe(slider.updateHighlight,slider,true);
            slider.updateHighlight();

            var updateUI = function () {
                from.innerHTML = this.getMinOrbit();
                to.innerHTML = this.getMaxOrbit();
            };
            slider.subscribe('ready', updateUI);
            slider.subscribe('change', updateUI);

            return slider;
        },
        _createHorizSingle : function (container, thumb, num) {
            var range = 180,
                tickSize = 30,
                elNum = Sel.query('.'+num, this.container, true);
            container = Sel.query('.'+container, this.container, true);
            container.id = Dom.generateId();
            thumb = Sel.query('.'+thumb, this.container, true);
            thumb.id = Dom.generateId();
            // Create the Slider
            var slider = Slider.getHorizSlider(container.id,
                thumb.id, 0, range, tickSize);
            slider.key = container.id;
            YAHOO.lang.augmentObject(slider, {
                setLock : function(min) {
                    Dom.setStyle(this._lock,'display', 'block');
                    Dom.setStyle(this._lock,'left', '0px');
                    Dom.setStyle(this._lock,'width', ((min - 1) * tickSize + 8) + 'px');
                    this.thumb.setXConstraint((1 - min) * tickSize, range, tickSize);
                },
                _lock : Sel.query('.speciesSlider_lock', container, true),
                getAffinity : function() {
                    return Math.round(this.getValue() / tickSize + 1);
                },
                setAffinity : function(affinity, skipAnim, force, silent) {
                    var value = (affinity - 1) * tickSize;
                    this.setValue(value, skipAnim, force, silent);
                    return affinity;
                }
            }, true);
            slider.setAffinity(4);
            var updateUI = function () {
                elNum.innerHTML = this.getAffinity();
            };
            slider.subscribe('ready', updateUI);
            slider.subscribe('change', updateUI);

            return slider;
        },
        getSpeciesData : function() {
            var data = {
                name: this.elName.value,
                description: this.elDesc.value.substr(0,1024),
                min_orbit: this.speciesHO.getMinOrbit(),
                max_orbit: this.speciesHO.getMaxOrbit(),
                manufacturing_affinity: this.speciesConst.getAffinity(),
                deception_affinity: this.speciesDecep.getAffinity(),
                research_affinity: this.speciesResearch.getAffinity(),
                management_affinity: this.speciesManagement.getAffinity(),
                farming_affinity: this.speciesFarming.getAffinity(),
                mining_affinity: this.speciesMining.getAffinity(),
                science_affinity: this.speciesScience.getAffinity(),
                environmental_affinity: this.speciesEnviro.getAffinity(),
                political_affinity: this.speciesPolitical.getAffinity(),
                trade_affinity: this.speciesTrade.getAffinity(),
                growth_affinity : this.speciesGrowth.getAffinity()
            };
            data.affinity_total =
                data.max_orbit - data.min_orbit + 1 +
                data.manufacturing_affinity +
                data.deception_affinity +
                data.research_affinity +
                data.management_affinity +
                data.farming_affinity +
                data.mining_affinity +
                data.science_affinity +
                data.environmental_affinity +
                data.political_affinity +
                data.trade_affinity +
                data.growth_affinity;
            return data;
        },
        setSpeciesData : function(data) {
            this.elName.value = data.name;
            this.elDesc.value = data.description;
            this.speciesHO.setOrbits(data.min_orbit, data.max_orbit, true, true);
            this.speciesConst.setAffinity(data.manufacturing_affinity,true,true);
            this.speciesDecep.setAffinity(data.deception_affinity,true,true);
            this.speciesResearch.setAffinity(data.research_affinity,true,true);
            this.speciesManagement.setAffinity(data.management_affinity,true,true);
            this.speciesFarming.setAffinity(data.farming_affinity,true,true);
            this.speciesMining.setAffinity(data.mining_affinity,true,true);
            this.speciesScience.setAffinity(data.science_affinity,true,true);
            this.speciesEnviro.setAffinity(data.environmental_affinity,true,true);
            this.speciesPolitical.setAffinity(data.political_affinity,true,true);
            this.speciesTrade.setAffinity(data.trade_affinity,true,true);
            this.speciesGrowth.setAffinity(data.growth_affinity,true,true);
        },
        setSpeciesLocks : function(data) {
            this.speciesHO.setLocks(data.min_orbit, data.max_orbit);
            this.speciesGrowth.setLock(data.min_growth);
        },
        compareSpeciesData : function (species1, species2) {
            return (
                species1.manufacturing_affinity == species2.manufacturing_affinity &&
                species1.deception_affinity     == species2.deception_affinity &&
                species1.research_affinity      == species2.research_affinity &&
                species1.management_affinity    == species2.management_affinity &&
                species1.farming_affinity       == species2.farming_affinity &&
                species1.mining_affinity        == species2.mining_affinity &&
                species1.science_affinity       == species2.science_affinity &&
                species1.environmental_affinity == species2.environmental_affinity &&
                species1.political_affinity     == species2.political_affinity &&
                species1.trade_affinity         == species2.trade_affinity &&
                species1.growth_affinity        == species2.growth_affinity
            );
        },
        setExpert : function() {
            this._expert = true;
        },
        clearExpert : function() {
            delete this._expert;
        },
        needsExpert : function (data) {
            return (
                data.manufacturing_affinity == 1 ||
                data.deception_affinity == 1 ||
                data.research_affinity == 1 ||
                data.management_affinity == 1 ||
                data.farming_affinity == 1 ||
                data.mining_affinity == 1 ||
                data.science_affinity == 1 ||
                data.environmental_affinity == 1 ||
                data.political_affinity == 1 ||
                data.trade_affinity == 1 ||
                data.growth_affinity == 1
            );
        },
        selectTemplate : function(index) {
            var data = this.speciesTemplates[index];
            this.setSpeciesData(data);
        },
        validateSpecies : function(data) {
            if (data.affinity_total > 45) {
                throw "You can only have a maximum of 45 points.";
            }
            else if (data.affinity_total < 45) {
                throw "You must use exactly 45 points.";
            }
            else if ( ! this._expert && this.needsExpert(data) ) {
                if (confirm("Setting an affinity to 1 is an expert setting, and is not recommended unless you're absolutely sure you know what you're doing.  Are you sure you want to continue?")) {
                    this._expert = true;
                }
                else {
                    return false;
                }
            }
            return true;
        },
        _getHtml : function() {
            var nameId = Dom.generateId();
            var descId = Dom.generateId();
            return [
                '<div class="speciesButtons">',
                '    Presets: ',
                '    <span class="speciesTemplates">',
                '    </span>',
                '</div>',
                '<div class="speciesCreate">',
                '    <ul>',
                '        <li style="margin-bottom:3px;"><label for="',nameId,'">Species Name</label><input id="',nameId,'" type="text" class="speciesName" maxlength="30" size="30" /></label></li>',
                '        <li><label for="',descId,'">Description</label><textarea id="',descId,'" class="speciesDesc" cols="40" rows="4"></textarea></li>',
                '        <li style="margin: 10px 0;"><span class="affinitiesLabel">Affinities:</span><span class="speciesPointLine speciesPointsValid"><label>Points</label><span class="speciesPointTotal">0</span>/45</span></li>',
                '    </ul>',
                '    <div class="yui-g speciesAffinities">',
                '        <div class="yui-u first">',
                '            <ul>',
                '                <li><label title="Determines the orbits your species can inhabit. Orbits 2-5 have the most abundant food. Orbits 1,6 and 7 have less competition from other players.">Habitable Orbits</label>',
                '                    <div class="speciesHO speciesSlider_bg" title="Habitable Orbits Selector">',
                '                        <span class="speciesHO_highlight"></span>',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesHO_min">',
            '                                 <div class="speciesHO_min_thumb speciesSliderThumb"><span class="speciesHO_from thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb-half-left.png" /></div>',
                '                        </div>',
                '                        <div class="speciesHO_max">',
                '                            <div class="speciesHO_max_thumb speciesSliderThumb"><span class="speciesHO_to thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb-half-right.png" /></div>',
                '                        </div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases the output of buildings that convert one resource into another.">Manufacturing</label>',
                '                    <div class="speciesConst speciesSlider_bg" title="Manufacturing Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesConst_thumb speciesSliderThumb"><span class="speciesConst_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Determines how skilled your spies are naturally.">Deception</label>',
                '                    <div class="speciesDecep speciesSlider_bg" title="Deception Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesDecep_thumb speciesSliderThumb"><span class="speciesDecep_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Decreases the amount of resources it takes to upgrade buildings.">Research</label>',
                '                    <div class="speciesResearch speciesSlider_bg" title="Research Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesResearch_thumb speciesSliderThumb"><span class="speciesResearch_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Decreases the amount of time it takes to build and process everything.">Management</label>',
                '                    <div class="speciesManagement speciesSlider_bg" title="Management Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesManagement_thumb speciesSliderThumb"><span class="speciesManagement_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases your production of food.">Farming</label>',
                '                    <div class="speciesFarming speciesSlider_bg" title="Farming Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesFarming_thumb speciesSliderThumb"><span class="speciesFarming_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '            </ul>',
                '        </div>',
                '        <div class="yui-u">',
                '            <ul>',
                '                <li><label title="Increases your production of ore.">Mining</label>',
                '                    <div class="speciesMining speciesSlider_bg" title="Mining Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesMining_thumb speciesSliderThumb"><span class="speciesMining_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases production from power plants, and technological upgrades such as the Propulsion Factory.">Science</label>',
                '                    <div class="speciesScience speciesSlider_bg" title="Science Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesScience_thumb speciesSliderThumb"><span class="speciesScience_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases your production of water, and decreases your production of waste.">Environmental</label>',
                '                    <div class="speciesEnviro speciesSlider_bg" title="Environmental Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesEnviro_thumb speciesSliderThumb"><span class="speciesEnviro_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases happiness production, and lowers the cost of settling new colonies.">Political</label>',
                '                    <div class="speciesPolitical speciesSlider_bg" title="Political Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesPolitical_thumb speciesSliderThumb"><span class="speciesPolitical_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Increases the amount of goods that can be hauled on cargo ships and transported through Subspace Transporters, and gives you some advantages trading with Lacuna Expanse Corp.">Trade</label>',
                '                    <div class="speciesTrade speciesSlider_bg" title="Trade Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesTrade_thumb speciesSliderThumb"><span class="speciesTrade_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '                <li><label title="Sets the starting size of your Planetary Command Center on each colony you create, which gives you more starting production and storage.">Growth</label>',
                '                    <div class="speciesGrowth speciesSlider_bg" title="Growth Selector">',
                '                        <span class="speciesSlider_lock"><span class="speciesSlider_lock_bg"></span></span>',
                '                        <div class="speciesGrowth_thumb speciesSliderThumb"><span class="speciesGrowth_num thumbDisplay">1</span><img src="',Lib.AssetUrl,'ui/web/slider-thumb.png" /></div>',
                '                    </div>',
                '                </li>',
                '            </ul>',
                '        </div>',
                '    </div>',
                '</div>'
            ].join('');
        }
    };
    //YAHOO.lang.augmentProto(SpeciesDesigner, Util.EventProvider);

    Lacuna.SpeciesDesigner = SpeciesDesigner;
})();
YAHOO.register("speciesDesigner", YAHOO.lacuna.SpeciesDesigner, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/speciesDesigner.js","/")
},{"buffer":71,"oMfpAn":75}],67:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

if (typeof YAHOO.lacuna.Stats == "undefined" || !YAHOO.lacuna.Stats) {

(function(){
    var Lang = YAHOO.lang,
        Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Sel = Util.Selector,
        Lacuna = YAHOO.lacuna,
        Game = Lacuna.Game,
        Lib = Lacuna.Library;

    var Stats = function() {
        this.id = "stats";

        var container = document.createElement("div");
        container.id = this.id;
        Dom.addClass(container, Lib.Styles.HIDDEN);
        container.innerHTML = this._getHtml();
        document.body.insertBefore(container, document.body.firstChild);

        this.Panel = new YAHOO.widget.Panel(this.id, {
            constraintoviewport:true,
            visible:false,
            draggable:true,
            effect:Game.GetContainerEffect(),
            underlay:false,
            close:true,
            width:"750px",
            zIndex:9999
        });
        this.Panel.renderEvent.subscribe(function(){
            Dom.removeClass(this.id, Lib.Styles.HIDDEN);
            this.tabView = new YAHOO.widget.TabView("statsTabs");
            this.tabView.set('activeIndex',0);

            //subscribe after adding so active doesn't fire
            this.tabView.getTab(1).subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.AllianceStats();
                }
            }, this, true);
            this.tabView.getTab(2).subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.ColonyStats();
                }
            }, this, true);
            this.tabView.getTab(3).subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.SpyStats();
                }
            }, this, true);
            this.tabView.getTab(4).subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.WeeklyMedalStats();
                }
            }, this, true);
            this.tabView.getTab(5).subscribe("activeChange", function(e) {
                if(e.newValue) {
                    this.getServerStats();
                }
            }, this, true);

            this.generalTabView = new YAHOO.widget.TabView("statsGeneralTabs", {orientation:"left"});
            this.generalTabView.set('activeIndex',0);

            this.statsGeneralBodies = Dom.get("statsGeneralBodies");
            this.statsGeneralBuildings = Dom.get("statsGeneralBuildings");
            this.statsGeneralEmpires = Dom.get("statsGeneralEmpires");
            this.statsGeneralOrbits = Dom.get("statsGeneralOrbits");
            this.statsGeneralShips = Dom.get("statsGeneralShips");
            this.statsGeneralSpies = Dom.get("statsGeneralSpies");
            this.statsGeneralStars = Dom.get("statsGeneralStars");
            this.statsGeneralGlyphs = Dom.get("statsGeneralGlyphs");
        }, this, true);
        this.Panel.render();
        Game.OverlayManager.register(this.Panel);
    };
    Stats.prototype = {
        _getHtml : function() {
            return [
            '    <div class="hd">Universe Stats</div>',
            '    <div class="bd">',
            '        <div id="statsTabs" class="yui-navset">',
            '            <ul class="yui-nav">',
            '                <li><a href="#statsEmpire"><em>Empires</em></a></li>',
            '                <li><a href="#statsAlliance"><em>Alliances</em></a></li>',
            '                <li><a href="#statsColony"><em>Colonies</em></a></li>',
            '                <li><a href="#statsSpy"><em>Spies</em></a></li>',
            '                <li><a href="#statsWeeklyMedal"><em>Weekly Medals</em></a></li>',
            '                <li><a href="#statsGeneral"><em>General</em></a></li>',
            '            </ul>',
            '            <div id="oHt" class="yui-content">',
            '                <div id="statsEmpire"><div><label style="font-weight:bold;display:inline-block;width:50px;">Find:</label><span style="display:inline-block;width:300px;"><input type="text" id="statsEmpireFind" /></span></div><div id="statsEmpireTable"></div><div id="statsEmpirePaginator"></div></div>',
            '                <div id="statsAlliance"><div><label style="font-weight:bold;display:inline-block;width:50px;">Find:</label><span style="display:inline-block;width:300px;"><input type="text" id="statsAllianceFind" /></span></div><div id="statsAllianceTable"></div><div id="statsAlliancePaginator"></div></div>',
            '                <div id="statsColony"><div id="statsColonyTable"></div></div>',
            '                <div id="statsSpy"><div id="statsSpyTable"></div></div>',
            '                <div id="statsWeeklyMedal"><div id="statsWeeklyMedalTable"></div></div>',
            '                <div id="statsGeneral">',
            '                    <div id="statsGeneralTabs" class="yui-navset">',
            '                        <ul class="yui-nav">',
            '                            <li><a href="#statsGeneralBodies"><em>Bodies</em></a></li>',
            '                            <li><a href="#statsGeneralBuildings"><em>Buildings</em></a></li>',
            '                            <li><a href="#statsGeneralEmpires"><em>Empires</em></a></li>',
            '                            <li><a href="#statsGeneralOrbits"><em>Orbits</em></a></li>',
            '                            <li><a href="#statsGeneralShips"><em>Ships</em></a></li>',
            '                            <li><a href="#statsGeneralSpies"><em>Spies</em></a></li>',
            '                            <li><a href="#statsGeneralStars"><em>Stars</em></a></li>',
            '                            <li><a href="#statsGeneralGlyphs"><em>Glyphs</em></a></li>',
            '                        </ul>',
            '                        <div id="sHt" class="yui-content" style="overflow:auto;">',
            '                            <div id="statsGeneralBodies">',
            '                            </div>',
            '                            <div id="statsGeneralBuildings">',
            '                            </div>',
            '                            <div id="statsGeneralEmpires">',
            '                            </div>',
            '                            <div id="statsGeneralOrbits">',
            '                            </div>',
            '                            <div id="statsGeneralShips">',
            '                            </div>',
            '                            <div id="statsGeneralSpies">',
            '                            </div>',
            '                            <div id="statsGeneralStars">',
            '                            </div>',
            '                            <div id="statsGeneralGlyphs">',
            '                            </div>',
            '                        </div>',
            '                    </div>',
            '                </div>',
            '            </div>',
            '        </div>',
            '    </div>',
            '    <div class="ft"></div>'
            ].join('');
        },

        getServerStats : function(){
            Lacuna.Pulser.Show();
            Util.Connect.asyncRequest('GET', 'server_overview.json', {
                success: function(o) {
                    YAHOO.log(o, "info", "Stats.populateServerStats.success");
                    Lacuna.Pulser.Hide();
                    try {
                        this._serverOverview = Lang.JSON.parse(o.responseText);
                        this.populateServerStats();
                    }
                    catch(ex) {
                        YAHOO.log(ex);
                    }
                },
                scope: this
            });
        },
        populateServerStats : function() {
            var data = this._serverOverview;

            Event.purgeElement(this.statsGeneralBodies);
            Event.purgeElement(this.statsGeneralBuildings);
            Event.purgeElement(this.statsGeneralOrbits);
            Event.purgeElement(this.statsGeneralShips);

            this.statsGeneralBodies.innerHTML = this._getBodiesHtml();
            this.statsGeneralBuildings.innerHTML = this._getBuildingsHtml();
            this.statsGeneralEmpires.innerHTML = this._getEmpiresHtml();
            this.statsGeneralOrbits.innerHTML = this._getOrbitsHtml();
            this.statsGeneralShips.innerHTML = this._getShipsHtml();
            this.statsGeneralSpies.innerHTML = this._getSpiesHtml();
            this.statsGeneralStars.innerHTML = this._getStarsHtml();
            this.statsGeneralGlyphs.innerHTML = this._getGlyphsHtml();

            Event.delegate(this.statsGeneralBodies, "click", this.expander, "label.statsSubHeader");
            Event.delegate(this.statsGeneralBuildings, "click", this.expander, "label.statsSubHeader");
            Event.delegate(this.statsGeneralOrbits, "click", this.expander, "label.statsSubHeader");
            Event.delegate(this.statsGeneralShips, "click", this.expander, "label.statsSubHeader");

            /*var r = Raphael("raphaelHolder"),
                fin = function () {
                    this.flag = r.g.popup(this.bar.x, this.bar.y, this.bar.value || "0").insertBefore(this);
                },
                fout = function () {
                    if(this.flag) {
                        this.flag.animate({opacity: 0}, 300, function () {this.remove();});
                    }
                },
                orbits = this._serverOverview.orbits;
            r.g.hbarchart(5, 10, 500, 400, [
                [orbits[1].bodies, orbits[2].bodies, orbits[3].bodies, orbits[4].bodies, orbits[5].bodies, orbits[6].bodies, orbits[7].bodies, orbits[8].bodies],
                [orbits[1].inhabited, orbits[2].inhabited, orbits[3].inhabited, orbits[4].inhabited, orbits[5].inhabited, orbits[6].inhabited, orbits[7].inhabited, orbits[8].inhabited]
            ], {
                type:"soft"
            }).hover(fin, fout).label([
                ["Orbit 1 Bodies", "Orbit 2 Bodies", "Orbit 3 Bodies", "Orbit 4 Bodies", "Orbit 5 Bodies", "Orbit 6 Bodies", "Orbit 7 Bodies", "Orbit 8 Bodies"],
                ["Orbit 1 Inhabited", "Orbit 2 Inhabited", "Orbit 3 Inhabited", "Orbit 4 Inhabited", "Orbit 5 Inhabited", "Orbit 6 Inhabited", "Orbit 7 Inhabited", "Orbit 8 Inhabited"]
            ],true);*/

        },
        expander : function(e, matchedEl, container){
            var ul = Sel.query("ul", matchedEl.parentNode, true);
            Dom.setStyle(ul, "display", (Dom.getStyle(ul, "display") == "none" ? "" : "none"));
        },
        _getBodiesHtml : function() {
            var data = this._serverOverview.bodies;
            return [
                '<ul class="statsList">',
                '<li><label>Total Bodies:</label>', Lib.formatNumber(data.count), '</li>',
                '<li><label>Colonies:</label>', Lib.formatNumber(data.colony_count), '</li>',
                '<li><label>Types</label>',
                '    <ul class="statsSubList">',
                '    <li><label class="statsSubHeader">Asteroids</label>',
                '        <ul style="display:none;">',
                '        <li><label>Total:</label>', Lib.formatNumber(data.types.asteroids.count), '</li>',
                '        <li><label>Average Orbit:</label>', data.types.asteroids.average_orbit, '</li>',
                '        <li><label>Average Size:</label>', data.types.asteroids.average_size, '</li>',
                '        <li><label>Largest Size:</label>', data.types.asteroids.largest_size, '</li>',
                '        <li><label>Smallest Size:</label>', data.types.asteroids.smallest_size, '</li>',
                '        </ul>',
                '    </li>',
                '    <li><label class="statsSubHeader">Gas Giants</label>',
                '        <ul style="display:none;">',
                '        <li><label>Total:</label>', Lib.formatNumber(data.types.gas_giants.count), '</li>',
                '        <li><label>Average Orbit:</label>', data.types.gas_giants.average_orbit, '</li>',
                '        <li><label>Average Size:</label>', data.types.gas_giants.average_size, '</li>',
                '        <li><label>Largest Size:</label>', data.types.gas_giants.largest_size, '</li>',
                '        <li><label>Smallest Size:</label>', data.types.gas_giants.smallest_size, '</li>',
                '        </ul>',
                '    </li>',
                '    <li><label class="statsSubHeader">Habitables</label>',
                '        <ul style="display:none;">',
                '        <li><label>Total:</label>', Lib.formatNumber(data.types.habitables.count), '</li>',
                '        <li><label>Average Orbit:</label>', data.types.habitables.average_orbit, '</li>',
                '        <li><label>Average Size:</label>', data.types.habitables.average_size, '</li>',
                '        <li><label>Largest Size:</label>', data.types.habitables.largest_size, '</li>',
                '        <li><label>Smallest Size:</label>', data.types.habitables.smallest_size, '</li>',
                '        </ul>',
                '    </li>',
                '    <li><label class="statsSubHeader">Stations</label>',
                '        <ul style="display:none;">',
                '        <li><label>Total:</label>', Lib.formatNumber(data.types.stations.count), '</li>',
                '        <li><label>Average Orbit:</label>', data.types.stations.average_orbit, '</li>',
                '        <li><label>Average Size:</label>', data.types.stations.average_size, '</li>',
                '        <li><label>Largest Size:</label>', data.types.stations.largest_size, '</li>',
                '        <li><label>Smallest Size:</label>', data.types.stations.smallest_size, '</li>',
                '        </ul>',
                '    </li>',
                '    </ul>',
                '</li>',
                '</ul>'
            ].join('');
        },
        _getBuildingsHtml : function() {
            var data = this._serverOverview.buildings,
                output = ['<ul class="statsList">',
                '<li><label>Total Buildings:</label>', Lib.formatNumber(data.count), '</li>',
                '<li><label>Types</label><ul class="statsSubList">'];

            var btArr = [];
            for(var bt in data.types) {
                if(data.types.hasOwnProperty(bt)) {
                    btArr[btArr.length] = bt;
                }
            }
            btArr.sort();

            for(var b=0, bLen = btArr.length; b<bLen; b++) {
                var key = btArr[b];
                output.push(['<li><label class="statsSubHeader">',key,'</label>',
                '    <ul style="display:none;">',
                '    <li><label>Total:</label>', Lib.formatNumber(data.types[key].count), '</li>',
                '    <li><label>Average Level:</label>', data.types[key].average_level, '</li>',
                '    <li><label>Highest Level:</label>', data.types[key].highest_level, '</li>',
                '    </ul>',
                '</li>'].join(''));
            }

            output.push('</ul></li></ul>');
            return output.join('');
        },
        _getEmpiresHtml : function() {
            var data = this._serverOverview.empires;
            return ['<ul class="statsList">',
                '<li><label>Total Empires:</label>', Lib.formatNumber(data.count), '</li>',
                '<li><label>Active This Week:</label>', Lib.formatNumber(data.active_this_week_count), '</li>',
                '<li><label>Active Today:</label>', Lib.formatNumber(data.active_today_count), '</li>',
                '<li><label>Currently Active:</label>', Lib.formatNumber(data.currently_active_count), '</li>',
                '<li><label>Average University Level:</label>', Lib.formatNumber(data.average_university_level), '</li>',
                '<li><label>Highest University Level:</label>', Lib.formatNumber(data.highest_university_level), '</li>',
                '<li><label>Empires Using Essentia:</label>', Lib.formatNumber(data.essentia_using_count), '</li>',
                '<li><label>Isolationist Empires:</label>', Lib.formatNumber(data.isolationist_count), '</li>',
                '</ul>'
                    ].join('');
                          },
_getOrbitsHtml : function() {
                     var data = this._serverOverview.orbits;

                     return  ['<ul class="statsList">',
                             '<li><label>Orbits</label><ul class="statsSubList">',
                             '<li><label class="statsSubHeader">One</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["1"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["1"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Two</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["2"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["2"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Three</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["3"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["3"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Four</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["4"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["4"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Five</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["5"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["5"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Six</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["6"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["6"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Seven</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["7"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["7"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '<li><label class="statsSubHeader">Eight</label>',
                             '    <ul style="display:none;">',
                             '    <li><label>Total Bodies:</label>', Lib.formatNumber(data["8"].bodies), '</li>',
                             '    <li><label>Inhabited:</label>', Lib.formatNumber(data["8"].inhabited), '</li>',
                             '    </ul>',
                             '</li>',
                             '</ul></li></ul>'].join('');
                 },
_getShipsHtml : function() {
                    var data = this._serverOverview.ships,
                    output = ['<ul class="statsList">',
                    '<li><label>Total Ships:</label>', Lib.formatNumber(data.count), '</li>',
                    '<li><label>Types</label><ul class="statsSubList">'];

                    for(var bt in data.types) {
                        if(data.types.hasOwnProperty(bt)) {
                            output.push(['<li><label class="statsSubHeader">',bt.titleCaps("_"," "),'</label>',
                                    '    <ul style="display:none;">',
                                    '    <li><label>Total:</label>', Lib.formatNumber(data.types[bt].count), '</li>',
                                    '    <li><label>Smallest Hold Size:</label>', Lib.formatNumber(data.types[bt].smallest_hold_size), '</li>',
                                    '    <li><label>Average Hold Size:</label>', Lib.formatNumber(data.types[bt].average_hold_size), '</li>',
                                    '    <li><label>Largest Hold Size:</label>', Lib.formatNumber(data.types[bt].largest_hold_size), '</li>',
                                    '    <li><label>Slowest Speed:</label>', Lib.formatNumber(data.types[bt].slowest_speed), '</li>',
                                    '    <li><label>Average Speed:</label>', Lib.formatNumber(data.types[bt].average_speed), '</li>',
                                    '    <li><label>Fastest Speed:</label>', Lib.formatNumber(data.types[bt].fastest_speed), '</li>',
                                    '    </ul>',
                                    '</li>'].join(''));
                        }
                    }

                    output.push('</ul></li></ul>');
                    return output.join('');
                },
_getSpiesHtml : function() {
                    var data = this._serverOverview.spies;
                    return ['<ul class="statsList">',
                           '<li><label>Total Spies:</label>', Lib.formatNumber(data.count), '</li>',
                           '<li><label>Average Defense:</label>', Lib.formatNumber(data.average_defense), '</li>',
                           '<li><label>Highest Defense:</label>', Lib.formatNumber(data.highest_defense), '</li>',
                           '<li><label>Average Offense:</label>', Lib.formatNumber(data.average_offense), '</li>',
                           '<li><label>Highest Offense:</label>', Lib.formatNumber(data.highest_offense), '</li>',
                           '<li><label>Average Intel XP:</label>', Lib.formatNumber(data.average_intel), '</li>',
                           '<li><label>Highest Intel XP:</label>', Lib.formatNumber(data.highest_intel), '</li>',
                           '<li><label>Average Mayhem XP:</label>', Lib.formatNumber(data.average_mayhem), '</li>',
                           '<li><label>Highest Mayhem XP:</label>', Lib.formatNumber(data.highest_mayhem), '</li>',
                           '<li><label>Average Politics XP:</label>', Lib.formatNumber(data.average_politics), '</li>',
                           '<li><label>Highest Politics XP:</label>', Lib.formatNumber(data.highest_politics), '</li>',
                           '<li><label>Average Theft XP:</label>', Lib.formatNumber(data.average_theft), '</li>',
                           '<li><label>Highest Theft XP:</label>', Lib.formatNumber(data.highest_theft), '</li>',
                           '<li><label>Idle:</label>', Lib.formatNumber(data.idle_count), '</li>',
                           '<li><label>Travelling:</label>', Lib.formatNumber(data.travelling_count), '</li>',
                           '<li><label>Countering Espionage:</label>', Lib.formatNumber(data.countering_espionage_count), '</li>',
                           '<li><label>Doing Sweeps:</label>', Lib.formatNumber(data.security_count), '</li>',
                           '<li><label>At the Ministry of Truth:</label>', Lib.formatNumber(data.propaganda_count), '</li>',
                           '<li><label>Training:</label>', Lib.formatNumber(data.training_count), '</li>',
                           '<li><label>Extra Training:</label>', Lib.formatNumber(data.extra_training_count), '</li>',
                           '<li><label>Gathering Intelligence:</label>', Lib.formatNumber(data.gathering_intelligence_count), '</li>',
                           '<li><label>Hacking Networks:</label>', Lib.formatNumber(data.hacking_networks_count), '</li>',
                           '<li><label>Inciting:</label>', Lib.formatNumber(data.inciting_count), '</li>',
                           '<li><label>Sabotaging:</label>', Lib.formatNumber(data.sabotaging_count), '</li>',
                           '<li><label>Appropriating:</label>', Lib.formatNumber(data.stealing_count), '</li>',
                           '<li><label>Extraction:</label>', Lib.formatNumber(data.extraction_count), '</li>',
                           '<li><label>Antipersonal:</label>', Lib.formatNumber(data.antipersonal_count), '</li>',
                           '<li><label>Infiltrating:</label>', Lib.formatNumber(data.infiltrating_count), '</li>',
                           '<li><label>In Prison:</label>', Lib.formatNumber(data.in_prison_count), '</li>',
                           '<li><label>For Sale:</label>', Lib.formatNumber(data.for_sale_count), '</li>',
                           '<li><label>Unconscious:</label>', Lib.formatNumber(data.unconscious_count), '</li>',
                           '</ul>'
                               ].join('');
                },
_getStarsHtml : function() {
                    var data = this._serverOverview.stars;
                    return ['<ul class="statsList">',
                           '<li><label>Total Stars:</label>', Lib.formatNumber(data.count), '</li>',
                           '<li><label>Seized Stars:</label>', Lib.formatNumber(data.seized_count), '</li>',
                           '<li><label>Probed Stars:</label>', Lib.formatNumber(data.probed_count), '</li>',
                           '<li><label>Total Probes:</label>', Lib.formatNumber(data.probes_count), '</li>',
                           '</ul>'
                               ].join('');
                },
_getGlyphsHtml : function() {
                    var data = this._serverOverview.glyphs;

                    output = ['<ul class="statsList">'];
                    var glyphs = new Array;
                    var i = 0;
                    for (var bt in data.types) {
                        glyphs[i]= {type: bt, count: data.types[bt]};
                        i++;
                    }
                    glyphs.sort(function(a,b){return a.count - b.count});
                    for (var i = 0; i < glyphs.length; i++) {
                        output.push(['<li><label>',glyphs[i].type,':</label>',Lib.formatNumber(glyphs[i].count),'</li>'].join(''));
                    }
                    return output.join('');
                },

formatPercent : function(el, oRecord, oColumn, oData) {
                    el.innerHTML = Util.Number.format(Math.round(oData*100),{thousandsSeparator:",",suffix:"%"});
                },
EmpireStats : function(){
                  if(this.EmpireTable) {
                      this.EmpireTable.requery();
                  }
                  else {
                      this.EmpireFindCreate();

                      this.EmpireColumns = [
                      {key:"rank", label:"Rank",formatter:function(el, oRecord, oColumn, oData) {
                                                                                                    var oState = this.getState();
                                                                                                    el.innerHTML = Math.floor(oState.pagination.recordOffset + this.rankCounter++);
                                                                                                }},
                      {key:"empire_name", label:"Empire"},
                      {key:"alliance_name", label:"Alliance"},
                      {key:"colony_count", label:"Colonies", formatter:"number"},
                      {key:"population", label:"Pop", formatter:"number"},
                      {key:"empire_size", label:"Empire Size", formatter:"number", sortable:true},
                      {key:"building_count", label:"Buildings", formatter:"number"},
                      {key:"average_building_level", label:"Avg. Building Lvl", formatter:"number"},
                      {key:"offense_success_rate", label:"Offense", formatter:this.formatPercent, sortable:true},
                      {key:"defense_success_rate", label:"Defense", formatter:this.formatPercent, sortable:true},
                      {key:"dirtiest", label:"Dirtiest", formatter:"number", sortable:true}
                      ];

                      this.EmpireData = new Util.XHRDataSource("/stats");
                      this.EmpireData.connMethodPost = "POST";
                      this.EmpireData.maxCacheEntries = 2;
                      this.EmpireData.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                      this.EmpireData.responseSchema = {
resultsList : "result.empires",
              fields : [    "empire_id","empire_name",
              "alliance_id","alliance_name",
              {key:"colony_count",parser:"number"},
              {key:"population",parser:"number"},
              {key:"empire_size",parser:"number"},
              {key:"building_count",parser:"number"},
              {key:"average_building_level",parser:"number"},
              {key:"offense_success_rate",parser:"number"},
              {key:"defense_success_rate",parser:"number"},
              {key:"dirtiest",parser:"number"}
              ],
                  metaFields: {
totalRecords: "result.total_empires", // Access to value in the server response
              pageNumber: "result.page_number"
                  }
                      };

                      var eHt = Game.GetSize().h - 115;
                      if(eHt > 375) { eHt = 375; }
                      this.EmpireTable = new YAHOO.widget.ScrollingDataTable("statsEmpireTable", this.EmpireColumns, this.EmpireData, {
width:"100%",
height:eHt + "px",
initialRequest: Lang.JSON.stringify({
    "id": YAHOO.rpc.Service._requestId++,
    "method": "empire_rank",
    "jsonrpc": "2.0",
    "params": [
                                Game.GetSession(""),
                                "empire_size_rank"
                            ]
                        }),
                    dynamicData: true,
                    sortedBy : {key:"empire_size", dir:YAHOO.widget.DataTable.CLASS_DSC},
                    paginator: new YAHOO.widget.Paginator({ rowsPerPage:25, containers:'statsEmpirePaginator' }),
                    selectionMode:"single"
                } );
                this.EmpireTable.rankCounter = 1;
                // Subscribe to events for row selection
                this.EmpireTable.subscribe("rowMouseoverEvent", this.EmpireTable.onEventHighlightRow);
                this.EmpireTable.subscribe("rowMouseoutEvent", this.EmpireTable.onEventUnhighlightRow);
                this.EmpireTable.subscribe("rowClickEvent", this.EmpireTable.onEventSelectRow);
                this.EmpireTable.subscribe("cellMouseoverEvent", this.EmpireTable.onEventHighlightCell);
                this.EmpireTable.subscribe("cellHighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name" || oArgs.key == "alliance_name") {
                        Dom.setStyle(oArgs.el, "cursor", "help");
                    }
                });
                this.EmpireTable.subscribe("cellMouseoutEvent", this.EmpireTable.onEventUnhighlightCell);
                this.EmpireTable.subscribe("cellUnhighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name" || oArgs.key == "alliance_name") {
                        Dom.setStyle(oArgs.el, "cursor", "auto");
                    }
                });
                this.EmpireTable.subscribe("cellClickEvent", function(ev) {
                    var target = Event.getTarget(ev),
                        column = this.getColumn(target),
                        record;
                    if (column.key == "empire_name") {
                        record = this.getRecord(target);
                        Lacuna.Info.Empire.Load(record.getData("empire_id"));
                    }
                    else if (column.key == "alliance_name") {
                        record = this.getRecord(target);
                        Lacuna.Info.Alliance.Load(record.getData("alliance_id"));
                    }
                });
                this.EmpireTable.subscribe("postRenderEvent", function(){
                    var els = this.getSelectedTrEls();
                    if(els && els.length > 0) {
                        this._elBdContainer.scrollTop = els[els.length-1].offsetTop;
                    }
                });

                this.EmpireTable.handleDataReturnPayload = function(oRequest, oResponse, oPayload) {
                    oPayload.totalRecords = oResponse.meta.totalRecords;
                    var pn = oResponse.meta.pageNumber-1;
                    oPayload.pagination = {
                        rowsPerPage:25,
                        recordOffset:(pn*25)
                    };
                    return oPayload;
                };
                this.EmpireTable.requery = function(page) {
                    // Get the current state
                    var oState = this.getState();

                    if(Lang.isNumber(page)) {
                        oState.pagination.recordOffset = (page-1)*25;
                        oState.pagination.page = page;
                    }

                    // Get the request for the new state
                    var request = this.get("generateRequest")(oState, this);

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                this.EmpireTable.find = function(id, page) {
                    // Get the current state
                    var oState = this.getState(),
                        sort = (oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey();

                    oState.pagination.recordOffset = (page-1)*25;
                    oState.pagination.page = page;

                    this.rankCounter = 1;
                    this.selectedEmpireId = id;

                    var request = Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "empire_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank',
                                page
                            ]
                        });

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                //overriding generateRequest to send the correct column name back
                this.EmpireTable.set("generateRequest", function(oState, oSelf) {
                    // Set defaults
                    oState = oState || {pagination:null, sortedBy:null};
                    var sort = encodeURIComponent((oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey()),
                        dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc",
                        page = (oState.pagination) ? oState.pagination.page : 1;

                    oSelf.rankCounter = 1;
                    delete oSelf.selectedEmpireId;

                    return Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "empire_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank',
                                page
                            ]
                        });
                });
                this.EmpireTable.set("formatRow", function(elTr, oRecord) {
                    if(this.selectedEmpireId && oRecord.getData("empire_id") == this.selectedEmpireId) {
                        this.selectRow(oRecord);
                    }
                    return true;
                });
            }
        },
        EmpireFindCreate : function() {
            var dataSource = new Util.XHRDataSource("/stats");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.empires",
                fields : ["empire_name","empire_id","page_number"]
            };

            var oTextboxList = new YAHOO.lacuna.TextboxList("statsEmpireFind", dataSource, { //config options
                maxResultsDisplayed: 10,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:true,
                formatResultLabelKey:"empire_name",
                formatResultColumnKeys:["empire_name"],
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){
                var state = Lacuna.Stats.EmpireTable.getState(),
                    s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find_empire_rank",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            state.sortedBy+"_rank",
                            decodeURIComponent(sQuery)
                        ]
                    });
                return s;
            };
            oTextboxList.itemSelectEvent.subscribe(function(e, oArgs) {
                oArgs[0]._elTextbox.value = "";
                var data = oArgs[2];
                Lacuna.Stats.EmpireTable.find(data.empire_id, data.page_number);
            });

            this.empireFind = oTextboxList;
        },
        AllianceStats : function(){
            if(this.AllianceTable) {
                this.AllianceTable.requery();
            }
            else {
                this.AllianceFindCreate();

                this.AllianceColumns = [
                    {key:"rank", label:"Rank",formatter:function(el, oRecord, oColumn, oData) {
                        var oState = this.getState();
                        el.innerHTML = Math.floor(oState.pagination.recordOffset + this.rankCounter++);
                    }},
                    {key:"alliance_name", label:"Alliance"},
                    {key:"member_count", label:"Members", formatter:"number"},
                    {key:"colony_count", label:"Colonies", formatter:"number"},
                    {key:"population", label:"Pop", formatter:"number", sortable:true},
                    {key:"influence", label:"Influence", formatter:"number", sortable:true},
                    {key:"space_station_count", label:"Space Stations", formatter:"number", sortable:true},
                    {key:"average_empire_size", label:"Avg. Empire Size", formatter:"number", sortable:true},
                    {key:"building_count", label:"Buildings", formatter:"number"},
                    {key:"average_building_level", label:"Avg. Building Lvl", formatter:"number"},
                    {key:"offense_success_rate", label:"Offense", formatter:this.formatPercent, sortable:true},
                    {key:"defense_success_rate", label:"Defense", formatter:this.formatPercent, sortable:true},
                    {key:"dirtiest", label:"Dirtiest", formatter:"number", sortable:true}
                ];

                this.AllianceData = new Util.XHRDataSource("/stats");
                this.AllianceData.connMethodPost = "POST";
                this.AllianceData.maxCacheEntries = 2;
                this.AllianceData.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                this.AllianceData.responseSchema = {
                    resultsList : "result.alliances",
                    fields : [    "alliance_id","alliance_name",
                                {key:"member_count",parser:"number"},
                                {key:"space_station_count",parser:"number"},
                                {key:"influence",parser:"number"},
                                {key:"colony_count",parser:"number"},
                                {key:"population",parser:"number"},
                                {key:"average_empire_size",parser:"number"},
                                {key:"building_count",parser:"number"},
                                {key:"average_building_level",parser:"number"},
                                {key:"offense_success_rate",parser:"number"},
                                {key:"defense_success_rate",parser:"number"},
                                {key:"dirtiest",parser:"number"}
                            ],
                    metaFields: {
                        totalRecords: "result.total_alliances", // Access to value in the server response
                        pageNumber: "result.page_number"
                    }
                };

                var aHt = Game.GetSize().h - 115;
                if (aHt > 375 ) { aHt = 375; }
                this.AllianceTable = new YAHOO.widget.ScrollingDataTable("statsAllianceTable", this.AllianceColumns, this.AllianceData, {
                    width:"100%",
                    height:aHt + "px",
                    initialRequest: Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "alliance_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession("")
                            ]
                        }),
                    dynamicData: true,
                    sortedBy : {key:"influence", dir:YAHOO.widget.DataTable.CLASS_DSC},
                    paginator: new YAHOO.widget.Paginator({ rowsPerPage:25, containers:'statsAlliancePaginator' }),
                    selectionMode:"single"
                } );
                this.AllianceTable.rankCounter = 1;
                // Subscribe to events for row selection
                this.AllianceTable.subscribe("rowMouseoverEvent", this.AllianceTable.onEventHighlightRow);
                this.AllianceTable.subscribe("rowMouseoutEvent", this.AllianceTable.onEventUnhighlightRow);
                this.AllianceTable.subscribe("rowClickEvent", this.AllianceTable.onEventSelectRow);
                this.AllianceTable.subscribe("cellMouseoverEvent", this.AllianceTable.onEventHighlightCell);
                this.AllianceTable.subscribe("cellHighlightEvent", function(oArgs) {
                    if (oArgs.key == "alliance_name") {
                        Dom.setStyle(oArgs.el, "cursor", "help");
                    }
                });
                this.AllianceTable.subscribe("cellMouseoutEvent", this.AllianceTable.onEventUnhighlightCell);
                this.AllianceTable.subscribe("cellUnhighlightEvent", function(oArgs) {
                    if (oArgs.key == "alliance_name") {
                        Dom.setStyle(oArgs.el, "cursor", "auto");
                    }
                });
                this.AllianceTable.subscribe("cellClickEvent", function(ev) {
                    var target = Event.getTarget(ev),
                        column = this.getColumn(target);
                    if (column.key == "alliance_name") {
                        var record = this.getRecord(target);
                        Lacuna.Info.Alliance.Load(record.getData("alliance_id"));
                    }
                });
                this.AllianceTable.subscribe("postRenderEvent", function(){
                    var els = this.getSelectedTrEls();
                    if(els && els.length > 0) {
                        this._elBdContainer.scrollTop = els[els.length-1].offsetTop;
                    }
                });

                this.AllianceTable.handleDataReturnPayload = function(oRequest, oResponse, oPayload) {
                    oPayload.totalRecords = oResponse.meta.totalRecords;
                    var pn = oResponse.meta.pageNumber-1;
                    oPayload.pagination = {
                        rowsPerPage:25,
                        recordOffset:(pn*25)
                    };
                    return oPayload;
                };
                this.AllianceTable.requery = function(page) {
                    // Get the current state
                    var oState = this.getState();

                    if(Lang.isNumber(page)) {
                        oState.pagination.recordOffset = (page-1)*25;
                        oState.pagination.page = page;
                    }

                    // Get the request for the new state
                    var request = this.get("generateRequest")(oState, this);

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                this.AllianceTable.find = function(id, page) {
                    // Get the current state
                    var oState = this.getState(),
                        sort = (oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey();

                    oState.pagination.recordOffset = (page-1)*25;
                    oState.pagination.page = page;

                    this.rankCounter = 1;
                    this.selectedAllianceId = id;

                    var request = Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "alliance_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank',
                                page
                            ]
                        });

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                //overriding generateRequest to send the correct column name back
                this.AllianceTable.set("generateRequest", function(oState, oSelf) {
                    // Set defaults
                    oState = oState || {pagination:null, sortedBy:null};
                    var sort = encodeURIComponent((oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey()),
                        dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc",
                        page = (oState.pagination) ? oState.pagination.page : 1;

                    oSelf.rankCounter = 1;
                    delete oSelf.selectedAllianceId;

                    return Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "alliance_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank',
                                page
                            ]
                        });
                });
                this.AllianceTable.set("formatRow", function(elTr, oRecord) {
                    if(this.selectedAllianceId && oRecord.getData("alliance_id") == this.selectedAllianceId) {
                        this.selectRow(oRecord);
                    }
                    return true;
                });
            }
        },
        AllianceFindCreate : function() {
            var dataSource = new Util.XHRDataSource("/stats");
            dataSource.connMethodPost = "POST";
            dataSource.maxCacheEntries = 2;
            dataSource.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
            dataSource.responseSchema = {
                resultsList : "result.alliances",
                fields : ["alliance_name","alliance_id","page_number"]
            };

            var oTextboxList = new YAHOO.lacuna.TextboxList("statsAllianceFind", dataSource, { //config options
                maxResultsDisplayed: 10,
                minQueryLength:3,
                multiSelect:false,
                forceSelection:true,
                formatResultLabelKey:"alliance_name",
                formatResultColumnKeys:["alliance_name"],
                useIndicator:true
            });
            oTextboxList.generateRequest = function(sQuery){
                var state = Lacuna.Stats.AllianceTable.getState(),
                    s = Lang.JSON.stringify({
                        "id": YAHOO.rpc.Service._requestId++,
                        "method": "find_alliance_rank",
                        "jsonrpc": "2.0",
                        "params": [
                            Game.GetSession(""),
                            state.sortedBy+"_rank",
                            sQuery
                        ]
                    });
                return s.replace(/%20/g, ' ');
            };
            oTextboxList.itemSelectEvent.subscribe(function(e, oArgs) {
                oArgs[0]._elTextbox.value = "";
                var data = oArgs[2];
                Lacuna.Stats.AllianceTable.find(data.alliance_id, data.page_number);
            });

            this.allianceFind = oTextboxList;
        },
        ColonyStats : function(){
            if(this.ColonyTable) {
                this.ColonyTable.requery();
            }
            else {

                this.ColonyColumns = [
                    {key:"rank", label:"Rank",formatter:function(el, oRecord, oColumn, oData) {
                        el.innerHTML = this.rankCounter++;
                    }},
                    {key:"empire_name", label:"Empire"},
                    {key:"planet_name", label:"Colony"},
                    {key:"population", label:"Pop", sortable:true},
                    {key:"building_count", label:"Buildings"},
                    {key:"average_building_level", label:"Avg. Building Lvl"},
                    {key:"highest_building_level", label:"High Building Lvl"}
                ];

                this.ColonyData = new Util.XHRDataSource("/stats");
                this.ColonyData.connMethodPost = "POST";
                this.ColonyData.maxCacheEntries = 2;
                this.ColonyData.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                this.ColonyData.responseSchema = {
                    resultsList : "result.colonies",
                    fields : [    "empire_id","empire_name",
                                {key:"planet_id",parser:"number"},
                                {key:"planet_name"},
                                {key:"population",parser:"number"},
                                {key:"building_count",parser:"number"},
                                {key:"average_building_level",parser:"number"},
                                {key:"highest_building_level",parser:"number"}
                            ]
                };

                var cHt = Game.GetSize().h - 115;
                if(cHt > 410) { cHt = 410; }
                this.ColonyTable = new YAHOO.widget.ScrollingDataTable("statsColonyTable", this.ColonyColumns, this.ColonyData, {
                    width:"100%",
                    height:cHt + "px",
                    initialRequest: Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "colony_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                "population"
                            ]
                        }),
                    dynamicData: true,
                    sortedBy : {key:"population", dir:YAHOO.widget.DataTable.CLASS_DSC},
                    selectionMode:"single"
                } );
                this.ColonyTable.rankCounter = 1;
                // Subscribe to events for row selection
                this.ColonyTable.subscribe("rowMouseoverEvent", this.ColonyTable.onEventHighlightRow);
                this.ColonyTable.subscribe("rowMouseoutEvent", this.ColonyTable.onEventUnhighlightRow);
                this.ColonyTable.subscribe("rowClickEvent", this.ColonyTable.onEventSelectRow);
                this.ColonyTable.subscribe("cellMouseoverEvent", this.ColonyTable.onEventHighlightCell);
                this.ColonyTable.subscribe("cellHighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "help");
                    }
                });
                this.ColonyTable.subscribe("cellMouseoutEvent", this.ColonyTable.onEventUnhighlightCell);
                this.ColonyTable.subscribe("cellUnhighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "auto");
                    }
                });
                this.ColonyTable.subscribe("cellClickEvent", function(ev) {
                    var target = Event.getTarget(ev),
                        column = this.getColumn(target);
                    if (column.key == "empire_name") {
                        var record = this.getRecord(target);
                        Lacuna.Info.Empire.Load(record.getData("empire_id"));
                    }
                });

                this.ColonyTable.requery = function() {
                    // Get the current state
                    var oState = this.getState();

                    // Reset record offset, if paginated
                    if(oState.pagination) {
                        oState.pagination.recordOffset = 0;
                    }

                    // Get the request for the new state
                    var request = this.get("generateRequest")(oState, this);

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                //overriding generateRequest to send the correct column name back
                this.ColonyTable.set("generateRequest", function(oState, oSelf) {
                    // Set defaults
                    oState = oState || {pagination:null, sortedBy:null};
                    var sort = encodeURIComponent((oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey()),
                        dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc",
                        page = (oState.pagination) ? oState.pagination.page : 1;

                    oSelf.rankCounter = 1;

                    return Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "colony_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank'
                            ]
                        });
                });
            }
        },
        SpyStats : function(){
            if(this.SpyTable) {
                this.SpyTable.requery();
            }
            else {

                this.SpyColumns = [
                    {key:"rank", label:"Rank",formatter:function(el, oRecord, oColumn, oData) {
                        el.innerHTML = this.rankCounter++;
                    }},
                    {key:"empire_name", label:"Empire"},
                    {key:"spy_name", label:"Spy"},
                    {key:"age", label:"Age",formatter:function(el, oRecord, oColumn, oData) {
                        el.innerHTML = Lib.formatTime(oData);
                    }},
                    {key:"level", label:"Level", sortable:true},
                    {key:"success_rate", label:"Success Rate", formatter:this.formatPercent, sortable:true},
                    {key:"dirtiest", label:"Dirtiest", sortable:true}
                ];

                this.SpyData = new Util.XHRDataSource("/stats");
                this.SpyData.connMethodPost = "POST";
                this.SpyData.maxCacheEntries = 2;
                this.SpyData.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                this.SpyData.responseSchema = {
                    resultsList : "result.spies",
                    fields : [    "empire_id","empire_name",
                                {key:"spy_id",parser:"number"},
                                "spy_name",
                                {key:"age",parser:"number"},
                                {key:"level",parser:"number"},
                                {key:"success_rate",parser:"number"},
                                {key:"dirtiest",parser:"number"}
                            ]
                };

                var sHt = Game.GetSize().h - 115;
                if(sHt > 410) { sHt = 410; }
                this.SpyTable = new YAHOO.widget.ScrollingDataTable("statsSpyTable", this.SpyColumns, this.SpyData, {
                    width:"100%",
                    height:sHt + "px",
                    initialRequest: Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "spy_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                "level"
                            ]
                        }),
                    dynamicData: true,
                    sortedBy : {key:"level", dir:YAHOO.widget.DataTable.CLASS_DSC},
                    selectionMode:"single"
                } );
                this.SpyTable.rankCounter = 1;
                // Subscribe to events for row selection
                this.SpyTable.subscribe("rowMouseoverEvent", this.SpyTable.onEventHighlightRow);
                this.SpyTable.subscribe("rowMouseoutEvent", this.SpyTable.onEventUnhighlightRow);
                this.SpyTable.subscribe("rowClickEvent", this.SpyTable.onEventSelectRow);
                this.SpyTable.subscribe("cellMouseoverEvent", this.SpyTable.onEventHighlightCell);
                this.SpyTable.subscribe("cellHighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "help");
                    }
                });
                this.SpyTable.subscribe("cellMouseoutEvent", this.SpyTable.onEventUnhighlightCell);
                this.SpyTable.subscribe("cellUnhighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "auto");
                    }
                });
                this.SpyTable.subscribe("cellClickEvent", function(ev) {
                    var target = Event.getTarget(ev),
                        column = this.getColumn(target);
                    if (column.key == "empire_name") {
                        var record = this.getRecord(target);
                        Lacuna.Info.Empire.Load(record.getData("empire_id"));
                    }
                });

                this.SpyTable.requery = function() {
                    // Get the current state
                    var oState = this.getState();

                    // Reset record offset, if paginated
                    if(oState.pagination) {
                        oState.pagination.recordOffset = 0;
                    }

                    // Get the request for the new state
                    var request = this.get("generateRequest")(oState, this);

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                //overriding generateRequest to send the correct column name back
                this.SpyTable.set("generateRequest", function(oState, oSelf) {
                    // Set defaults
                    oState = oState || {pagination:null, sortedBy:null};
                    var sort = encodeURIComponent((oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey()),
                        dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc",
                        page = (oState.pagination) ? oState.pagination.page : 1;

                    oSelf.rankCounter = 1;

                    return Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "spy_rank",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession(""),
                                sort+'_rank'
                            ]
                        });
                });
            }
        },
        WeeklyMedalStats : function(){
            if(this.WeeklyMedalTable) {
                this.WeeklyMedalTable.requery();
            }
            else {

                this.WeeklyMedalColumns = [
                    {key:"empire_name", label:"Empire"},
                    {key:"medal_name", label:"Medal Name"},
                    {key:"times_earned", label:"Times Earned"},
                    {key:"medal_image", label:"Medal", formatter:function(elLiner, oRecord, oColumn, oData) {
                        var name = oRecord.getData("medal_name");
                        elLiner.innerHTML = ['<img src="',Lib.AssetUrl,'medal/',oData,'.png" alt="',name,'" title="',name,'" />'].join('');
                    }}
                ];

                this.WeeklyMedalData = new Util.XHRDataSource("/stats");
                this.WeeklyMedalData.connMethodPost = "POST";
                this.WeeklyMedalData.maxCacheEntries = 2;
                this.WeeklyMedalData.responseType = YAHOO.util.XHRDataSource.TYPE_JSON;
                this.WeeklyMedalData.responseSchema = {
                    resultsList : "result.winners",
                    fields : [    "empire_id",
                                "empire_name",
                                "medal_name",
                                "medal_image",
                                {key:"times_earned",parser:"number"}
                            ],
                    metaFields: {
                        totalRecords: "result.total_spies" // Access to value in the server response
                    }
                };

                var wHt = Game.GetSize().h - 115;
                if(wHt > 410) { wHt = 410; }
                this.WeeklyMedalTable = new YAHOO.widget.ScrollingDataTable("statsWeeklyMedalTable", this.WeeklyMedalColumns, this.WeeklyMedalData, {
                    width:"100%",
                    height:wHt + "px",
                    initialRequest: Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "weekly_medal_winners",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession("")
                            ]
                        }),
                    dynamicData: true,
                    selectionMode:"single"
                } );
                // Subscribe to events for row selection
                this.WeeklyMedalTable.subscribe("rowMouseoverEvent", this.WeeklyMedalTable.onEventHighlightRow);
                this.WeeklyMedalTable.subscribe("rowMouseoutEvent", this.WeeklyMedalTable.onEventUnhighlightRow);
                this.WeeklyMedalTable.subscribe("rowClickEvent", this.WeeklyMedalTable.onEventSelectRow);
                this.WeeklyMedalTable.subscribe("cellMouseoverEvent", this.WeeklyMedalTable.onEventHighlightCell);
                this.WeeklyMedalTable.subscribe("cellHighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "help");
                    }
                });
                this.WeeklyMedalTable.subscribe("cellMouseoutEvent", this.WeeklyMedalTable.onEventUnhighlightCell);
                this.WeeklyMedalTable.subscribe("cellUnhighlightEvent", function(oArgs) {
                    if (oArgs.key == "empire_name") {
                        Dom.setStyle(oArgs.el, "cursor", "auto");
                    }
                });
                this.WeeklyMedalTable.subscribe("cellClickEvent", function(ev) {
                    var target = Event.getTarget(ev),
                        column = this.getColumn(target);
                    if (column.key == "empire_name") {
                        var record = this.getRecord(target);
                        Lacuna.Info.Empire.Load(record.getData("empire_id"));
                    }
                });

                this.WeeklyMedalTable.requery = function() {
                    // Get the current state
                    var oState = this.getState();

                    // Reset record offset, if paginated
                    if(oState.pagination) {
                        oState.pagination.recordOffset = 0;
                    }

                    // Get the request for the new state
                    var request = this.get("generateRequest")(oState, this);

                    // Purge selections
                    this.unselectAllRows();
                    this.unselectAllCells();

                    // Get the new data from the server
                    var callback = {
                        success : this.onDataReturnSetRows,
                        failure : this.onDataReturnSetRows,
                        argument : oState, // Pass along the new state to the callback
                        scope : this
                    };
                    this._oDataSource.sendRequest(request, callback);
                };
                //overriding generateRequest to send the correct column name back
                this.WeeklyMedalTable.set("generateRequest", function(oState, oSelf) {
                    // Set defaults
                    oState = oState || {pagination:null, sortedBy:null};
                    var sort = encodeURIComponent((oState.sortedBy) ? oState.sortedBy.key : oSelf.getColumnSet().keys[0].getKey()),
                        dir = (oState.sortedBy && oState.sortedBy.dir === YAHOO.widget.DataTable.CLASS_DESC) ? "desc" : "asc",
                        page = (oState.pagination) ? oState.pagination.page : 1;

                    return Lang.JSON.stringify({
                            "id": YAHOO.rpc.Service._requestId++,
                            "method": "weekly_medal_winners",
                            "jsonrpc": "2.0",
                            "params": [
                                Game.GetSession("")
                            ]
                        });
                });
            }
        },

        show : function() {
            //this is called out of scope so make sure to pass the correct scope in
            Lacuna.Stats.EmpireStats();
            Game.OverlayManager.hideAll();

            var oHt = Game.GetSize().h - 40;
            if(oHt > 450) { oHt = 450; }
            var sHt = oHt - 10;
            Dom.setStyle(Dom.get('oHt'),'height',oHt + 'px');
            Dom.setStyle(Dom.get('sHt'),'height',sHt + 'px');

            Lacuna.Stats.Panel.show();
            Lacuna.Stats.Panel.center();
        },
        hide : function() {
            this.Panel.hide();
        },
        Reset : function() {
            if(this.AllianceTable) {
                this.AllianceTable.requery(1);
            }
            if(this.EmpireTable) {
                this.EmpireTable.requery(1);
            }
        }
    };

    Lacuna.Stats = new Stats();
})();
YAHOO.register("stats", YAHOO.lacuna.Stats, {version: "1", build: "0"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/stats.js","/")
},{"buffer":71,"oMfpAn":75}],68:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
YAHOO.namespace("lacuna");

//only load this once
if (typeof YAHOO.lacuna.TextboxList == "undefined" || !YAHOO.lacuna.TextboxList) {

// enclose everything in an anonymous function ...
(function () {
    // ... so that variables that you declare inside are local to the function and invisible outside
    var Util = YAHOO.util,
        Dom = Util.Dom,
        Event = Util.Event,
        Lang = YAHOO.lang,
        Lib = YAHOO.lacuna.Library,
        CSS_PREFIX = "TextboxList";
        
    var TBL = function(elInput, oDataSource, oConfigs) {
        if(!oConfigs){ oConfigs = {}; }
        oConfigs.useShadow = oConfigs.useShadow || false;
        oConfigs.useIFrame = oConfigs.useIFrame || true;
        oConfigs.animVert = oConfigs.animVert || false;
        oConfigs.minQueryLength = oConfigs.minQueryLength || 0; //if null set to zero so we can submit blank request for dropdown display. 
        oConfigs.resultTypeList = oConfigs.resultTypeList || false; //if false use object literal insted of array in formatResults first arg
        oConfigs.formatResultLabelKey = oConfigs.formatResultLabelKey || oDataSource.responseSchema.fields[0].key || oDataSource.responseSchema.fields[0];
        oConfigs.formatResultColumnKeys = oConfigs.formatResultColumnKeys || [(oDataSource.responseSchema.fields[0].key || oDataSource.responseSchema.fields[0])]; //used to show correct columns in drop down
        oConfigs._pageNum = 1; //private var to remember what page we're on to use the "Next" option
        
        // Validate input element and get idPrefix from it's id
        var idPrefix;
        if(Dom.inDocument(elInput)) {
            if(YAHOO.lang.isString(elInput)) {
                idPrefix = elInput;
                elInput = document.getElementById(elInput); //get dom object
            }
            else {
                idPrefix = elInput.id;
            }
        }
        else {
            return;
        }
        
        //setup dom structure
        //Dom.setStyle(elInput, "display", "none"); //hide starting input and use it for storage and form submits
        var tblInput = Dom.get(elInput), //document.createElement("input"), 
            tblContainer = document.createElement("div"),
            tblAC = document.createElement("div"),
            ddIcon, tblListContainer, tblList, tblListInputLine, tblIndicator;
        
        //set needed id's
        tblContainer.id = idPrefix + "Tbl"; //TextboxList
        //tblInput.id = idPrefix + "TblInput"; //TextboxListInput
        tblAC.id = idPrefix + "TblAutoComplete"; //TextboxListAutoComplete
        //append to dom and keep references
        tblContainer = Dom.insertAfter(tblContainer, tblInput); //insert our container after the input passed in
        Dom.addClass(tblContainer, CSS_PREFIX); //add the control class to the Container
        //remove elInput from dom so we can reinsert it in our structure
        tblInput = tblInput.parentNode.removeChild(tblInput);
        //check if we're single or multi select
        if(oConfigs.multiSelect) {
            tblListContainer = document.createElement("div");
            tblList = document.createElement("ul");
            tblListInputLine = document.createElement("li");
            
            //Dom.addClass(tblContainer, CSS_PREFIX + "Multi"); //add the control class to the Container
            tblListContainer = tblContainer.appendChild(tblListContainer); //append our list to our textbox container
            Dom.addClass(tblListContainer, CSS_PREFIX + "Container"); //add the class to the List Container
            tblList = tblListContainer.appendChild(tblList); //append our list to our container
            Dom.addClass(tblList, CSS_PREFIX + "Bits"); //add the control class to the List
            tblListInputLine = tblList.appendChild(tblListInputLine); //append the LI to the list
            Dom.addClass(tblListInputLine, CSS_PREFIX + "Bit");  //add the control class to the LI
            tblInput = tblListInputLine.appendChild(tblInput); //append our input to the LI
            Dom.addClass(tblInput, CSS_PREFIX + "Input"); //add the control class to the Input
        }
        else {
            tblInput = tblContainer.appendChild(tblInput); //append our input to the LI
            Dom.addClass(tblInput, CSS_PREFIX + "InputSingle"); //add the control class to the Input
        }
        if(!oConfigs.multiSelect && oConfigs.minQueryLength == 0){
            ddIcon = document.createElement("div");
            ddIcon = Dom.insertAfter(ddIcon, tblInput);
            Dom.addClass(ddIcon, CSS_PREFIX + "Icon");
        }
        if(oConfigs.useIndicator) {
            //create indicator span for image next to input control
            tblIndicator = document.createElement("span");
            tblIndicator.innerHTML = ['<img src="',Lib.AssetUrl,'ui/indicator.gif" alt="Loading..." />'].join('');
            Dom.setStyle(tblIndicator,"display","none");
            Dom.addClass(tblIndicator, CSS_PREFIX + "Indicator");
            if(oConfigs.multiSelect) {
                tblIndicator = Dom.insertAfter(tblIndicator, tblInput);
            }
            else {
                Dom.addClass(tblIndicator, CSS_PREFIX + "IndicatorSingle");
                tblIndicator = Dom.insertBefore(tblIndicator, tblInput);
            }
        }
        tblAC = tblContainer.appendChild(tblAC); //append our AutoComplete div to our container
        Dom.addClass(tblAC, CSS_PREFIX + "AutoComplete"); //add the control class to the AutoComplete
        
        //call AutoComplete's constructor
        TBL.superclass.constructor.call(this, tblInput, tblAC, oDataSource, oConfigs);
        //setup extra events
        this.dirtyEvent = new Util.CustomEvent("dirty", this);
        this.selectSingleEvent = new Util.CustomEvent("selectSingle", this);
        this.beforeDeleteEvent = new Util.CustomEvent("beforeDelete", this);

        //assign private vars
        this._elTblListContainer = tblListContainer;
        this._elTblContainer = tblContainer;
        this._elTblList = tblList;
        this._elTblIndicator = tblIndicator;
        this._elTblIcon = ddIcon;
        this._elTblListInputLine = (this.multiSelect ? tblListInputLine : undefined);
        this._oTblSelections = {}; //remember what our selections are
        this._oTblSingleSelection = null;
        this._sOrigSingleSelection = "";
        this._aOrigSelections = []; //remember what our original selections were for dirty check
        //setup click events if min query is 0
        var oSelf = this;
        if(this.minQueryLength == 0) {
            if(!this.multiSelect) {
                Event.addListener(ddIcon,"click",oSelf._onListTextboxClick,oSelf);
            }
            Event.addListener(tblInput,"click", oSelf._onListTextboxClick, oSelf);
        }
        //correctly hide the container when mousing out
        var mouseEnter = function(){
                Event.on(this._elContent, "mouseleave", mouseLeave, this, true);
            },
            mouseLeave = function() {
                Event.removeListener(this._elContent, "mouseleave", mouseLeave);
                this._toggleContainer(false);
            };
        Event.on(this._elContent,"mouseenter", mouseEnter, oSelf, true);
        //always add this listener
        Event.addListener(tblListContainer,"click",oSelf._onListContainerClick,oSelf);

        //if we're using indicator add events to hide and show it
        if(this.useIndicator) {
            this.dataRequestEvent.subscribe(function(oSelf, sQuery, oRequest) {
                this.showIndicator();
            });
            this.dataErrorEvent.subscribe(function(oSelf, sQuery) {
                this.hideIndicator();
            });
            this.dataReturnEvent.subscribe(function(oSelf, sQuery, oRequest) {
                this.hideIndicator();
            });
        }
    };
    
    // now we are actually doing the inheritance part.
    Lang.extend(TBL, YAHOO.widget.AutoComplete, {
        // the third argument to extend are extra prototypes for the new function
        formatResult : function(oResultData, sQuery, sResultMatch) {
            var sKey = sResultMatch, // the entire result key which is the "name" param in the result set
                sKeyQuery = sKey.substr(0, sQuery.length), // the query itself
                sKeyRemainder = sKey.substr(sQuery.length), // the rest of the result
                aMarkup = [],
                val, key, col = 1;
            for(var k = 0; k < this.formatResultColumnKeys.length; k++) {
                key = this.formatResultColumnKeys[k];
                aMarkup[aMarkup.length] = "<div class='";
                aMarkup[aMarkup.length] = CSS_PREFIX;
                aMarkup[aMarkup.length] = "Column ";
                aMarkup[aMarkup.length] = CSS_PREFIX;
                aMarkup[aMarkup.length] = "ColNum";
                aMarkup[aMarkup.length] = col;
                aMarkup[aMarkup.length] = "'>";
                if(oResultData[key]) {
                    val = oResultData[key];
                    aMarkup[aMarkup.length] = val;
                }
                aMarkup[aMarkup.length] = "</div>";
                col++;
            }
            return (aMarkup.join(""));
        },
        doBeforeExpandContainer : function(oTextbox, oContainer, sQuery, aResults) {
            var pos = Dom.getXY(oTextbox);
            pos[1] += Dom.get(oTextbox).offsetHeight + 2;
            Dom.setXY(oContainer,pos);
            return true;
        },
        /**
        * Overload destroy to get ride of our dirtyEvent
        */
        destroy : function() {
            // call the AutoComplete destroy
            TBL.superclass.destroy.call(this);
            this.dirtyEvent.unsubscribeAll();
            this.selectSingleEvent.unsubscribeAll();
        },
        /**
        * Return key/value pairs of selected items, if multi-selct.  "key" will be the selected item formatResultLabelKey.  value will be a "bit"
        * For single select will return single data item
        */
        Selections : function() {
            if(this.multiSelect) {
                var arr = [];
                for(var key in this._oTblSelections){
                    if(this._oTblSelections.hasOwnProperty(key)){
                        arr.push(this._oTblSelections[key]._value);
                    }
                }
                return arr;
            }
            else {
                return this._oTblSingleSelection.Value;
            }
        },
        /**
        * items should be an array of objects with the same schema as the datasource.  
        */
        SelectItems : function(items) {
            //clear prior selections
            this._sPastSelections = "";
            this.ResetSelections();
            this._dirty = null;
            //loop and add
            for(var i = 0; i < items.length; i++) {
                var oData = this._createDataObject(items[i]);
                if(oData.Value) {
                    var bit = this._createBit(oData);
                    if(bit) {
                        this._aOrigSelections.push(oData.Value);
                        this._sPastSelections = bit._value;
                        this._oTblSelections[bit._value] = bit;
                    }
                }
            }
            
        },
        /**
        * Reset selections
        */
        ResetSelections : function() {
            if(this.multiSelect){
                this._oTblSelections = {};
                this._aOrigSelections = [];
                var list = this._elTblList;
                //remove all children
                while (list.firstChild) {
                    //if it doesn't have the bitbox class it's the input field so break out of the while loop because we're done
                    if(!Dom.hasClass(list.firstChild, CSS_PREFIX + "BitBox")) {
                        break;
                    }
                    else {
                        list.removeChild(list.firstChild);
                    }
                }
            }
            else {
                this._oTblSingleSelection = null;
                this._sOrigSingleSelection = "";
                this._elTextbox.value = "";
            }
        },
        /**
        * _singleRequest getter
        */
        IsSingleRequest : function() {
            return this._singleRequest;
        },
        handleResponseSingle : function(sQuery, oResponse, oPayload) {
            if((this instanceof YAHOO.widget.AutoComplete) && this._sName) {
                //focus textbox
                this._focus();
                //container won't show since it's a single request 
                this._populateList(sQuery, oResponse, oPayload);

                //get all list items
                var elListItem, allListItemEls = this._elList.childNodes,
                    queue = (oPayload && oPayload.queue) ? oPayload.queue : null;
                if(queue) {
                    for(var i=0; i<allListItemEls.length; i++) {
                        elListItem = allListItemEls[i];
                        if(elListItem._oResultData && queue.indexOf(String(elListItem._oResultData.Id)) >= 0) {
                            this._selectItem(elListItem);
                        }
                    }
                }
                else {
                    //get first
                    elListItem = allListItemEls[0];
                    //select it
                    this._selectItem(elListItem);
                }
                
                //remove single response flag
                this._singleRequest = null;
                this.dataSource._singleRequest = null;
                
                //if indicator hide it
                if(this.useIndicator) {
                    this.hideIndicator();
                }
                //done with single select
                this.selectSingleEvent.fire();
            }
        },
        /**
        * Selects single value.  Must override generateRequest to properly handle key unless the key is the what is the normally queried text
        */
        Select : function(key) {
            if(key) {
                // Reset focus for a new interaction
                this._bFocused = null;
                //set single request flags
                this._singleRequest = true;
                this.dataSource._singleRequest = true;
                //get request
                var sRequest = this.generateRequest(key);
                //if indicator show it
                if(this.useIndicator) {
                    this.showIndicator();
                }
                //send
                this.dataSource.sendRequest(sRequest, {
                        success : this.handleResponseSingle,
                        failure : this.handleResponseSingle,
                        scope   : this,
                        argument: {
                            query: key
                        }
                });
            }
        },
        Queue : function(keys) {
            if(Lang.isArray(keys) && keys.length > 0) {
                // Reset focus for a new interaction
                this._bFocused = null;
                //set single request flags
                this._singleRequest = true;
                this.dataSource._singleRequest = true;
                //get request
                var sRequest = this.generateRequest("");
                //if indicator show it
                if(this.useIndicator) {
                    this.showIndicator();
                }
                //send
                this.dataSource.sendRequest(sRequest, {
                        success : this.handleResponseSingle,
                        failure : this.handleResponseSingle,
                        scope   : this,
                        argument: {
                            query: "",
                            queue: keys
                        }
                });
            }
        },
        /**
        * overload populateList to handle single Select and use formatResultLabelKey instead of the first schema field
        */
        _populateList : function(sQuery, oResponse, oPayload) {
            // Clear previous timeout
            if(this._nTypeAheadDelayID != -1) {
                clearTimeout(this._nTypeAheadDelayID);
            }
                
            sQuery = (oPayload && oPayload.query) ? oPayload.query : sQuery;
            
            // Pass data through abstract method for any transformations
            var ok = this.doBeforeLoadData(sQuery, oResponse, oPayload);

            // Data is ok
            if(ok && !oResponse.error) {
                this.dataReturnEvent.fire(this, sQuery, oResponse.results);
                
                // Continue only if instance is still focused (i.e., user hasn't already moved on)
                // Null indicates initialized state, which is ok too
                //if(this._bFocused || (this._bFocused === null)) {
                    
                //TODO: is this still necessary?
                /*var isOpera = (YAHOO.env.ua.opera);
                var contentStyle = this._elContent.style;
                contentStyle.width = (!isOpera) ? null : "";
                contentStyle.height = (!isOpera) ? null : "";*/
            
                // Store state for this interaction
                var sCurQuery = decodeURIComponent(sQuery);
                this._sCurQuery = sCurQuery;
                this._bItemSelected = false;
            
                var allResults = oResponse.results,
                    nItemsToShow = Math.min(allResults.length,this.maxResultsDisplayed),
                    sMatchKey = (this.dataSource.responseSchema.fields) ? 
                        this.formatResultLabelKey : 0;
                
                if(nItemsToShow > 0) {
                    // Make sure container and helpers are ready to go
                    if(!this._elList || (this._elList.childNodes.length < nItemsToShow)) {
                        this._initListEl();
                    }
                    this._initContainerHelperEls();
                    
                    var allListItemEls = this._elList.childNodes;
                    // Fill items with data from the bottom up
                    for(var i = nItemsToShow-1; i >= 0; i--) {
                        var elListItem = allListItemEls[i],
                        oResult = allResults[i];
                        
                        // Backward compatibility
                        if(this.resultTypeList) {
                            // Results need to be converted back to an array
                            var aResult = [];
                            // Match key is first
                            aResult[0] = (YAHOO.lang.isString(oResult)) ? oResult : oResult[sMatchKey] || oResult[this.key];
                            // Add additional data to the result array
                            var fields = this.dataSource.responseSchema.fields;
                            if(YAHOO.lang.isArray(fields) && (fields.length > 1)) {
                                for(var k=1, len=fields.length; k<len; k++) {
                                    aResult[aResult.length] = oResult[fields[k].key || fields[k]];
                                }
                            }
                            // No specific fields defined, so pass along entire data object
                            else {
                                // Already an array
                                if(YAHOO.lang.isArray(oResult)) {
                                    aResult = oResult;
                                }
                                // Simple string 
                                else if(YAHOO.lang.isString(oResult)) {
                                    aResult = [oResult];
                                }
                                // Object
                                else {
                                    aResult[1] = oResult;
                                }
                            }
                            oResult = aResult;
                        }

                        // The matching value, including backward compatibility for array format and safety net
                        elListItem._sResultMatch = (YAHOO.lang.isString(oResult)) ? oResult : (YAHOO.lang.isArray(oResult)) ? oResult[0] : (oResult[sMatchKey] || "");
                        elListItem._oResultData = oResult; // Additional data
                        elListItem.innerHTML = this.formatResult(oResult, sCurQuery, elListItem._sResultMatch);
                        elListItem.style.display = "";
                    }
            
                    // Clear out extraneous items
                    if(nItemsToShow < allListItemEls.length) {
                        var extraListItem;
                        for(var j = allListItemEls.length-1; j >= nItemsToShow; j--) {
                            extraListItem = allListItemEls[j];
                            extraListItem.style.display = "none";
                        }
                    }
                    
                    this._nDisplayedItems = nItemsToShow;
                    
                    this.containerPopulateEvent.fire(this, sQuery, allResults);
                    
                    // Highlight the first item
                    if(this.autoHighlight) {
                        var elFirstListItem = this._elList.firstChild;
                        this._toggleHighlight(elFirstListItem,"to");
                        this.itemArrowToEvent.fire(this, elFirstListItem);
                        this._typeAhead(elFirstListItem,sQuery);
                    }
                    // Unhighlight any previous time
                    else {
                        this._toggleHighlight(this._elCurListItem,"from");
                    }
            
                    // If not a single request toggle container
                    if(!this._singleRequest) {
                        // Expand the container
                        ok = this.doBeforeExpandContainer(this._elTextbox, this._elContainer, sQuery, allResults);
                        this._toggleContainer(ok);
                    }
                }
                else {
                    this._toggleContainer(false);
                }

                return;
            }
            // Error
            else {
                this.dataErrorEvent.fire(this, sQuery);
            }
        },
        /**
        * Enabled and disable the field
        */
        disable : function() {
            this.getInputEl().disabled = true;
            this.disabled = true;
            Dom.addClass(this.getInputEl(), CSS_PREFIX + "Disabled");
            Dom.addClass(this._elTblContainer, CSS_PREFIX + "Disabled");
            Dom.addClass(this._elTblListContainer, CSS_PREFIX + "Disabled");
            for(var bitKey in this._oTblSelections) {
                var bit = this._oTblSelections[bitKey];
                Dom.addClass(bit, CSS_PREFIX + "Disabled");
            }
            if(this._elTblIcon) {
                Dom.setStyle(this._elTblIcon, "display", "none");
            }
        },
        enable : function() {
            this.getInputEl().disabled = false;
            this.disabled = undefined;
            Dom.removeClass(this.getInputEl(), CSS_PREFIX + "Disabled");
            Dom.removeClass(this._elTblContainer, CSS_PREFIX + "Disabled");
            Dom.removeClass(this._elTblListContainer, CSS_PREFIX + "Disabled");
            for(var bitKey in this._oTblSelections) {
                var bit = this._oTblSelections[bitKey];
                Dom.removeClass(bit, CSS_PREFIX + "Disabled");
            }
            if(this._elTblIcon) {
                Dom.setStyle(this._elTblIcon, "display", "");
            }
        },
        /**
        * validity handlers
        **/
        setValid : function(isValid) {
            this._isValid = isValid;
            if (isValid) {
                Dom.removeClass(this._elTblContainer, CSS_PREFIX + "Error");
            } else {
                Dom.addClass(this._elTblContainer, CSS_PREFIX + "Error");
            }
        },
        isValid : function(){
            return this._isValid;
        },
        /**
        * show and hide animated indicator gif
        */
        showIndicator : function() {
            Dom.setStyle(this._elTblIndicator, "display", "");
        },
        hideIndicator : function() {
            Dom.setStyle(this._elTblIndicator, "display", "none");
        },
        /**
        * private functions to handle selection update and bit creation for multi select and pass through for single select
        */
        _createDataObject : function(data) {
            var oData = {};
            oData.Object = data; //store actual data structure for possible later use
            oData.Value = data ? data[this.formatResultLabelKey] : null;
            return oData;
        },
        _createBit : function(oData) {    
            var elTblListInputLine = this._elTblListInputLine,
                oSelf = this;
            var bit;
            //add bit if it doesn't exist already
            if(!this._oTblSelections[oData.Value]) {
                bit = document.createElement("li");
                bit.Object = oData.Object; //store actual data structure for possible later use
                bit._value = oData.Value;
                var bitText = document.createTextNode(bit._value);
                var bitDelete = document.createElement("a");
                bitDelete.href = "#";
                bit = Dom.insertBefore(bit, elTblListInputLine);
                Event.addListener(bit, "click", oSelf._onListRemoveBitClick, oSelf);
                Dom.addClass(bit, CSS_PREFIX + "Bit");
                Dom.addClass(bit, CSS_PREFIX + "BitBox");
                //add text
                bit.appendChild(bitText);
                //add delete
                bitDelete = bit.appendChild(bitDelete);    
                Dom.addClass(bitDelete, CSS_PREFIX + "BitBoxDelete");
            }
            return bit;
        },
        _updateValue : function(elListItem) {
            if(this.multiSelect){
                if(!this.suppressInputUpdate) {    
                    var elTextbox = this._elTextbox,
                        data = elListItem._oResultData;
                    // clear input field
                    elTextbox.value = "";
                    //create bit from data
                    var oData = this._createDataObject(data);
                    var bit = this._createBit(oData);
                    return bit;
                }
            }
            else {
                TBL.superclass._updateValue.call(this, elListItem);
            }
        },
        _selectItem : function(elListItem) {
            if(elListItem && elListItem !== null && elListItem._oResultData) {
                if(this.multiSelect){
                    this._bItemSelected = true;
                    var newBit = this._updateValue(elListItem);
                    this._clearInterval();
                    if(newBit){
                        var newVal = newBit._value;
                        this._sPastSelections = newVal;
                        this._oTblSelections[newVal] = newBit;
                        this._updateDirty();
                        this.itemSelectEvent.fire(this, elListItem, elListItem._oResultData);
                    }
                    this._toggleContainer(false);
                }
                else {
                    var oData = this._createDataObject(elListItem._oResultData);
                    this._oTblSingleSelection = oData;
                    TBL.superclass._selectItem.call(this, elListItem);
                    this._updateDirty();
                }
                //remove focus so enter key doesn't submit
                this._elTextbox.blur();
            }
        },
        //click event catch
        _onListTextboxClick : function(v, oSelf){
            if(!this.disabled) {
                Event.stopEvent(v); //stop event from bubbling to container
                oSelf._sendQuery(""); //must pass empty string as query
            }
        },
        _onListContainerClick : function(v, oSelf){
            if(!this.disabled) {
                if(oSelf.minQueryLength == 0) {
                    oSelf._elTextbox.focus();
                    oSelf._sendQuery("");
                }
                else {
                    oSelf._elTextbox.focus();
                }
            }
        },
        _onListRemoveBitClick : function(v, oSelf){
            if(oSelf._elTblList && !oSelf.disabled) {
                var eventTarget = Event.getTarget(v); //stop event from bubbling to container
                Event.stopEvent(v);
                //if this is a bit...
                if(Dom.hasClass(eventTarget, "TextboxListBitBoxDelete")) {
                    var target = eventTarget.parentNode; //get target should return the delete link so we want it's parent
                    if(target) {
                        //double check delete
                        if(oSelf.beforeDeleteEvent.fire(target)) {
                            delete oSelf._oTblSelections[target._value];
                            oSelf._elTblList.removeChild(target);
                            oSelf._updateDirty();
                        }
                    }
                }
            }
        },
        _updateDirty : function() {
            //only update dirty if it's not a select
            if(!this._singleRequest) {
                var isDirty;
                if(this.multiSelect){
                    var cur = this._oTblSelections,
                        orig = this._aOrigSelections;

                    for(var s = 0; s < orig.length; s++) {
                        if(!cur[orig[s]]) {
                            isDirty = true;
                            break;
                        }
                    }
                    //if we're not dirty yet loop current selection and count to see if we have more selected than original
                    if(!isDirty) {
                        var curNum = 0;
                        for(var key in cur) {
                            //if the key actually has a value count it
                            if(cur[key]) {
                                curNum++;
                            }
                        }
                        if(curNum != orig.length) {
                            isDirty = true;
                        }
                    }
                }
                else {
                    isDirty = this._sOrigSingleSelection != this._oTblSingleSelection.Value;
                }
                //if it changes reset validity
                if(isDirty) {
                    this.setValid(true);
                }
                this.dirtyEvent.fire(isDirty);
            }
        }
    });
    
    // Copy static members to class
    Lang.augmentObject(TBL, YAHOO.widget.AutoComplete);
    Lang.augmentObject(TBL, {
        dirtyEvent : null,
        selectSingleEvent : null,
        beforeDeleteEvent : null
    });
    //assign to global
    YAHOO.lacuna.TextboxList = TBL;

})();


// Important to register it
YAHOO.register("textboxList", YAHOO.lacuna.TextboxList, {version: "1.0.0", build: "1"});

}
// vim: noet:ts=4:sw=4

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/textboxList.js","/")
},{"buffer":71,"oMfpAn":75}],69:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// http://www.rajdeepd.com/articles/chrome/localstrg/LocalStorageSample.htm

// NOTE:
// this varies from actual localStorage in some subtle ways

// also, there is no persistence
// TODO persist
(function () {
  "use strict";

  var fs = require('fs')
    ;

  function Storage(path, opts) {
    opts = opts || {};
    var db
      ;

    Object.defineProperty(this, '___priv_bk___', {
      value: {
        path: path
      }
    , writable: false
    , enumerable: false
    });

    Object.defineProperty(this, '___priv_strict___', {
      value: !!opts.strict
    , writable: false
    , enumerable: false
    });

    Object.defineProperty(this, '___priv_ws___', {
      value: opts.ws || '  '
    , writable: false
    , enumerable: false
    });

    try {
      db = JSON.parse(fs.readFileSync(path));
    } catch(e) {
      db = {};
    }

    Object.keys(db).forEach(function (key) {
      this[key] = db[key];
    }, this);
  }

  Storage.prototype.getItem = function (key) {
    if (this.hasOwnProperty(key)) {
      if (this.___priv_strict___) {
        return String(this[key]);
      } else {
        return this[key];
      }
    }
    return null;
  };

  Storage.prototype.setItem = function (key, val) {
    if (val === undefined) {
      this[key] = null;
    } else if (this.___priv_strict___) {
      this[key] = String(val);
    } else {
      this[key] = val;
    }
    this.___save___();
  };

  Storage.prototype.removeItem = function (key) {
    delete this[key];
    this.___save___();
  };

  Storage.prototype.clear = function () {
    var self = this;
    // filters out prototype keys
    Object.keys(self).forEach(function (key) {
      self[key] = undefined;
      delete self[key];
    });
  };

  Storage.prototype.key = function (i) {
    i = i || 0;
    return Object.keys(this)[i];
  };

  Storage.prototype.__defineGetter__('length', function () {
    return Object.keys(this).length;
  });

  Storage.prototype.___save___ = function () {
    var self = this
      ;

    if (!this.___priv_bk___.path) {
      return;
    }

    if (this.___priv_bk___.lock) {
      this.___priv_bk___.wait = true;
      return;
    }

    this.___priv_bk___.lock = true;
    fs.writeFile(
      this.___priv_bk___.path
    , JSON.stringify(this, null, this.___priv_ws___)
    , 'utf8'
    , function (e) {
      self.___priv_bk___.lock = false;
      if (e) {
        return;
      }
      if (self.___priv_bk___.wait) {
        self.___priv_bk___.wait = false;
        self.___save___();
      }
    });
  };

  Object.defineProperty(Storage, 'create', {
    value: function (path, opts) {
      return new Storage(path, opts);
    }
  , writable: false
  , enumerable: false
  });

  module.exports = Storage;
}());

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/dom-storage/lib/index.js","/../../node_modules/dom-storage/lib")
},{"buffer":71,"fs":70,"oMfpAn":75}],70:[function(require,module,exports){

},{"buffer":71,"oMfpAn":75}],71:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer")
},{"base64-js":72,"buffer":71,"ieee754":73,"oMfpAn":75}],72:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
},{"buffer":71,"oMfpAn":75}],73:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/buffer/node_modules/ieee754")
},{"buffer":71,"oMfpAn":75}],74:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/path-browserify/index.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/path-browserify")
},{"buffer":71,"oMfpAn":75}],75:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process/browser.js","/../../node_modules/gulp-browserify/node_modules/browserify/node_modules/process")
},{"buffer":71,"oMfpAn":75}],76:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	// Support: Windows Web Apps (WWA)
	// `name` and `type` need .setAttribute for WWA
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/jquery/dist/jquery.js","/../../node_modules/jquery/dist")
},{"buffer":71,"oMfpAn":75}],77:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,require("oMfpAn"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../../node_modules/lodash/dist/lodash.js","/../../node_modules/lodash/dist")
},{"buffer":71,"oMfpAn":75}]},{},[47])